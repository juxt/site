{"mappings":"+BAEA,SAASA,cACPC,EACAC,GAEA,MAAMC,eAAUC,EAAMJ,cAA4CE,GAElE,SAASG,EAASC,GAChB,MAAMC,SAAEA,KAAaC,GAAYF,EAG3BG,EAAQL,EAAMM,SAAQ,IAAMF,GAASG,OAAOC,OAAOJ,iBACzD,OAAOK,EAAAC,cAACX,EAAQE,SAAT,CAAkBI,MAAOA,GAAQF,GAY1C,OADAF,EAASU,YAAcd,EAAoB,WACpC,CAACI,EATR,SAAoBW,GAClB,MAAMR,EAAUJ,EAAMa,WAAWd,GACjC,GAAIK,EAAS,OAAOA,EACpB,QAAuBU,IAAnBhB,EAA8B,OAAOA,EAEzC,MAAM,IAAIiB,MAAO,KAAIH,6BAAwCf,gBAkBjE,SAASmB,mBAAmBC,EAAmBC,EAAwC,IACrF,IAAIC,EAAyB,GA0C7B,MAAMC,EAA2B,KAC/B,MAAMC,EAAgBF,EAAgBG,KAAKxB,gBAClCE,EAAMJ,cAAcE,KAE7B,OAAO,SAAkByB,GACvB,MAAMC,GAAWD,MAAAA,OAAA,EAAAA,EAAQN,KAAcI,EACvC,OAAOrB,EAAMM,SACX,KAAA,CAAS,CAAE,UAASW,KAAc,IAAKM,EAAON,CAACA,GAAYO,MAC3D,CAACD,EAAOC,MAMd,OADAJ,EAAYH,UAAYA,EACjB,CAlDP,SACEpB,EACAC,GAEA,MAAM2B,eAAczB,EAAMJ,cAA4CE,GAChE4B,EAAQP,EAAgBQ,OAG9B,SAAS1B,EACPC,GAEA,MAAMqB,MAAEA,EAAFpB,SAASA,KAAaC,GAAYF,EAClCH,GAAUwB,MAAAA,OAAA,EAAAA,EAAQN,GAAWS,KAAUD,EAGvCpB,EAAQL,EAAMM,SAAQ,IAAMF,GAASG,OAAOC,OAAOJ,iBACzD,OAAOK,EAAAC,cAACX,EAAQE,SAAT,CAAkBI,MAAOA,GAAQF,GAa1C,OAvBAgB,EAAkB,IAAIA,EAAiBrB,GAsBvCG,EAASU,YAAcd,EAAoB,WACpC,CAACI,EAVR,SAAoBW,EAAsBW,GACxC,MAAMxB,GAAUwB,MAAAA,OAAA,EAAAA,EAAQN,GAAWS,KAAUD,EACvCrB,EAAUJ,EAAMa,WAAWd,GACjC,GAAIK,EAAS,OAAOA,EACpB,QAAuBU,IAAnBhB,EAA8B,OAAOA,EAEzC,MAAM,IAAIiB,MAAO,KAAIH,6BAAwCf,UAyB1C+B,EAAqBR,KAAgBF,IAO9D,SAASU,KAAwBC,GAC/B,MAAMC,EAAYD,EAAO,GACzB,GAAsB,IAAlBA,EAAOF,OAAc,OAAOG,EAEhC,MAAMV,EAA2B,KAC/B,MAAMW,EAAaF,EAAOP,KAAKF,IAAD,CAC5BY,SAAUZ,IACVH,UAAWG,EAAYH,cAGzB,OAAO,SAA2BgB,GAChC,MAAMC,EAAaH,EAAWI,QAAO,CAACD,GAAcF,SAAAA,EAAUf,UAAAA,MAMrD,IAAKiB,KAFOF,EAASC,GACK,UAAShB,QAEzC,IAEH,OAAOjB,EAAMM,SAAQ,KAAA,CAAS,CAAE,UAASwB,EAAUb,aAAciB,KAAe,CAACA,MAKrF,OADAd,EAAYH,UAAYa,EAAUb,UAC3BG","sources":["./packages/react/context/src/createContext.tsx"],"sourcesContent":["import * as React from 'react';\n\nfunction createContext<ContextValueType extends object | null>(\n  rootComponentName: string,\n  defaultContext?: ContextValueType\n) {\n  const Context = React.createContext<ContextValueType | undefined>(defaultContext);\n\n  function Provider(props: ContextValueType & { children: React.ReactNode }) {\n    const { children, ...context } = props;\n    // Only re-memoize when prop values change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const value = React.useMemo(() => context, Object.values(context)) as ContextValueType;\n    return <Context.Provider value={value}>{children}</Context.Provider>;\n  }\n\n  function useContext(consumerName: string) {\n    const context = React.useContext(Context);\n    if (context) return context;\n    if (defaultContext !== undefined) return defaultContext;\n    // if a defaultContext wasn't specified, it's a required context.\n    throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n  }\n\n  Provider.displayName = rootComponentName + 'Provider';\n  return [Provider, useContext] as const;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * createContextScope\n * -----------------------------------------------------------------------------------------------*/\n\ntype Scope<C = any> = { [scopeName: string]: React.Context<C>[] } | undefined;\ntype ScopeHook = (scope: Scope) => { [__scopeProp: string]: Scope };\ninterface CreateScope {\n  scopeName: string;\n  (): ScopeHook;\n}\n\nfunction createContextScope(scopeName: string, createContextScopeDeps: CreateScope[] = []) {\n  let defaultContexts: any[] = [];\n\n  /* -----------------------------------------------------------------------------------------------\n   * createContext\n   * ---------------------------------------------------------------------------------------------*/\n\n  function createContext<ContextValueType extends object | null>(\n    rootComponentName: string,\n    defaultContext?: ContextValueType\n  ) {\n    const BaseContext = React.createContext<ContextValueType | undefined>(defaultContext);\n    const index = defaultContexts.length;\n    defaultContexts = [...defaultContexts, defaultContext];\n\n    function Provider(\n      props: ContextValueType & { scope: Scope<ContextValueType>; children: React.ReactNode }\n    ) {\n      const { scope, children, ...context } = props;\n      const Context = scope?.[scopeName][index] || BaseContext;\n      // Only re-memoize when prop values change\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const value = React.useMemo(() => context, Object.values(context)) as ContextValueType;\n      return <Context.Provider value={value}>{children}</Context.Provider>;\n    }\n\n    function useContext(consumerName: string, scope: Scope<ContextValueType | undefined>) {\n      const Context = scope?.[scopeName][index] || BaseContext;\n      const context = React.useContext(Context);\n      if (context) return context;\n      if (defaultContext !== undefined) return defaultContext;\n      // if a defaultContext wasn't specified, it's a required context.\n      throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n    }\n\n    Provider.displayName = rootComponentName + 'Provider';\n    return [Provider, useContext] as const;\n  }\n\n  /* -----------------------------------------------------------------------------------------------\n   * createScope\n   * ---------------------------------------------------------------------------------------------*/\n\n  const createScope: CreateScope = () => {\n    const scopeContexts = defaultContexts.map((defaultContext) => {\n      return React.createContext(defaultContext);\n    });\n    return function useScope(scope: Scope) {\n      const contexts = scope?.[scopeName] || scopeContexts;\n      return React.useMemo(\n        () => ({ [`__scope${scopeName}`]: { ...scope, [scopeName]: contexts } }),\n        [scope, contexts]\n      );\n    };\n  };\n\n  createScope.scopeName = scopeName;\n  return [createContext, composeContextScopes(createScope, ...createContextScopeDeps)] as const;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * composeContextScopes\n * -----------------------------------------------------------------------------------------------*/\n\nfunction composeContextScopes(...scopes: CreateScope[]) {\n  const baseScope = scopes[0];\n  if (scopes.length === 1) return baseScope;\n\n  const createScope: CreateScope = () => {\n    const scopeHooks = scopes.map((createScope) => ({\n      useScope: createScope(),\n      scopeName: createScope.scopeName,\n    }));\n\n    return function useComposedScopes(overrideScopes) {\n      const nextScopes = scopeHooks.reduce((nextScopes, { useScope, scopeName }) => {\n        // We are calling a hook inside a callback which React warns against to avoid inconsistent\n        // renders, however, scoping doesn't have render side effects so we ignore the rule.\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const scopeProps = useScope(overrideScopes);\n        const currentScope = scopeProps[`__scope${scopeName}`];\n        return { ...nextScopes, ...currentScope };\n      }, {});\n\n      return React.useMemo(() => ({ [`__scope${baseScope.scopeName}`]: nextScopes }), [nextScopes]);\n    };\n  };\n\n  createScope.scopeName = baseScope.scopeName;\n  return createScope;\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nexport { createContext, createContextScope };\nexport type { CreateScope, Scope };\n"],"names":["createContext","rootComponentName","defaultContext","Context","React","Provider","props","children","context","value","useMemo","Object","values","_react","createElement","displayName","consumerName","useContext","undefined","Error","createContextScope","scopeName","createContextScopeDeps","defaultContexts","createScope","scopeContexts","map","scope","contexts","BaseContext","index","length","composeContextScopes","scopes","baseScope","scopeHooks","useScope","overrideScopes","nextScopes","reduce"],"version":3,"file":"index.module.js.map"}