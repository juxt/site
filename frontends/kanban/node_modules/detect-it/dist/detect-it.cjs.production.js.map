{"version":3,"file":"detect-it.cjs.production.js","sources":["../src/index.ts"],"sourcesContent":["interface noWindow {\n  screen: {\n    width?: number;\n    height?: number;\n  };\n  navigator: {\n    maxTouchPoints?: number;\n    userAgent?: string;\n  };\n  addEventListener?: () => void;\n  removeEventListener?: () => void;\n  matchMedia?: () => { matches: boolean };\n}\n\n// so it doesn't throw if no window or matchMedia\nconst w: Window | noWindow =\n  typeof window !== 'undefined' ? window : { screen: {}, navigator: {} };\nconst matchMedia = (w.matchMedia || (() => ({ matches: false }))).bind(w);\n\n// passive events test\n// adapted from https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\nlet passiveOptionAccessed = false;\nconst options = {\n  get passive() {\n    return (passiveOptionAccessed = true);\n  },\n};\n// have to set and remove a no-op listener instead of null\n// (which was used previously), because Edge v15 throws an error\n// when providing a null callback.\n// https://github.com/rafgraph/detect-passive-events/pull/3\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst noop = () => {};\nw.addEventListener && w.addEventListener('p', noop, options);\nw.removeEventListener && w.removeEventListener('p', noop, false);\n\nexport const supportsPassiveEvents: boolean = passiveOptionAccessed;\n\nexport const supportsPointerEvents: boolean = 'PointerEvent' in w;\n\nconst onTouchStartInWindow = 'ontouchstart' in w;\nconst touchEventInWindow = 'TouchEvent' in w;\n// onTouchStartInWindow is the old-old-legacy way to determine a touch device\n// and many websites interpreted it to mean that the device is a touch only phone,\n// so today browsers on a desktop/laptop computer with a touch screen (primary input mouse)\n// have onTouchStartInWindow as false (to prevent from being confused with a\n// touchOnly phone) even though they support the TouchEvents API, so need to check\n// both onTouchStartInWindow and touchEventInWindow for TouchEvent support,\n// however, some browsers (chromium) support the TouchEvents API even when running on\n// a mouse only device (touchEventInWindow true, but onTouchStartInWindow false)\n// so the touchEventInWindow check needs to include an coarse pointer media query\nexport const supportsTouchEvents: boolean =\n  onTouchStartInWindow ||\n  (touchEventInWindow && matchMedia('(any-pointer: coarse)').matches);\n\nconst hasTouch = (w.navigator.maxTouchPoints || 0) > 0 || supportsTouchEvents;\n\n// userAgent is used as a backup to correct for known device/browser bugs\n// and when the browser doesn't support interaction media queries (pointer and hover)\n// see https://caniuse.com/css-media-interaction\nconst userAgent = w.navigator.userAgent || '';\n\n// iPads now support a mouse that can hover, however the media query interaction\n// feature results always say iPads only have a coarse pointer that can't hover\n// even when a mouse is connected (anyFine and anyHover are always false),\n// this unfortunately indicates a touch only device but iPads should\n// be classified as a hybrid device, so determine if it is an iPad\n// to indicate it should be treated as a hybrid device with anyHover true\nconst isIPad =\n  matchMedia('(pointer: coarse)').matches &&\n  // both iPad and iPhone can \"request desktop site\", which sets the userAgent to Macintosh\n  // so need to check both userAgents to determine if it is an iOS device\n  // and screen size to separate iPad from iPhone\n  /iPad|Macintosh/.test(userAgent) &&\n  Math.min(w.screen.width || 0, w.screen.height || 0) >= 768;\n\nconst hasCoarsePrimaryPointer =\n  (matchMedia('(pointer: coarse)').matches ||\n    // if the pointer is not coarse and not fine then the browser doesn't support\n    // interaction media queries (see https://caniuse.com/css-media-interaction)\n    // so if it has onTouchStartInWindow assume it has a coarse primary pointer\n    (!matchMedia('(pointer: fine)').matches && onTouchStartInWindow)) &&\n  // bug in firefox (as of v81) on hybrid windows devices where the interaction media queries\n  // always indicate a touch only device (only has a coarse pointer that can't hover)\n  // so assume that the primary pointer is not coarse for firefox windows\n  !/Windows.*Firefox/.test(userAgent);\n\nconst hasAnyHoverOrAnyFinePointer =\n  matchMedia('(any-pointer: fine)').matches ||\n  matchMedia('(any-hover: hover)').matches ||\n  // iPads might have an input device that can hover, so assume it has anyHover\n  isIPad ||\n  // if no onTouchStartInWindow then the browser is indicating that it is not a touch only device\n  // see above note for supportsTouchEvents\n  !onTouchStartInWindow;\n\n// a hybrid device is one that both hasTouch and\n// any input can hover or has a fine pointer, or the primary pointer is not coarse\n// if it's not a hybrid, then if it hasTouch it's touchOnly, otherwise it's mouseOnly\nexport const deviceType: 'mouseOnly' | 'touchOnly' | 'hybrid' =\n  hasTouch && (hasAnyHoverOrAnyFinePointer || !hasCoarsePrimaryPointer)\n    ? 'hybrid'\n    : hasTouch\n    ? 'touchOnly'\n    : 'mouseOnly';\n\nexport const primaryInput: 'mouse' | 'touch' =\n  deviceType === 'mouseOnly'\n    ? 'mouse'\n    : deviceType === 'touchOnly'\n    ? 'touch'\n    : // if the device is a hybrid, then if the primary pointer is coarse\n    // assume the primaryInput is touch, otherwise assume it's mouse\n    hasCoarsePrimaryPointer\n    ? 'touch'\n    : 'mouse';\n"],"names":["w","window","screen","navigator","matchMedia","matches","bind","passiveOptionAccessed","options","passive","noop","addEventListener","removeEventListener","supportsPassiveEvents","supportsPointerEvents","onTouchStartInWindow","supportsTouchEvents","hasTouch","maxTouchPoints","userAgent","isIPad","test","Math","min","width","height","hasCoarsePrimaryPointer","hasAnyHoverOrAnyFinePointer","deviceType","primaryInput"],"mappings":"oEAeA,IAAMA,EACc,oBAAXC,OAAyBA,OAAS,CAAEC,OAAQ,GAAIC,UAAW,IAC9DC,GAAcJ,EAAEI,uBAAqB,OAAGC,SAAS,KAAWC,KAAKN,GAInEO,GAAwB,EACtBC,EAAU,CACdC,cACE,OAAQF,GAAwB,IAQ9BG,EAAO,aACbV,EAAEW,kBAAoBX,EAAEW,iBAAiB,IAAKD,EAAMF,GACpDR,EAAEY,qBAAuBZ,EAAEY,oBAAoB,IAAKF,GAAM,OAE7CG,EAAiCN,EAEjCO,EAAiC,iBAAkBd,EAE1De,EAAuB,iBAAkBf,EAWlCgB,EACXD,GAXyB,eAAgBf,GAYlBI,EAAW,yBAAyBC,QAEvDY,GAAYjB,EAAEG,UAAUe,gBAAkB,GAAK,GAAKF,EAKpDG,EAAYnB,EAAEG,UAAUgB,WAAa,GAQrCC,EACJhB,EAAW,qBAAqBC,SAIhC,iBAAiBgB,KAAKF,IACtBG,KAAKC,IAAIvB,EAAEE,OAAOsB,OAAS,EAAGxB,EAAEE,OAAOuB,QAAU,IAAM,IAEnDC,GACHtB,EAAW,qBAAqBC,UAI7BD,EAAW,mBAAmBC,SAAWU,KAI5C,mBAAmBM,KAAKF,GAErBQ,EACJvB,EAAW,uBAAuBC,SAClCD,EAAW,sBAAsBC,SAEjCe,IAGCL,EAKUa,GACXX,IAAaU,GAAgCD,EAEzCT,EACA,YACA,YAHA,SAKOY,EACI,cAAfD,EACI,QACe,cAAfA,GAIFF,EAHE,QAKA"}