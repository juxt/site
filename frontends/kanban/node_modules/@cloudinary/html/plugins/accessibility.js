import { ACCESSIBILITY_MODES } from '../utils/internalConstants.js';
import { isBrowser } from "../utils/isBrowser.js";
import { isImage } from "../utils/isImage.js";
/**
 * @namespace
 * @description Appends accessibility transformations to the original image.
 * @return {Plugin}
 * @example <caption>NOTE: The following is in React. For further examples, see the Packages tab.</caption>
 * <AdvancedImage cldImg={img} plugins={[accessibility()]}/>
 */
export function accessibility(_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.mode, mode = _c === void 0 ? 'darkmode' : _c;
    return accessibilityPlugin.bind(null, mode);
}
/**
 * @description Accessibility plugin
 * @param mode {accessibilityMode} The accessibility mode to use. Possible modes: 'darkmode' | 'brightmode' | 'monochrome' | 'colorblind'. Default: 'darkmode'.
 * @param element {HTMLImageElement} The image element.
 * @param pluginCloudinaryImage {CloudinaryImage}
 * @param htmlPluginState {htmlPluginState} Holds cleanup callbacks and event subscriptions.
 */
export function accessibilityPlugin(mode, element, pluginCloudinaryImage, htmlPluginState) {
    if (isBrowser()) {
        if (!isImage(element))
            return;
        return new Promise(function (resolve) {
            // resolved promise when canceled
            htmlPluginState.cleanupCallbacks.push(function () {
                resolve('canceled');
            });
            if (!ACCESSIBILITY_MODES[mode]) {
                mode = 'darkmode';
            }
            pluginCloudinaryImage.effect(ACCESSIBILITY_MODES[mode]);
            resolve();
        });
    }
    else {
        pluginCloudinaryImage.effect(ACCESSIBILITY_MODES[mode]);
        return true;
    }
}
