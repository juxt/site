{"version":3,"names":[],"sources":["../src/types.ts"],"sourcesContent":["import type { ModulesOption, UseBuiltInsOption } from \"./options\";\nimport type { NormalizedCorejsOption } from \"./normalize-options\";\nimport type { Targets, InputTargets } from \"@babel/helper-compilation-targets\";\n\n// Options\n// Use explicit modules to prevent typo errors.\nexport type ModuleOption = typeof ModulesOption[keyof typeof ModulesOption];\nexport type BuiltInsOption =\n  typeof UseBuiltInsOption[keyof typeof UseBuiltInsOption];\n\ntype CorejsVersion = 2 | 3 | string;\n\nexport type CorejsOption =\n  | false\n  | CorejsVersion\n  | {\n      version: CorejsVersion;\n      proposals: boolean;\n    };\n\nexport type PluginListItem = string | RegExp;\nexport type PluginListOption = Array<PluginListItem>;\n\nexport type Options = {\n  bugfixes: boolean;\n  configPath: string;\n  corejs: CorejsOption;\n  debug: boolean;\n  exclude: PluginListOption;\n  forceAllTransforms: boolean;\n  ignoreBrowserslistConfig: boolean;\n  include: PluginListOption;\n  loose: boolean;\n  modules: ModuleOption;\n  shippedProposals: boolean;\n  spec: boolean;\n  targets: {\n    uglify?: boolean;\n    esmodules?: boolean;\n  } & InputTargets;\n  useBuiltIns: BuiltInsOption;\n  browserslistEnv: string;\n};\n\n// Babel\nexport type Plugin = [any, any];\n\nexport type InternalPluginOptions = {\n  corejs: NormalizedCorejsOption;\n  include: Set<string>;\n  exclude: Set<string>;\n  polyfillTargets: Targets;\n  debug: boolean;\n  proposals: boolean;\n  shippedProposals: boolean;\n  regenerator: boolean;\n};\n"],"mappings":""}