{"version":3,"file":"tiptap-core.umd.js","sources":["../src/helpers/createChainableState.ts","../src/CommandManager.ts","../src/EventEmitter.ts","../src/helpers/getExtensionField.ts","../src/helpers/splitExtensions.ts","../src/helpers/getAttributesFromExtensions.ts","../src/helpers/getNodeType.ts","../src/utilities/mergeAttributes.ts","../src/helpers/getRenderedAttributes.ts","../src/utilities/isFunction.ts","../src/utilities/callOrReturn.ts","../src/utilities/isEmptyObject.ts","../src/utilities/fromString.ts","../src/helpers/injectExtensionAttributesToParseRule.ts","../src/helpers/getSchemaByResolvedExtensions.ts","../src/helpers/getSchemaTypeByName.ts","../src/helpers/isExtensionRulesEnabled.ts","../src/helpers/getTextContentFromNodes.ts","../src/utilities/isRegExp.ts","../src/InputRule.ts","../src/utilities/isNumber.ts","../src/PasteRule.ts","../src/utilities/findDuplicates.ts","../src/ExtensionManager.ts","../src/utilities/isPlainObject.ts","../src/utilities/mergeDeep.ts","../src/Extension.ts","../src/helpers/getTextBetween.ts","../src/helpers/getTextSerializersFromSchema.ts","../src/extensions/clipboardTextSerializer.ts","../src/commands/blur.ts","../src/commands/clearContent.ts","../src/commands/clearNodes.ts","../src/commands/command.ts","../src/commands/createParagraphNear.ts","../src/commands/deleteNode.ts","../src/commands/deleteRange.ts","../src/commands/deleteSelection.ts","../src/commands/enter.ts","../src/commands/exitCode.ts","../src/utilities/objectIncludes.ts","../src/helpers/getMarkRange.ts","../src/helpers/getMarkType.ts","../src/commands/extendMarkRange.ts","../src/commands/first.ts","../src/helpers/isTextSelection.ts","../src/utilities/minMax.ts","../src/helpers/resolveFocusPosition.ts","../src/utilities/isiOS.ts","../src/commands/focus.ts","../src/commands/forEach.ts","../src/commands/insertContent.ts","../src/utilities/elementFromString.ts","../src/helpers/createNodeFromContent.ts","../src/helpers/selectionToInsertionEnd.ts","../src/commands/insertContentAt.ts","../src/commands/joinBackward.ts","../src/commands/joinForward.ts","../src/utilities/isMacOS.ts","../src/commands/keyboardShortcut.ts","../src/helpers/isNodeActive.ts","../src/commands/lift.ts","../src/commands/liftEmptyBlock.ts","../src/commands/liftListItem.ts","../src/commands/newlineInCode.ts","../src/helpers/getSchemaTypeNameByName.ts","../src/utilities/deleteProps.ts","../src/commands/resetAttributes.ts","../src/commands/scrollIntoView.ts","../src/commands/selectAll.ts","../src/commands/selectNodeBackward.ts","../src/commands/selectNodeForward.ts","../src/commands/selectParentNode.ts","../src/commands/selectTextblockEnd.ts","../src/commands/selectTextblockStart.ts","../src/helpers/createDocument.ts","../src/commands/setContent.ts","../src/helpers/getMarkAttributes.ts","../src/commands/setMark.ts","../src/commands/setMeta.ts","../src/commands/setNode.ts","../src/commands/setNodeSelection.ts","../src/commands/setTextSelection.ts","../src/commands/sinkListItem.ts","../src/helpers/defaultBlockAt.ts","../src/helpers/getSplittedAttributes.ts","../src/commands/splitBlock.ts","../src/commands/splitListItem.ts","../src/helpers/findParentNodeClosestToPos.ts","../src/helpers/findParentNode.ts","../src/helpers/isList.ts","../src/commands/toggleList.ts","../src/helpers/isMarkActive.ts","../src/commands/toggleMark.ts","../src/commands/toggleNode.ts","../src/commands/toggleWrap.ts","../src/commands/undoInputRule.ts","../src/commands/unsetAllMarks.ts","../src/commands/unsetMark.ts","../src/commands/updateAttributes.ts","../src/commands/wrapIn.ts","../src/commands/wrapInList.ts","../src/extensions/commands.ts","../src/extensions/editable.ts","../src/extensions/focusEvents.ts","../src/extensions/keymap.ts","../src/extensions/tabindex.ts","../src/helpers/getNodeAttributes.ts","../src/helpers/getAttributes.ts","../src/helpers/getHTMLFromFragment.ts","../src/helpers/getText.ts","../src/helpers/isActive.ts","../src/helpers/isNodeEmpty.ts","../src/style.ts","../src/utilities/createStyleTag.ts","../src/Editor.ts","../src/helpers/combineTransactionSteps.ts","../src/helpers/findChildren.ts","../src/helpers/findChildrenInRange.ts","../src/helpers/getSchema.ts","../src/helpers/generateHTML.ts","../src/helpers/generateJSON.ts","../src/helpers/generateText.ts","../src/utilities/removeDuplicates.ts","../src/helpers/getChangedRanges.ts","../src/helpers/getDebugJSON.ts","../src/helpers/getMarksBetween.ts","../src/helpers/isNodeSelection.ts","../src/helpers/posToDOMRect.ts","../src/inputRules/markInputRule.ts","../src/inputRules/nodeInputRule.ts","../src/inputRules/textblockTypeInputRule.ts","../src/inputRules/textInputRule.ts","../src/inputRules/wrappingInputRule.ts","../src/Mark.ts","../src/Node.ts","../src/NodeView.ts","../src/pasteRules/markPasteRule.ts","../src/utilities/escapeForRegEx.ts","../src/pasteRules/nodePasteRule.ts","../src/pasteRules/textPasteRule.ts","../src/Tracker.ts"],"sourcesContent":["import { EditorState, Transaction } from 'prosemirror-state'\n\nexport function createChainableState(config: {\n  transaction: Transaction,\n  state: EditorState,\n}): EditorState {\n  const { state, transaction } = config\n  let { selection } = transaction\n  let { doc } = transaction\n  let { storedMarks } = transaction\n\n  return {\n    ...state,\n    apply: state.apply.bind(state),\n    applyTransaction: state.applyTransaction.bind(state),\n    filterTransaction: state.filterTransaction,\n    plugins: state.plugins,\n    schema: state.schema,\n    reconfigure: state.reconfigure.bind(state),\n    toJSON: state.toJSON.bind(state),\n    get storedMarks() {\n      return storedMarks\n    },\n    get selection() {\n      return selection\n    },\n    get doc() {\n      return doc\n    },\n    get tr() {\n      selection = transaction.selection\n      doc = transaction.doc\n      storedMarks = transaction.storedMarks\n\n      return transaction\n    },\n  }\n}\n","import { EditorState, Transaction } from 'prosemirror-state'\n\nimport { Editor } from './Editor'\nimport { createChainableState } from './helpers/createChainableState'\nimport {\n  AnyCommands,\n  CanCommands,\n  ChainedCommands,\n  CommandProps,\n  SingleCommands,\n} from './types'\n\nexport class CommandManager {\n\n  editor: Editor\n\n  rawCommands: AnyCommands\n\n  customState?: EditorState\n\n  constructor(props: {\n    editor: Editor,\n    state?: EditorState,\n  }) {\n    this.editor = props.editor\n    this.rawCommands = this.editor.extensionManager.commands\n    this.customState = props.state\n  }\n\n  get hasCustomState(): boolean {\n    return !!this.customState\n  }\n\n  get state(): EditorState {\n    return this.customState || this.editor.state\n  }\n\n  get commands(): SingleCommands {\n    const { rawCommands, editor, state } = this\n    const { view } = editor\n    const { tr } = state\n    const props = this.buildProps(tr)\n\n    return Object.fromEntries(Object\n      .entries(rawCommands)\n      .map(([name, command]) => {\n        const method = (...args: any[]) => {\n          const callback = command(...args)(props)\n\n          if (!tr.getMeta('preventDispatch') && !this.hasCustomState) {\n            view.dispatch(tr)\n          }\n\n          return callback\n        }\n\n        return [name, method]\n      })) as unknown as SingleCommands\n  }\n\n  get chain(): () => ChainedCommands {\n    return () => this.createChain()\n  }\n\n  get can(): () => CanCommands {\n    return () => this.createCan()\n  }\n\n  public createChain(startTr?: Transaction, shouldDispatch = true): ChainedCommands {\n    const { rawCommands, editor, state } = this\n    const { view } = editor\n    const callbacks: boolean[] = []\n    const hasStartTransaction = !!startTr\n    const tr = startTr || state.tr\n\n    const run = () => {\n      if (\n        !hasStartTransaction\n        && shouldDispatch\n        && !tr.getMeta('preventDispatch')\n        && !this.hasCustomState\n      ) {\n        view.dispatch(tr)\n      }\n\n      return callbacks.every(callback => callback === true)\n    }\n\n    const chain = {\n      ...Object.fromEntries(Object.entries(rawCommands).map(([name, command]) => {\n        const chainedCommand = (...args: never[]) => {\n          const props = this.buildProps(tr, shouldDispatch)\n          const callback = command(...args)(props)\n\n          callbacks.push(callback)\n\n          return chain\n        }\n\n        return [name, chainedCommand]\n      })),\n      run,\n    } as unknown as ChainedCommands\n\n    return chain\n  }\n\n  public createCan(startTr?: Transaction): CanCommands {\n    const { rawCommands, state } = this\n    const dispatch = false\n    const tr = startTr || state.tr\n    const props = this.buildProps(tr, dispatch)\n    const formattedCommands = Object.fromEntries(Object\n      .entries(rawCommands)\n      .map(([name, command]) => {\n        return [name, (...args: never[]) => command(...args)({ ...props, dispatch: undefined })]\n      })) as unknown as SingleCommands\n\n    return {\n      ...formattedCommands,\n      chain: () => this.createChain(tr, dispatch),\n    } as CanCommands\n  }\n\n  public buildProps(tr: Transaction, shouldDispatch = true): CommandProps {\n    const { rawCommands, editor, state } = this\n    const { view } = editor\n\n    if (state.storedMarks) {\n      tr.setStoredMarks(state.storedMarks)\n    }\n\n    const props: CommandProps = {\n      tr,\n      editor,\n      view,\n      state: createChainableState({\n        state,\n        transaction: tr,\n      }),\n      dispatch: shouldDispatch\n        ? () => undefined\n        : undefined,\n      chain: () => this.createChain(tr),\n      can: () => this.createCan(tr),\n      get commands() {\n        return Object.fromEntries(Object\n          .entries(rawCommands)\n          .map(([name, command]) => {\n            return [name, (...args: never[]) => command(...args)(props)]\n          })) as unknown as SingleCommands\n      },\n    }\n\n    return props\n  }\n\n}\n","type StringKeyOf<T> = Extract<keyof T, string>\ntype CallbackType<\n  T extends Record<string, any>,\n  EventName extends StringKeyOf<T>,\n> = T[EventName] extends any[] ? T[EventName] : [T[EventName]]\ntype CallbackFunction<\n  T extends Record<string, any>,\n  EventName extends StringKeyOf<T>,\n> = (...props: CallbackType<T, EventName>) => any\n\nexport class EventEmitter<T extends Record<string, any>> {\n\n  private callbacks: { [key: string]: Function[] } = {}\n\n  public on<EventName extends StringKeyOf<T>>(event: EventName, fn: CallbackFunction<T, EventName>): this {\n    if (!this.callbacks[event]) {\n      this.callbacks[event] = []\n    }\n\n    this.callbacks[event].push(fn)\n\n    return this\n  }\n\n  protected emit<EventName extends StringKeyOf<T>>(event: EventName, ...args: CallbackType<T, EventName>): this {\n    const callbacks = this.callbacks[event]\n\n    if (callbacks) {\n      callbacks.forEach(callback => callback.apply(this, args))\n    }\n\n    return this\n  }\n\n  public off<EventName extends StringKeyOf<T>>(event: EventName, fn?: CallbackFunction<T, EventName>): this {\n    const callbacks = this.callbacks[event]\n\n    if (callbacks) {\n      if (fn) {\n        this.callbacks[event] = callbacks.filter(callback => callback !== fn)\n      } else {\n        delete this.callbacks[event]\n      }\n    }\n\n    return this\n  }\n\n  protected removeAllListeners(): void {\n    this.callbacks = {}\n  }\n}\n","import { AnyExtension, MaybeThisParameterType, RemoveThis } from '../types'\n\nexport function getExtensionField<T = any>(\n  extension: AnyExtension,\n  field: string,\n  context?: Omit<MaybeThisParameterType<T>, 'parent'>,\n): RemoveThis<T> {\n\n  if (extension.config[field] === undefined && extension.parent) {\n    return getExtensionField(extension.parent, field, context)\n  }\n\n  if (typeof extension.config[field] === 'function') {\n    const value = extension.config[field].bind({\n      ...context,\n      parent: extension.parent\n        ? getExtensionField(extension.parent, field, context)\n        : null,\n    })\n\n    return value\n  }\n\n  return extension.config[field]\n}\n","import { Extension } from '../Extension'\nimport { Mark } from '../Mark'\nimport { Node } from '../Node'\nimport { Extensions } from '../types'\n\nexport function splitExtensions(extensions: Extensions) {\n  const baseExtensions = extensions.filter(extension => extension.type === 'extension') as Extension[]\n  const nodeExtensions = extensions.filter(extension => extension.type === 'node') as Node[]\n  const markExtensions = extensions.filter(extension => extension.type === 'mark') as Mark[]\n\n  return {\n    baseExtensions,\n    nodeExtensions,\n    markExtensions,\n  }\n}\n","import { MarkConfig, NodeConfig } from '..'\nimport {\n  AnyConfig,\n  Attribute,\n  Attributes,\n  ExtensionAttribute,\n  Extensions,\n  GlobalAttributes,\n} from '../types'\nimport { getExtensionField } from './getExtensionField'\nimport { splitExtensions } from './splitExtensions'\n\n/**\n * Get a list of all extension attributes defined in `addAttribute` and `addGlobalAttribute`.\n * @param extensions List of extensions\n */\nexport function getAttributesFromExtensions(extensions: Extensions): ExtensionAttribute[] {\n  const extensionAttributes: ExtensionAttribute[] = []\n  const { nodeExtensions, markExtensions } = splitExtensions(extensions)\n  const nodeAndMarkExtensions = [...nodeExtensions, ...markExtensions]\n  const defaultAttribute: Required<Attribute> = {\n    default: null,\n    rendered: true,\n    renderHTML: null,\n    parseHTML: null,\n    keepOnSplit: true,\n    isRequired: false,\n  }\n\n  extensions.forEach(extension => {\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n    }\n\n    const addGlobalAttributes = getExtensionField<AnyConfig['addGlobalAttributes']>(\n      extension,\n      'addGlobalAttributes',\n      context,\n    )\n\n    if (!addGlobalAttributes) {\n      return\n    }\n\n    // TODO: remove `as GlobalAttributes`\n    const globalAttributes = addGlobalAttributes() as GlobalAttributes\n\n    globalAttributes.forEach(globalAttribute => {\n      globalAttribute.types.forEach(type => {\n        Object\n          .entries(globalAttribute.attributes)\n          .forEach(([name, attribute]) => {\n            extensionAttributes.push({\n              type,\n              name,\n              attribute: {\n                ...defaultAttribute,\n                ...attribute,\n              },\n            })\n          })\n      })\n    })\n  })\n\n  nodeAndMarkExtensions.forEach(extension => {\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n    }\n\n    const addAttributes = getExtensionField<NodeConfig['addAttributes'] | MarkConfig['addAttributes']>(\n      extension,\n      'addAttributes',\n      context,\n    )\n\n    if (!addAttributes) {\n      return\n    }\n\n    // TODO: remove `as Attributes`\n    const attributes = addAttributes() as Attributes\n\n    Object\n      .entries(attributes)\n      .forEach(([name, attribute]) => {\n        const mergedAttr = {\n          ...defaultAttribute,\n          ...attribute,\n        }\n\n        if (attribute.isRequired && attribute.default === undefined) {\n          delete mergedAttr.default\n        }\n\n        extensionAttributes.push({\n          type: extension.name,\n          name,\n          attribute: mergedAttr,\n        })\n      })\n  })\n\n  return extensionAttributes\n}\n","import { NodeType, Schema } from 'prosemirror-model'\n\nexport function getNodeType(nameOrType: string | NodeType, schema: Schema): NodeType {\n  if (typeof nameOrType === 'string') {\n    if (!schema.nodes[nameOrType]) {\n      throw Error(`There is no node type named '${nameOrType}'. Maybe you forgot to add the extension?`)\n    }\n\n    return schema.nodes[nameOrType]\n  }\n\n  return nameOrType\n}\n","export function mergeAttributes(...objects: Record<string, any>[]): Record<string, any> {\n  return objects\n    .filter(item => !!item)\n    .reduce((items, item) => {\n      const mergedAttributes = { ...items }\n\n      Object.entries(item).forEach(([key, value]) => {\n        const exists = mergedAttributes[key]\n\n        if (!exists) {\n          mergedAttributes[key] = value\n\n          return\n        }\n\n        if (key === 'class') {\n          mergedAttributes[key] = [mergedAttributes[key], value].join(' ')\n        } else if (key === 'style') {\n          mergedAttributes[key] = [mergedAttributes[key], value].join('; ')\n        } else {\n          mergedAttributes[key] = value\n        }\n      })\n\n      return mergedAttributes\n    }, {})\n}\n","import { Mark, Node } from 'prosemirror-model'\n\nimport { ExtensionAttribute } from '../types'\nimport { mergeAttributes } from '../utilities/mergeAttributes'\n\nexport function getRenderedAttributes(nodeOrMark: Node | Mark, extensionAttributes: ExtensionAttribute[]): Record<string, any> {\n  return extensionAttributes\n    .filter(item => item.attribute.rendered)\n    .map(item => {\n      if (!item.attribute.renderHTML) {\n        return {\n          [item.name]: nodeOrMark.attrs[item.name],\n        }\n      }\n\n      return item.attribute.renderHTML(nodeOrMark.attrs) || {}\n    })\n    .reduce((attributes, attribute) => mergeAttributes(attributes, attribute), {})\n}\n","export function isFunction(value: any): value is Function {\n  return typeof value === 'function'\n}\n","import { MaybeReturnType } from '../types'\nimport { isFunction } from './isFunction'\n\n/**\n * Optionally calls `value` as a function.\n * Otherwise it is returned directly.\n * @param value Function or any value.\n * @param context Optional context to bind to function.\n * @param props Optional props to pass to function.\n */\nexport function callOrReturn<T>(value: T, context: any = undefined, ...props: any[]): MaybeReturnType<T> {\n  if (isFunction(value)) {\n    if (context) {\n      return value.bind(context)(...props)\n    }\n\n    return value(...props)\n  }\n\n  return value as MaybeReturnType<T>\n}\n","export function isEmptyObject(value = {}): boolean {\n  return Object.keys(value).length === 0 && value.constructor === Object\n}\n","export function fromString(value: any): any {\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  if (value.match(/^[+-]?(?:\\d*\\.)?\\d+$/)) {\n    return Number(value)\n  }\n\n  if (value === 'true') {\n    return true\n  }\n\n  if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n","import { ParseRule } from 'prosemirror-model'\n\nimport { ExtensionAttribute } from '../types'\nimport { fromString } from '../utilities/fromString'\n\n/**\n * This function merges extension attributes into parserule attributes (`attrs` or `getAttrs`).\n * Cancels when `getAttrs` returned `false`.\n * @param parseRule ProseMirror ParseRule\n * @param extensionAttributes List of attributes to inject\n */\nexport function injectExtensionAttributesToParseRule(parseRule: ParseRule, extensionAttributes: ExtensionAttribute[]): ParseRule {\n  if (parseRule.style) {\n    return parseRule\n  }\n\n  return {\n    ...parseRule,\n    getAttrs: node => {\n      const oldAttributes = parseRule.getAttrs\n        ? parseRule.getAttrs(node)\n        : parseRule.attrs\n\n      if (oldAttributes === false) {\n        return false\n      }\n\n      const newAttributes = extensionAttributes.reduce((items, item) => {\n        const value = item.attribute.parseHTML\n          ? item.attribute.parseHTML(node as HTMLElement)\n          : fromString((node as HTMLElement).getAttribute(item.name))\n\n        if (value === null || value === undefined) {\n          return items\n        }\n\n        return {\n          ...items,\n          [item.name]: value,\n        }\n      }, {})\n\n      return { ...oldAttributes, ...newAttributes }\n    },\n  }\n}\n","import { MarkSpec, NodeSpec, Schema } from 'prosemirror-model'\n\nimport { MarkConfig, NodeConfig } from '..'\nimport { AnyConfig, Extensions } from '../types'\nimport { callOrReturn } from '../utilities/callOrReturn'\nimport { isEmptyObject } from '../utilities/isEmptyObject'\nimport { getAttributesFromExtensions } from './getAttributesFromExtensions'\nimport { getExtensionField } from './getExtensionField'\nimport { getRenderedAttributes } from './getRenderedAttributes'\nimport { injectExtensionAttributesToParseRule } from './injectExtensionAttributesToParseRule'\nimport { splitExtensions } from './splitExtensions'\n\nfunction cleanUpSchemaItem<T>(data: T) {\n  return Object.fromEntries(Object.entries(data).filter(([key, value]) => {\n    if (key === 'attrs' && isEmptyObject(value)) {\n      return false\n    }\n\n    return value !== null && value !== undefined\n  })) as T\n}\n\nexport function getSchemaByResolvedExtensions(extensions: Extensions): Schema {\n  const allAttributes = getAttributesFromExtensions(extensions)\n  const { nodeExtensions, markExtensions } = splitExtensions(extensions)\n  const topNode = nodeExtensions.find(extension => getExtensionField(extension, 'topNode'))?.name\n\n  const nodes = Object.fromEntries(nodeExtensions.map(extension => {\n    const extensionAttributes = allAttributes.filter(attribute => attribute.type === extension.name)\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n    }\n\n    const extraNodeFields = extensions.reduce((fields, e) => {\n      const extendNodeSchema = getExtensionField<AnyConfig['extendNodeSchema']>(\n        e,\n        'extendNodeSchema',\n        context,\n      )\n\n      return {\n        ...fields,\n        ...(extendNodeSchema ? extendNodeSchema(extension) : {}),\n      }\n    }, {})\n\n    const schema: NodeSpec = cleanUpSchemaItem({\n      ...extraNodeFields,\n      content: callOrReturn(getExtensionField<NodeConfig['content']>(extension, 'content', context)),\n      marks: callOrReturn(getExtensionField<NodeConfig['marks']>(extension, 'marks', context)),\n      group: callOrReturn(getExtensionField<NodeConfig['group']>(extension, 'group', context)),\n      inline: callOrReturn(getExtensionField<NodeConfig['inline']>(extension, 'inline', context)),\n      atom: callOrReturn(getExtensionField<NodeConfig['atom']>(extension, 'atom', context)),\n      selectable: callOrReturn(getExtensionField<NodeConfig['selectable']>(extension, 'selectable', context)),\n      draggable: callOrReturn(getExtensionField<NodeConfig['draggable']>(extension, 'draggable', context)),\n      code: callOrReturn(getExtensionField<NodeConfig['code']>(extension, 'code', context)),\n      defining: callOrReturn(getExtensionField<NodeConfig['defining']>(extension, 'defining', context)),\n      isolating: callOrReturn(getExtensionField<NodeConfig['isolating']>(extension, 'isolating', context)),\n      attrs: Object.fromEntries(extensionAttributes.map(extensionAttribute => {\n        return [extensionAttribute.name, { default: extensionAttribute?.attribute?.default }]\n      })),\n    })\n\n    const parseHTML = callOrReturn(getExtensionField<NodeConfig['parseHTML']>(extension, 'parseHTML', context))\n\n    if (parseHTML) {\n      schema.parseDOM = parseHTML\n        .map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes))\n    }\n\n    const renderHTML = getExtensionField<NodeConfig['renderHTML']>(extension, 'renderHTML', context)\n\n    if (renderHTML) {\n      schema.toDOM = node => renderHTML({\n        node,\n        HTMLAttributes: getRenderedAttributes(node, extensionAttributes),\n      })\n    }\n\n    const renderText = getExtensionField<NodeConfig['renderText']>(extension, 'renderText', context)\n\n    if (renderText) {\n      schema.toText = renderText\n    }\n\n    return [extension.name, schema]\n  }))\n\n  const marks = Object.fromEntries(markExtensions.map(extension => {\n    const extensionAttributes = allAttributes.filter(attribute => attribute.type === extension.name)\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n    }\n\n    const extraMarkFields = extensions.reduce((fields, e) => {\n      const extendMarkSchema = getExtensionField<AnyConfig['extendMarkSchema']>(\n        e,\n        'extendMarkSchema',\n        context,\n      )\n\n      return {\n        ...fields,\n        ...(extendMarkSchema ? extendMarkSchema(extension) : {}),\n      }\n    }, {})\n\n    const schema: MarkSpec = cleanUpSchemaItem({\n      ...extraMarkFields,\n      inclusive: callOrReturn(getExtensionField<MarkConfig['inclusive']>(extension, 'inclusive', context)),\n      excludes: callOrReturn(getExtensionField<MarkConfig['excludes']>(extension, 'excludes', context)),\n      group: callOrReturn(getExtensionField<MarkConfig['group']>(extension, 'group', context)),\n      spanning: callOrReturn(getExtensionField<MarkConfig['spanning']>(extension, 'spanning', context)),\n      code: callOrReturn(getExtensionField<MarkConfig['code']>(extension, 'code', context)),\n      attrs: Object.fromEntries(extensionAttributes.map(extensionAttribute => {\n        return [extensionAttribute.name, { default: extensionAttribute?.attribute?.default }]\n      })),\n    })\n\n    const parseHTML = callOrReturn(getExtensionField<MarkConfig['parseHTML']>(extension, 'parseHTML', context))\n\n    if (parseHTML) {\n      schema.parseDOM = parseHTML\n        .map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes))\n    }\n\n    const renderHTML = getExtensionField<MarkConfig['renderHTML']>(extension, 'renderHTML', context)\n\n    if (renderHTML) {\n      schema.toDOM = mark => renderHTML({\n        mark,\n        HTMLAttributes: getRenderedAttributes(mark, extensionAttributes),\n      })\n    }\n\n    return [extension.name, schema]\n  }))\n\n  return new Schema({\n    topNode,\n    nodes,\n    marks,\n  })\n}\n","import { MarkType, NodeType, Schema } from 'prosemirror-model'\n\nexport function getSchemaTypeByName(name: string, schema: Schema): NodeType | MarkType | null {\n  return schema.nodes[name] || schema.marks[name] || null\n}\n","import { AnyExtension, EnableRules } from '../types'\n\nexport function isExtensionRulesEnabled(extension: AnyExtension, enabled: EnableRules): boolean {\n  if (Array.isArray(enabled)) {\n    return enabled.some(enabledExtension => {\n      const name = typeof enabledExtension === 'string'\n        ? enabledExtension\n        : enabledExtension.name\n\n      return name === extension.name\n    })\n  }\n\n  return enabled\n}\n","import { ResolvedPos } from 'prosemirror-model'\n\nexport const getTextContentFromNodes = ($from: ResolvedPos, maxMatch = 500) => {\n  let textBefore = ''\n\n  $from.parent.nodesBetween(\n    Math.max(0, $from.parentOffset - maxMatch),\n    $from.parentOffset,\n    (node, pos, parent, index) => {\n      textBefore += node.type.spec.toText?.({\n        node, pos, parent, index,\n      }) || $from.nodeBefore?.text || '%leaf%'\n    },\n  )\n\n  return textBefore\n}\n","export function isRegExp(value: any): value is RegExp {\n  return Object.prototype.toString.call(value) === '[object RegExp]'\n}\n","import { EditorState, Plugin, TextSelection } from 'prosemirror-state'\n\nimport { CommandManager } from './CommandManager'\nimport { Editor } from './Editor'\nimport { createChainableState } from './helpers/createChainableState'\nimport { getTextContentFromNodes } from './helpers/getTextContentFromNodes'\nimport {\n  CanCommands,\n  ChainedCommands,\n  ExtendedRegExpMatchArray,\n  Range,\n  SingleCommands,\n} from './types'\nimport { isRegExp } from './utilities/isRegExp'\n\nexport type InputRuleMatch = {\n  index: number,\n  text: string,\n  replaceWith?: string,\n  match?: RegExpMatchArray,\n  data?: Record<string, any>,\n}\n\nexport type InputRuleFinder =\n  | RegExp\n  | ((text: string) => InputRuleMatch | null)\n\nexport class InputRule {\n  find: InputRuleFinder\n\n  handler: (props: {\n    state: EditorState,\n    range: Range,\n    match: ExtendedRegExpMatchArray,\n    commands: SingleCommands,\n    chain: () => ChainedCommands,\n    can: () => CanCommands,\n  }) => void | null\n\n  constructor(config: {\n    find: InputRuleFinder,\n    handler: (props: {\n      state: EditorState,\n      range: Range,\n      match: ExtendedRegExpMatchArray,\n      commands: SingleCommands,\n      chain: () => ChainedCommands,\n      can: () => CanCommands,\n    }) => void | null,\n  }) {\n    this.find = config.find\n    this.handler = config.handler\n  }\n}\n\nconst inputRuleMatcherHandler = (text: string, find: InputRuleFinder): ExtendedRegExpMatchArray | null => {\n  if (isRegExp(find)) {\n    return find.exec(text)\n  }\n\n  const inputRuleMatch = find(text)\n\n  if (!inputRuleMatch) {\n    return null\n  }\n\n  const result: ExtendedRegExpMatchArray = []\n\n  result.push(inputRuleMatch.text)\n  result.index = inputRuleMatch.index\n  result.input = text\n  result.data = inputRuleMatch.data\n\n  if (inputRuleMatch.replaceWith) {\n    if (!inputRuleMatch.text.includes(inputRuleMatch.replaceWith)) {\n      console.warn('[tiptap warn]: \"inputRuleMatch.replaceWith\" must be part of \"inputRuleMatch.text\".')\n    }\n\n    result.push(inputRuleMatch.replaceWith)\n  }\n\n  return result\n}\n\nfunction run(config: {\n  editor: Editor,\n  from: number,\n  to: number,\n  text: string,\n  rules: InputRule[],\n  plugin: Plugin,\n}): boolean {\n  const {\n    editor,\n    from,\n    to,\n    text,\n    rules,\n    plugin,\n  } = config\n  const { view } = editor\n\n  if (view.composing) {\n    return false\n  }\n\n  const $from = view.state.doc.resolve(from)\n\n  if (\n    // check for code node\n    $from.parent.type.spec.code\n    // check for code mark\n    || !!($from.nodeBefore || $from.nodeAfter)?.marks.find(mark => mark.type.spec.code)\n  ) {\n    return false\n  }\n\n  let matched = false\n\n  const textBefore = getTextContentFromNodes($from) + text\n\n  rules.forEach(rule => {\n    if (matched) {\n      return\n    }\n\n    const match = inputRuleMatcherHandler(textBefore, rule.find)\n\n    if (!match) {\n      return\n    }\n\n    const tr = view.state.tr\n    const state = createChainableState({\n      state: view.state,\n      transaction: tr,\n    })\n    const range = {\n      from: from - (match[0].length - text.length),\n      to,\n    }\n\n    const { commands, chain, can } = new CommandManager({\n      editor,\n      state,\n    })\n\n    const handler = rule.handler({\n      state,\n      range,\n      match,\n      commands,\n      chain,\n      can,\n    })\n\n    // stop if there are no changes\n    if (handler === null || !tr.steps.length) {\n      return\n    }\n\n    // store transform as meta data\n    // so we can undo input rules within the `undoInputRules` command\n    tr.setMeta(plugin, {\n      transform: tr,\n      from,\n      to,\n      text,\n    })\n\n    view.dispatch(tr)\n    matched = true\n  })\n\n  return matched\n}\n\n/**\n * Create an input rules plugin. When enabled, it will cause text\n * input that matches any of the given rules to trigger the rule’s\n * action.\n */\nexport function inputRulesPlugin(props: { editor: Editor, rules: InputRule[] }): Plugin {\n  const { editor, rules } = props\n  const plugin = new Plugin({\n    state: {\n      init() {\n        return null\n      },\n      apply(tr, prev) {\n        const stored = tr.getMeta(plugin)\n\n        if (stored) {\n          return stored\n        }\n\n        return tr.selectionSet || tr.docChanged\n          ? null\n          : prev\n      },\n    },\n\n    props: {\n      handleTextInput(view, from, to, text) {\n        return run({\n          editor,\n          from,\n          to,\n          text,\n          rules,\n          plugin,\n        })\n      },\n\n      handleDOMEvents: {\n        compositionend: view => {\n          setTimeout(() => {\n            const { $cursor } = view.state.selection as TextSelection\n\n            if ($cursor) {\n              run({\n                editor,\n                from: $cursor.pos,\n                to: $cursor.pos,\n                text: '',\n                rules,\n                plugin,\n              })\n            }\n          })\n\n          return false\n        },\n      },\n\n      // add support for input rules to trigger on enter\n      // this is useful for example for code blocks\n      handleKeyDown(view, event) {\n        if (event.key !== 'Enter') {\n          return false\n        }\n\n        const { $cursor } = view.state.selection as TextSelection\n\n        if ($cursor) {\n          return run({\n            editor,\n            from: $cursor.pos,\n            to: $cursor.pos,\n            text: '\\n',\n            rules,\n            plugin,\n          })\n        }\n\n        return false\n      },\n    },\n\n    // @ts-ignore\n    isInputRules: true,\n  }) as Plugin\n\n  return plugin\n}\n","export function isNumber(value: any): value is number {\n  return typeof value === 'number'\n}\n","import { EditorState, Plugin } from 'prosemirror-state'\n\nimport { CommandManager } from './CommandManager'\nimport { Editor } from './Editor'\nimport { createChainableState } from './helpers/createChainableState'\nimport {\n  CanCommands,\n  ChainedCommands,\n  ExtendedRegExpMatchArray,\n  Range,\n  SingleCommands,\n} from './types'\nimport { isNumber } from './utilities/isNumber'\nimport { isRegExp } from './utilities/isRegExp'\n\nexport type PasteRuleMatch = {\n  index: number,\n  text: string,\n  replaceWith?: string,\n  match?: RegExpMatchArray,\n  data?: Record<string, any>,\n}\n\nexport type PasteRuleFinder =\n  | RegExp\n  | ((text: string) => PasteRuleMatch[] | null | undefined)\n\nexport class PasteRule {\n  find: PasteRuleFinder\n\n  handler: (props: {\n    state: EditorState,\n    range: Range,\n    match: ExtendedRegExpMatchArray,\n    commands: SingleCommands,\n    chain: () => ChainedCommands,\n    can: () => CanCommands,\n  }) => void | null\n\n  constructor(config: {\n    find: PasteRuleFinder,\n    handler: (props: {\n      state: EditorState,\n      range: Range,\n      match: ExtendedRegExpMatchArray,\n      commands: SingleCommands,\n      chain: () => ChainedCommands,\n      can: () => CanCommands,\n    }) => void | null,\n  }) {\n    this.find = config.find\n    this.handler = config.handler\n  }\n}\n\nconst pasteRuleMatcherHandler = (text: string, find: PasteRuleFinder): ExtendedRegExpMatchArray[] => {\n  if (isRegExp(find)) {\n    return [...text.matchAll(find)]\n  }\n\n  const matches = find(text)\n\n  if (!matches) {\n    return []\n  }\n\n  return matches.map(pasteRuleMatch => {\n    const result: ExtendedRegExpMatchArray = []\n\n    result.push(pasteRuleMatch.text)\n    result.index = pasteRuleMatch.index\n    result.input = text\n    result.data = pasteRuleMatch.data\n\n    if (pasteRuleMatch.replaceWith) {\n      if (!pasteRuleMatch.text.includes(pasteRuleMatch.replaceWith)) {\n        console.warn('[tiptap warn]: \"pasteRuleMatch.replaceWith\" must be part of \"pasteRuleMatch.text\".')\n      }\n\n      result.push(pasteRuleMatch.replaceWith)\n    }\n\n    return result\n  })\n}\n\nfunction run(config: {\n  editor: Editor,\n  state: EditorState,\n  from: number,\n  to: number,\n  rule: PasteRule,\n}): boolean {\n  const {\n    editor,\n    state,\n    from,\n    to,\n    rule,\n  } = config\n\n  const { commands, chain, can } = new CommandManager({\n    editor,\n    state,\n  })\n\n  const handlers: (void | null)[] = []\n\n  state.doc.nodesBetween(from, to, (node, pos) => {\n    if (!node.isTextblock || node.type.spec.code) {\n      return\n    }\n\n    const resolvedFrom = Math.max(from, pos)\n    const resolvedTo = Math.min(to, pos + node.content.size)\n    const textToMatch = node.textBetween(\n      resolvedFrom - pos,\n      resolvedTo - pos,\n      undefined,\n      '\\ufffc',\n    )\n\n    const matches = pasteRuleMatcherHandler(textToMatch, rule.find)\n\n    matches.forEach(match => {\n      if (match.index === undefined) {\n        return\n      }\n\n      const start = resolvedFrom + match.index + 1\n      const end = start + match[0].length\n      const range = {\n        from: state.tr.mapping.map(start),\n        to: state.tr.mapping.map(end),\n      }\n\n      const handler = rule.handler({\n        state,\n        range,\n        match,\n        commands,\n        chain,\n        can,\n      })\n\n      handlers.push(handler)\n    })\n  })\n\n  const success = handlers.every(handler => handler !== null)\n\n  return success\n}\n\n/**\n * Create an paste rules plugin. When enabled, it will cause pasted\n * text that matches any of the given rules to trigger the rule’s\n * action.\n */\nexport function pasteRulesPlugin(props: { editor: Editor, rules: PasteRule[] }): Plugin[] {\n  const { editor, rules } = props\n  let dragSourceElement: Element | null = null\n  let isPastedFromProseMirror = false\n  let isDroppedFromProseMirror = false\n\n  const plugins = rules.map(rule => {\n    return new Plugin({\n      // we register a global drag handler to track the current drag source element\n      view(view) {\n        const handleDragstart = (event: DragEvent) => {\n          dragSourceElement = view.dom.parentElement?.contains(event.target as Element)\n            ? view.dom.parentElement\n            : null\n        }\n\n        window.addEventListener('dragstart', handleDragstart)\n\n        return {\n          destroy() {\n            window.removeEventListener('dragstart', handleDragstart)\n          },\n        }\n      },\n\n      props: {\n        handleDOMEvents: {\n          drop: view => {\n            isDroppedFromProseMirror = dragSourceElement === view.dom.parentElement\n\n            return false\n          },\n\n          paste: (view, event: Event) => {\n            const html = (event as ClipboardEvent).clipboardData?.getData('text/html')\n\n            isPastedFromProseMirror = !!html?.includes('data-pm-slice')\n\n            return false\n          },\n        },\n      },\n\n      appendTransaction: (transactions, oldState, state) => {\n        const transaction = transactions[0]\n        const isPaste = transaction.getMeta('uiEvent') === 'paste' && !isPastedFromProseMirror\n        const isDrop = transaction.getMeta('uiEvent') === 'drop' && !isDroppedFromProseMirror\n\n        if (!isPaste && !isDrop) {\n          return\n        }\n\n        // stop if there is no changed range\n        const from = oldState.doc.content.findDiffStart(state.doc.content)\n        const to = oldState.doc.content.findDiffEnd(state.doc.content)\n\n        if (!isNumber(from) || !to || from === to.b) {\n          return\n        }\n\n        // build a chainable state\n        // so we can use a single transaction for all paste rules\n        const tr = state.tr\n        const chainableState = createChainableState({\n          state,\n          transaction: tr,\n        })\n\n        const handler = run({\n          editor,\n          state: chainableState,\n          from: Math.max(from - 1, 0),\n          to: to.b - 1,\n          rule,\n        })\n\n        // stop if there are no changes\n        if (!handler || !tr.steps.length) {\n          return\n        }\n\n        return tr\n      },\n    })\n  })\n\n  return plugins\n}\n","export function findDuplicates(items: any[]): any[] {\n  const filtered = items.filter((el, index) => items.indexOf(el) !== index)\n\n  return [...new Set(filtered)]\n}\n","import { keymap } from 'prosemirror-keymap'\nimport { Node as ProsemirrorNode, Schema } from 'prosemirror-model'\nimport { Plugin } from 'prosemirror-state'\nimport { Decoration, EditorView } from 'prosemirror-view'\n\nimport { Mark, NodeConfig } from '.'\nimport { Editor } from './Editor'\nimport { getAttributesFromExtensions } from './helpers/getAttributesFromExtensions'\nimport { getExtensionField } from './helpers/getExtensionField'\nimport { getNodeType } from './helpers/getNodeType'\nimport { getRenderedAttributes } from './helpers/getRenderedAttributes'\nimport { getSchemaByResolvedExtensions } from './helpers/getSchemaByResolvedExtensions'\nimport { getSchemaTypeByName } from './helpers/getSchemaTypeByName'\nimport { isExtensionRulesEnabled } from './helpers/isExtensionRulesEnabled'\nimport { splitExtensions } from './helpers/splitExtensions'\nimport { inputRulesPlugin } from './InputRule'\nimport { pasteRulesPlugin } from './PasteRule'\nimport { AnyConfig, Extensions, RawCommands } from './types'\nimport { callOrReturn } from './utilities/callOrReturn'\nimport { findDuplicates } from './utilities/findDuplicates'\n\nexport class ExtensionManager {\n\n  editor: Editor\n\n  schema: Schema\n\n  extensions: Extensions\n\n  splittableMarks: string[] = []\n\n  constructor(extensions: Extensions, editor: Editor) {\n    this.editor = editor\n    this.extensions = ExtensionManager.resolve(extensions)\n    this.schema = getSchemaByResolvedExtensions(this.extensions)\n\n    this.extensions.forEach(extension => {\n      // store extension storage in editor\n      this.editor.extensionStorage[extension.name] = extension.storage\n\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n        editor: this.editor,\n        type: getSchemaTypeByName(extension.name, this.schema),\n      }\n\n      if (extension.type === 'mark') {\n        const keepOnSplit = callOrReturn(getExtensionField(extension, 'keepOnSplit', context)) ?? true\n\n        if (keepOnSplit) {\n          this.splittableMarks.push(extension.name)\n        }\n      }\n\n      const onBeforeCreate = getExtensionField<AnyConfig['onBeforeCreate']>(\n        extension,\n        'onBeforeCreate',\n        context,\n      )\n\n      if (onBeforeCreate) {\n        this.editor.on('beforeCreate', onBeforeCreate)\n      }\n\n      const onCreate = getExtensionField<AnyConfig['onCreate']>(\n        extension,\n        'onCreate',\n        context,\n      )\n\n      if (onCreate) {\n        this.editor.on('create', onCreate)\n      }\n\n      const onUpdate = getExtensionField<AnyConfig['onUpdate']>(\n        extension,\n        'onUpdate',\n        context,\n      )\n\n      if (onUpdate) {\n        this.editor.on('update', onUpdate)\n      }\n\n      const onSelectionUpdate = getExtensionField<AnyConfig['onSelectionUpdate']>(\n        extension,\n        'onSelectionUpdate',\n        context,\n      )\n\n      if (onSelectionUpdate) {\n        this.editor.on('selectionUpdate', onSelectionUpdate)\n      }\n\n      const onTransaction = getExtensionField<AnyConfig['onTransaction']>(\n        extension,\n        'onTransaction',\n        context,\n      )\n\n      if (onTransaction) {\n        this.editor.on('transaction', onTransaction)\n      }\n\n      const onFocus = getExtensionField<AnyConfig['onFocus']>(\n        extension,\n        'onFocus',\n        context,\n      )\n\n      if (onFocus) {\n        this.editor.on('focus', onFocus)\n      }\n\n      const onBlur = getExtensionField<AnyConfig['onBlur']>(\n        extension,\n        'onBlur',\n        context,\n      )\n\n      if (onBlur) {\n        this.editor.on('blur', onBlur)\n      }\n\n      const onDestroy = getExtensionField<AnyConfig['onDestroy']>(\n        extension,\n        'onDestroy',\n        context,\n      )\n\n      if (onDestroy) {\n        this.editor.on('destroy', onDestroy)\n      }\n    })\n  }\n\n  static resolve(extensions: Extensions): Extensions {\n    const resolvedExtensions = ExtensionManager.sort(ExtensionManager.flatten(extensions))\n    const duplicatedNames = findDuplicates(resolvedExtensions.map(extension => extension.name))\n\n    if (duplicatedNames.length) {\n      console.warn(`[tiptap warn]: Duplicate extension names found: [${duplicatedNames.map(item => `'${item}'`).join(', ')}]. This can lead to issues.`)\n    }\n\n    return resolvedExtensions\n  }\n\n  static flatten(extensions: Extensions): Extensions {\n    return extensions\n      .map(extension => {\n        const context = {\n          name: extension.name,\n          options: extension.options,\n          storage: extension.storage,\n        }\n\n        const addExtensions = getExtensionField<AnyConfig['addExtensions']>(\n          extension,\n          'addExtensions',\n          context,\n        )\n\n        if (addExtensions) {\n          return [\n            extension,\n            ...this.flatten(addExtensions()),\n          ]\n        }\n\n        return extension\n      })\n      // `Infinity` will break TypeScript so we set a number that is probably high enough\n      .flat(10)\n  }\n\n  static sort(extensions: Extensions): Extensions {\n    const defaultPriority = 100\n\n    return extensions.sort((a, b) => {\n      const priorityA = getExtensionField<AnyConfig['priority']>(a, 'priority') || defaultPriority\n      const priorityB = getExtensionField<AnyConfig['priority']>(b, 'priority') || defaultPriority\n\n      if (priorityA > priorityB) {\n        return -1\n      }\n\n      if (priorityA < priorityB) {\n        return 1\n      }\n\n      return 0\n    })\n  }\n\n  get commands(): RawCommands {\n    return this.extensions.reduce((commands, extension) => {\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n        editor: this.editor,\n        type: getSchemaTypeByName(extension.name, this.schema),\n      }\n\n      const addCommands = getExtensionField<AnyConfig['addCommands']>(\n        extension,\n        'addCommands',\n        context,\n      )\n\n      if (!addCommands) {\n        return commands\n      }\n\n      return {\n        ...commands,\n        ...addCommands(),\n      }\n    }, {} as RawCommands)\n  }\n\n  get plugins(): Plugin[] {\n    const { editor } = this\n\n    // With ProseMirror, first plugins within an array are executed first.\n    // In tiptap, we provide the ability to override plugins,\n    // so it feels more natural to run plugins at the end of an array first.\n    // That’s why we have to reverse the `extensions` array and sort again\n    // based on the `priority` option.\n    const extensions = ExtensionManager.sort([...this.extensions].reverse())\n\n    const inputRules: any[] = []\n    const pasteRules: any[] = []\n\n    const allPlugins = extensions\n      .map(extension => {\n        const context = {\n          name: extension.name,\n          options: extension.options,\n          storage: extension.storage,\n          editor,\n          type: getSchemaTypeByName(extension.name, this.schema),\n        }\n\n        const plugins: Plugin[] = []\n\n        const addKeyboardShortcuts = getExtensionField<AnyConfig['addKeyboardShortcuts']>(\n          extension,\n          'addKeyboardShortcuts',\n          context,\n        )\n\n        let defaultBindings: Record<string, () => boolean> = {}\n\n        // bind exit handling\n        if (extension.type === 'mark' && extension.config.exitable) {\n          defaultBindings.ArrowRight = () => Mark.handleExit({ editor, mark: (extension as Mark) })\n        }\n\n        if (addKeyboardShortcuts) {\n          const bindings = Object.fromEntries(\n            Object\n              .entries(addKeyboardShortcuts())\n              .map(([shortcut, method]) => {\n                return [shortcut, () => method({ editor })]\n              }),\n          )\n\n          defaultBindings = { ...defaultBindings, ...bindings }\n        }\n\n        const keyMapPlugin = keymap(defaultBindings)\n\n        plugins.push(keyMapPlugin)\n\n        const addInputRules = getExtensionField<AnyConfig['addInputRules']>(\n          extension,\n          'addInputRules',\n          context,\n        )\n\n        if (isExtensionRulesEnabled(extension, editor.options.enableInputRules) && addInputRules) {\n          inputRules.push(...addInputRules())\n        }\n\n        const addPasteRules = getExtensionField<AnyConfig['addPasteRules']>(\n          extension,\n          'addPasteRules',\n          context,\n        )\n\n        if (isExtensionRulesEnabled(extension, editor.options.enablePasteRules) && addPasteRules) {\n          pasteRules.push(...addPasteRules())\n        }\n\n        const addProseMirrorPlugins = getExtensionField<AnyConfig['addProseMirrorPlugins']>(\n          extension,\n          'addProseMirrorPlugins',\n          context,\n        )\n\n        if (addProseMirrorPlugins) {\n          const proseMirrorPlugins = addProseMirrorPlugins()\n\n          plugins.push(...proseMirrorPlugins)\n        }\n\n        return plugins\n      })\n      .flat()\n\n    return [\n      inputRulesPlugin({\n        editor,\n        rules: inputRules,\n      }),\n      ...pasteRulesPlugin({\n        editor,\n        rules: pasteRules,\n      }),\n      ...allPlugins,\n    ]\n  }\n\n  get attributes() {\n    return getAttributesFromExtensions(this.extensions)\n  }\n\n  get nodeViews() {\n    const { editor } = this\n    const { nodeExtensions } = splitExtensions(this.extensions)\n\n    return Object.fromEntries(nodeExtensions\n      .filter(extension => !!getExtensionField(extension, 'addNodeView'))\n      .map(extension => {\n        const extensionAttributes = this.attributes.filter(attribute => attribute.type === extension.name)\n        const context = {\n          name: extension.name,\n          options: extension.options,\n          storage: extension.storage,\n          editor,\n          type: getNodeType(extension.name, this.schema),\n        }\n        const addNodeView = getExtensionField<NodeConfig['addNodeView']>(\n          extension,\n          'addNodeView',\n          context,\n        )\n\n        if (!addNodeView) {\n          return []\n        }\n\n        const nodeview = (\n          node: ProsemirrorNode,\n          view: EditorView,\n          getPos: (() => number) | boolean,\n          decorations: Decoration[],\n        ) => {\n          const HTMLAttributes = getRenderedAttributes(node, extensionAttributes)\n\n          return addNodeView()({\n            editor,\n            node,\n            getPos,\n            decorations,\n            HTMLAttributes,\n            extension,\n          })\n        }\n\n        return [extension.name, nodeview]\n      }))\n  }\n}\n","// see: https://github.com/mesqueeb/is-what/blob/88d6e4ca92fb2baab6003c54e02eedf4e729e5ab/src/index.ts\n\nfunction getType(value: any): string {\n  return Object.prototype.toString.call(value).slice(8, -1)\n}\n\nexport function isPlainObject(value: any): value is Record<string, any> {\n  if (getType(value) !== 'Object') {\n    return false\n  }\n\n  return value.constructor === Object && Object.getPrototypeOf(value) === Object.prototype\n}\n","import { isPlainObject } from './isPlainObject'\n\nexport function mergeDeep(target: Record<string, any>, source: Record<string, any>): Record<string, any> {\n  const output = { ...target }\n\n  if (isPlainObject(target) && isPlainObject(source)) {\n    Object.keys(source).forEach(key => {\n      if (isPlainObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, { [key]: source[key] })\n        } else {\n          output[key] = mergeDeep(target[key], source[key])\n        }\n      } else {\n        Object.assign(output, { [key]: source[key] })\n      }\n    })\n  }\n\n  return output\n}\n","import { Plugin, Transaction } from 'prosemirror-state'\n\nimport { ExtensionConfig } from '.'\nimport { Editor } from './Editor'\nimport { getExtensionField } from './helpers/getExtensionField'\nimport { InputRule } from './InputRule'\nimport { Mark } from './Mark'\nimport { Node } from './Node'\nimport { PasteRule } from './PasteRule'\nimport {\n  AnyConfig,\n  Extensions,\n  GlobalAttributes,\n  KeyboardShortcutCommand,\n  ParentConfig,\n  RawCommands,\n} from './types'\nimport { callOrReturn } from './utilities/callOrReturn'\nimport { mergeDeep } from './utilities/mergeDeep'\n\ndeclare module '@tiptap/core' {\n  interface ExtensionConfig<Options = any, Storage = any> {\n    [key: string]: any;\n\n    /**\n     * Name\n     */\n    name: string,\n\n    /**\n     * Priority\n     */\n    priority?: number,\n\n    /**\n     * Default options\n     */\n    defaultOptions?: Options,\n\n    /**\n     * Default Options\n     */\n    addOptions?: (this: {\n      name: string,\n      parent: Exclude<ParentConfig<ExtensionConfig<Options, Storage>>['addOptions'], undefined>,\n    }) => Options,\n\n    /**\n     * Default Storage\n     */\n    addStorage?: (this: {\n      name: string,\n      options: Options,\n      parent: Exclude<ParentConfig<ExtensionConfig<Options, Storage>>['addStorage'], undefined>,\n    }) => Storage,\n\n    /**\n     * Global attributes\n     */\n    addGlobalAttributes?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addGlobalAttributes'],\n    }) => GlobalAttributes | {},\n\n    /**\n     * Raw\n     */\n    addCommands?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addCommands'],\n    }) => Partial<RawCommands>,\n\n    /**\n     * Keyboard shortcuts\n     */\n    addKeyboardShortcuts?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addKeyboardShortcuts'],\n    }) => {\n      [key: string]: KeyboardShortcutCommand,\n    },\n\n    /**\n     * Input rules\n     */\n    addInputRules?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addInputRules'],\n    }) => InputRule[],\n\n    /**\n     * Paste rules\n     */\n    addPasteRules?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addPasteRules'],\n    }) => PasteRule[],\n\n    /**\n     * ProseMirror plugins\n     */\n    addProseMirrorPlugins?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addProseMirrorPlugins'],\n    }) => Plugin[],\n\n    /**\n     * Extensions\n     */\n    addExtensions?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addExtensions'],\n    }) => Extensions,\n\n    /**\n     * Extend Node Schema\n     */\n    extendNodeSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<ExtensionConfig<Options, Storage>>['extendNodeSchema'],\n      },\n      extension: Node,\n    ) => Record<string, any>) | null,\n\n    /**\n     * Extend Mark Schema\n     */\n    extendMarkSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<ExtensionConfig<Options, Storage>>['extendMarkSchema'],\n      },\n      extension: Mark,\n    ) => Record<string, any>) | null,\n\n    /**\n     * The editor is not ready yet.\n     */\n    onBeforeCreate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['onBeforeCreate'],\n    }) => void) | null,\n\n    /**\n     * The editor is ready.\n     */\n    onCreate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['onCreate'],\n    }) => void) | null,\n\n    /**\n     * The content has changed.\n     */\n    onUpdate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['onUpdate'],\n    }) => void) | null,\n\n    /**\n     * The selection has changed.\n     */\n    onSelectionUpdate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['onSelectionUpdate'],\n    }) => void) | null,\n\n    /**\n     * The editor state has changed.\n     */\n    onTransaction?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        parent: ParentConfig<ExtensionConfig<Options, Storage>>['onTransaction'],\n      },\n      props: {\n        transaction: Transaction,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is focused.\n     */\n    onFocus?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        parent: ParentConfig<ExtensionConfig<Options, Storage>>['onFocus'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor isn’t focused anymore.\n     */\n    onBlur?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        parent: ParentConfig<ExtensionConfig<Options, Storage>>['onBlur'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is destroyed.\n     */\n    onDestroy?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['onDestroy'],\n    }) => void) | null,\n  }\n}\n\nexport class Extension<Options = any, Storage = any> {\n  type = 'extension'\n\n  name = 'extension'\n\n  parent: Extension | null = null\n\n  child: Extension | null = null\n\n  options: Options\n\n  storage: Storage\n\n  config: ExtensionConfig = {\n    name: this.name,\n    defaultOptions: {},\n  }\n\n  constructor(config: Partial<ExtensionConfig<Options, Storage>> = {}) {\n    this.config = {\n      ...this.config,\n      ...config,\n    }\n\n    this.name = this.config.name\n\n    if (config.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`)\n    }\n\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions\n\n    if (this.config.addOptions) {\n      this.options = callOrReturn(getExtensionField<AnyConfig['addOptions']>(\n        this,\n        'addOptions',\n        {\n          name: this.name,\n        },\n      ))\n    }\n\n    this.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      this,\n      'addStorage',\n      {\n        name: this.name,\n        options: this.options,\n      },\n    )) || {}\n  }\n\n  static create<O = any, S = any>(config: Partial<ExtensionConfig<O, S>> = {}) {\n    return new Extension<O, S>(config)\n  }\n\n  configure(options: Partial<Options> = {}) {\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend()\n\n    extension.options = mergeDeep(this.options, options) as Options\n\n    extension.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      extension,\n      'addStorage',\n      {\n        name: extension.name,\n        options: extension.options,\n      },\n    ))\n\n    return extension\n  }\n\n  extend<ExtendedOptions = Options, ExtendedStorage = Storage>(extendedConfig: Partial<ExtensionConfig<ExtendedOptions, ExtendedStorage>> = {}) {\n    const extension = new Extension<ExtendedOptions, ExtendedStorage>(extendedConfig)\n\n    extension.parent = this\n\n    this.child = extension\n\n    extension.name = extendedConfig.name\n      ? extendedConfig.name\n      : extension.parent.name\n\n    if (extendedConfig.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`)\n    }\n\n    extension.options = callOrReturn(getExtensionField<AnyConfig['addOptions']>(\n      extension,\n      'addOptions',\n      {\n        name: extension.name,\n      },\n    ))\n\n    extension.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      extension,\n      'addStorage',\n      {\n        name: extension.name,\n        options: extension.options,\n      },\n    ))\n\n    return extension\n  }\n}\n","import { Node as ProseMirrorNode } from 'prosemirror-model'\n\nimport { Range, TextSerializer } from '../types'\n\nexport function getTextBetween(\n  startNode: ProseMirrorNode,\n  range: Range,\n  options?: {\n    blockSeparator?: string,\n    textSerializers?: Record<string, TextSerializer>,\n  },\n): string {\n  const { from, to } = range\n  const {\n    blockSeparator = '\\n\\n',\n    textSerializers = {},\n  } = options || {}\n  let text = ''\n  let separated = true\n\n  startNode.nodesBetween(from, to, (node, pos, parent, index) => {\n    const textSerializer = textSerializers?.[node.type.name]\n\n    if (textSerializer) {\n      if (node.isBlock && !separated) {\n        text += blockSeparator\n        separated = true\n      }\n\n      if (parent) {\n        text += textSerializer({\n          node,\n          pos,\n          parent,\n          index,\n          range,\n        })\n      }\n    } else if (node.isText) {\n      text += node?.text?.slice(Math.max(from, pos) - pos, to - pos) // eslint-disable-line\n      separated = false\n    } else if (node.isBlock && !separated) {\n      text += blockSeparator\n      separated = true\n    }\n  })\n\n  return text\n}\n","import { Schema } from 'prosemirror-model'\n\nimport { TextSerializer } from '../types'\n\nexport function getTextSerializersFromSchema(schema: Schema): Record<string, TextSerializer> {\n  return Object.fromEntries(Object\n    .entries(schema.nodes)\n    .filter(([, node]) => node.spec.toText)\n    .map(([name, node]) => [name, node.spec.toText]))\n}\n","import { Plugin, PluginKey } from 'prosemirror-state'\n\nimport { Extension } from '../Extension'\nimport { getTextBetween } from '../helpers/getTextBetween'\nimport { getTextSerializersFromSchema } from '../helpers/getTextSerializersFromSchema'\n\nexport const ClipboardTextSerializer = Extension.create({\n  name: 'clipboardTextSerializer',\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: new PluginKey('clipboardTextSerializer'),\n        props: {\n          clipboardTextSerializer: () => {\n            const { editor } = this\n            const { state, schema } = editor\n            const { doc, selection } = state\n            const { ranges } = selection\n            const from = Math.min(...ranges.map(range => range.$from.pos))\n            const to = Math.max(...ranges.map(range => range.$to.pos))\n            const textSerializers = getTextSerializersFromSchema(schema)\n            const range = { from, to }\n\n            return getTextBetween(doc, range, {\n              textSerializers,\n            })\n          },\n        },\n      }),\n    ]\n  },\n})\n","import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    blur: {\n      /**\n       * Removes focus from the editor.\n       */\n      blur: () => ReturnType,\n    }\n  }\n}\n\nexport const blur: RawCommands['blur'] = () => ({ editor, view }) => {\n  requestAnimationFrame(() => {\n    if (!editor.isDestroyed) {\n      (view.dom as HTMLElement).blur()\n\n      // Browsers should remove the caret on blur but safari does not.\n      // See: https://github.com/ueberdosis/tiptap/issues/2405\n      window?.getSelection()?.removeAllRanges()\n    }\n  })\n\n  return true\n}\n","import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    clearContent: {\n      /**\n       * Clear the whole document.\n       */\n      clearContent: (emitUpdate?: boolean) => ReturnType,\n    }\n  }\n}\n\nexport const clearContent: RawCommands['clearContent'] = (emitUpdate = false) => ({ commands }) => {\n  return commands.setContent('', emitUpdate)\n}\n","import { liftTarget } from 'prosemirror-transform'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    clearNodes: {\n      /**\n       * Normalize nodes to a simple paragraph.\n       */\n      clearNodes: () => ReturnType,\n    }\n  }\n}\n\nexport const clearNodes: RawCommands['clearNodes'] = () => ({ state, tr, dispatch }) => {\n  const { selection } = tr\n  const { ranges } = selection\n\n  if (!dispatch) {\n    return true\n  }\n\n  ranges.forEach(({ $from, $to }) => {\n    state.doc.nodesBetween($from.pos, $to.pos, (node, pos) => {\n      if (node.type.isText) {\n        return\n      }\n\n      const { doc, mapping } = tr\n      const $mappedFrom = doc.resolve(mapping.map(pos))\n      const $mappedTo = doc.resolve(mapping.map(pos + node.nodeSize))\n      const nodeRange = $mappedFrom.blockRange($mappedTo)\n\n      if (!nodeRange) {\n        return\n      }\n\n      const targetLiftDepth = liftTarget(nodeRange)\n\n      if (node.type.isTextblock) {\n        const { defaultType } = $mappedFrom.parent.contentMatchAt($mappedFrom.index())\n\n        tr.setNodeMarkup(nodeRange.start, defaultType)\n      }\n\n      if (targetLiftDepth || targetLiftDepth === 0) {\n        tr.lift(nodeRange, targetLiftDepth)\n      }\n    })\n  })\n\n  return true\n}\n","import { Command, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    command: {\n      /**\n       * Define a command inline.\n       */\n      command: (fn: (props: Parameters<Command>[0]) => boolean) => ReturnType,\n    }\n  }\n}\n\nexport const command: RawCommands['command'] = fn => props => {\n  return fn(props)\n}\n","import { createParagraphNear as originalCreateParagraphNear } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    createParagraphNear: {\n      /**\n       * Create a paragraph nearby.\n       */\n      createParagraphNear: () => ReturnType,\n    }\n  }\n}\n\nexport const createParagraphNear: RawCommands['createParagraphNear'] = () => ({ state, dispatch }) => {\n  return originalCreateParagraphNear(state, dispatch)\n}\n","import { NodeType } from 'prosemirror-model'\n\nimport { getNodeType } from '../helpers/getNodeType'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    deleteNode: {\n      /**\n       * Delete a node.\n       */\n      deleteNode: (typeOrName: string | NodeType) => ReturnType,\n    }\n  }\n}\n\nexport const deleteNode: RawCommands['deleteNode'] = typeOrName => ({ tr, state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const $pos = tr.selection.$anchor\n\n  for (let depth = $pos.depth; depth > 0; depth -= 1) {\n    const node = $pos.node(depth)\n\n    if (node.type === type) {\n      if (dispatch) {\n        const from = $pos.before(depth)\n        const to = $pos.after(depth)\n\n        tr.delete(from, to).scrollIntoView()\n      }\n\n      return true\n    }\n  }\n\n  return false\n}\n","import { Range, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    deleteRange: {\n      /**\n       * Delete a given range.\n       */\n      deleteRange: (range: Range) => ReturnType,\n    }\n  }\n}\n\nexport const deleteRange: RawCommands['deleteRange'] = range => ({ tr, dispatch }) => {\n  const { from, to } = range\n\n  if (dispatch) {\n    tr.delete(from, to)\n  }\n\n  return true\n}\n","import { deleteSelection as originalDeleteSelection } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    deleteSelection: {\n      /**\n       * Delete the selection, if there is one.\n       */\n      deleteSelection: () => ReturnType,\n    }\n  }\n}\n\nexport const deleteSelection: RawCommands['deleteSelection'] = () => ({ state, dispatch }) => {\n  return originalDeleteSelection(state, dispatch)\n}\n","import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    enter: {\n      /**\n       * Trigger enter.\n       */\n      enter: () => ReturnType,\n    }\n  }\n}\n\nexport const enter: RawCommands['enter'] = () => ({ commands }) => {\n  return commands.keyboardShortcut('Enter')\n}\n","import { exitCode as originalExitCode } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    exitCode: {\n      /**\n       * Exit from a code block.\n       */\n      exitCode: () => ReturnType,\n    }\n  }\n}\n\nexport const exitCode: RawCommands['exitCode'] = () => ({ state, dispatch }) => {\n  return originalExitCode(state, dispatch)\n}\n","import { isRegExp } from './isRegExp'\n\n/**\n * Check if object1 includes object2\n * @param object1 Object\n * @param object2 Object\n */\nexport function objectIncludes(\n  object1: Record<string, any>,\n  object2: Record<string, any>,\n  options: { strict: boolean } = { strict: true },\n): boolean {\n  const keys = Object.keys(object2)\n\n  if (!keys.length) {\n    return true\n  }\n\n  return keys.every(key => {\n    if (options.strict) {\n      return object2[key] === object1[key]\n    }\n\n    if (isRegExp(object2[key])) {\n      return object2[key].test(object1[key])\n    }\n\n    return object2[key] === object1[key]\n  })\n}\n","import { Mark as ProseMirrorMark, MarkType, ResolvedPos } from 'prosemirror-model'\n\nimport { Range } from '../types'\nimport { objectIncludes } from '../utilities/objectIncludes'\n\nfunction findMarkInSet(\n  marks: ProseMirrorMark[],\n  type: MarkType,\n  attributes: Record<string, any> = {},\n): ProseMirrorMark | undefined {\n  return marks.find(item => {\n    return item.type === type && objectIncludes(item.attrs, attributes)\n  })\n}\n\nfunction isMarkInSet(\n  marks: ProseMirrorMark[],\n  type: MarkType,\n  attributes: Record<string, any> = {},\n): boolean {\n  return !!findMarkInSet(marks, type, attributes)\n}\n\nexport function getMarkRange(\n  $pos: ResolvedPos,\n  type: MarkType,\n  attributes: Record<string, any> = {},\n): Range | void {\n  if (!$pos || !type) {\n    return\n  }\n\n  let start = $pos.parent.childAfter($pos.parentOffset)\n\n  if ($pos.parentOffset === start.offset && start.offset !== 0) {\n    start = $pos.parent.childBefore($pos.parentOffset)\n  }\n\n  if (!start.node) {\n    return\n  }\n\n  const mark = findMarkInSet([...start.node.marks], type, attributes)\n\n  if (!mark) {\n    return\n  }\n\n  let startIndex = start.index\n  let startPos = $pos.start() + start.offset\n  let endIndex = startIndex + 1\n  let endPos = startPos + start.node.nodeSize\n\n  findMarkInSet([...start.node.marks], type, attributes)\n\n  while (startIndex > 0 && mark.isInSet($pos.parent.child(startIndex - 1).marks)) {\n    startIndex -= 1\n    startPos -= $pos.parent.child(startIndex).nodeSize\n  }\n\n  while (\n    endIndex < $pos.parent.childCount\n    && isMarkInSet([...$pos.parent.child(endIndex).marks], type, attributes)\n  ) {\n    endPos += $pos.parent.child(endIndex).nodeSize\n    endIndex += 1\n  }\n\n  return {\n    from: startPos,\n    to: endPos,\n  }\n}\n","import { MarkType, Schema } from 'prosemirror-model'\n\nexport function getMarkType(nameOrType: string | MarkType, schema: Schema): MarkType {\n  if (typeof nameOrType === 'string') {\n    if (!schema.marks[nameOrType]) {\n      throw Error(`There is no mark type named '${nameOrType}'. Maybe you forgot to add the extension?`)\n    }\n\n    return schema.marks[nameOrType]\n  }\n\n  return nameOrType\n}\n","import { MarkType } from 'prosemirror-model'\nimport { TextSelection } from 'prosemirror-state'\n\nimport { getMarkRange } from '../helpers/getMarkRange'\nimport { getMarkType } from '../helpers/getMarkType'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    extendMarkRange: {\n      /**\n       * Extends the text selection to the current mark.\n       */\n      extendMarkRange: (typeOrName: string | MarkType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const extendMarkRange: RawCommands['extendMarkRange'] = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\n  const type = getMarkType(typeOrName, state.schema)\n  const { doc, selection } = tr\n  const { $from, from, to } = selection\n\n  if (dispatch) {\n    const range = getMarkRange($from, type, attributes)\n\n    if (range && range.from <= from && range.to >= to) {\n      const newSelection = TextSelection.create(doc, range.from, range.to)\n\n      tr.setSelection(newSelection)\n    }\n  }\n\n  return true\n}\n","import { Command, CommandProps, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    first: {\n      /**\n       * Runs one command after the other and stops at the first which returns true.\n       */\n      first: (commands: Command[] | ((props: CommandProps) => Command[])) => ReturnType,\n    }\n  }\n}\n\nexport const first: RawCommands['first'] = commands => props => {\n  const items = typeof commands === 'function'\n    ? commands(props)\n    : commands\n\n  for (let i = 0; i < items.length; i += 1) {\n    if (items[i](props)) {\n      return true\n    }\n  }\n\n  return false\n}\n","import { TextSelection } from 'prosemirror-state'\n\nexport function isTextSelection(value: unknown): value is TextSelection {\n  return value instanceof TextSelection\n}\n","export function minMax(value = 0, min = 0, max = 0): number {\n  return Math.min(Math.max(value, min), max)\n}\n","import { Node as ProseMirrorNode } from 'prosemirror-model'\nimport { Selection, TextSelection } from 'prosemirror-state'\n\nimport { FocusPosition } from '../types'\nimport { minMax } from '../utilities/minMax'\n\nexport function resolveFocusPosition(\n  doc: ProseMirrorNode,\n  position: FocusPosition = null,\n): Selection | null {\n\n  if (!position) {\n    return null\n  }\n\n  const selectionAtStart = Selection.atStart(doc)\n  const selectionAtEnd = Selection.atEnd(doc)\n\n  if (position === 'start' || position === true) {\n    return selectionAtStart\n  }\n\n  if (position === 'end') {\n    return selectionAtEnd\n  }\n\n  const minPos = selectionAtStart.from\n  const maxPos = selectionAtEnd.to\n\n  if (position === 'all') {\n    return TextSelection.create(\n      doc,\n      minMax(0, minPos, maxPos),\n      minMax(doc.content.size, minPos, maxPos),\n    )\n  }\n\n  return TextSelection.create(\n    doc,\n    minMax(position, minPos, maxPos),\n    minMax(position, minPos, maxPos),\n  )\n}\n","export function isiOS(): boolean {\n  return [\n    'iPad Simulator',\n    'iPhone Simulator',\n    'iPod Simulator',\n    'iPad',\n    'iPhone',\n    'iPod',\n  ].includes(navigator.platform)\n  // iPad on iOS 13 detection\n  || (navigator.userAgent.includes('Mac') && 'ontouchend' in document)\n}\n","import { isTextSelection } from '../helpers/isTextSelection'\nimport { resolveFocusPosition } from '../helpers/resolveFocusPosition'\nimport { FocusPosition, RawCommands } from '../types'\nimport { isiOS } from '../utilities/isiOS'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    focus: {\n      /**\n       * Focus the editor at the given position.\n       */\n      focus: (\n        position?: FocusPosition,\n        options?: {\n          scrollIntoView?: boolean,\n        },\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const focus: RawCommands['focus'] = (position = null, options = {}) => ({\n  editor,\n  view,\n  tr,\n  dispatch,\n}) => {\n  options = {\n    scrollIntoView: true,\n    ...options,\n  }\n\n  const delayedFocus = () => {\n    // focus within `requestAnimationFrame` breaks focus on iOS\n    // so we have to call this\n    if (isiOS()) {\n      (view.dom as HTMLElement).focus()\n    }\n\n    // For React we have to focus asynchronously. Otherwise wild things happen.\n    // see: https://github.com/ueberdosis/tiptap/issues/1520\n    requestAnimationFrame(() => {\n      if (!editor.isDestroyed) {\n        view.focus()\n\n        if (options?.scrollIntoView) {\n          editor.commands.scrollIntoView()\n        }\n      }\n    })\n  }\n\n  if ((view.hasFocus() && position === null) || position === false) {\n    return true\n  }\n\n  // we don’t try to resolve a NodeSelection or CellSelection\n  if (dispatch && position === null && !isTextSelection(editor.state.selection)) {\n    delayedFocus()\n    return true\n  }\n\n  // pass through tr.doc instead of editor.state.doc\n  // since transactions could change the editors state before this command has been run\n  const selection = resolveFocusPosition(tr.doc, position) || editor.state.selection\n  const isSameSelection = editor.state.selection.eq(selection)\n\n  if (dispatch) {\n    if (!isSameSelection) {\n      tr.setSelection(selection)\n    }\n\n    // `tr.setSelection` resets the stored marks\n    // so we’ll restore them if the selection is the same as before\n    if (isSameSelection && tr.storedMarks) {\n      tr.setStoredMarks(tr.storedMarks)\n    }\n\n    delayedFocus()\n  }\n\n  return true\n}\n","import { CommandProps, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    forEach: {\n      /**\n       * Loop through an array of items.\n       */\n      forEach: <T>(\n        items: T[],\n        fn: (\n          item: T,\n          props: CommandProps & {\n            index: number,\n          },\n        ) => boolean,\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const forEach: RawCommands['forEach'] = (items, fn) => props => {\n  return items.every((item, index) => fn(item, { ...props, index }))\n}\n","import { ParseOptions } from 'prosemirror-model'\n\nimport { Content, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    insertContent: {\n      /**\n       * Insert a node or string of HTML at the current position.\n       */\n      insertContent: (\n        value: Content,\n        options?: {\n          parseOptions?: ParseOptions,\n          updateSelection?: boolean,\n        },\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const insertContent: RawCommands['insertContent'] = (value, options) => ({ tr, commands }) => {\n  return commands.insertContentAt({ from: tr.selection.from, to: tr.selection.to }, value, options)\n}\n","export function elementFromString(value: string): HTMLElement {\n  // add a wrapper to preserve leading and trailing whitespace\n  const wrappedValue = `<body>${value}</body>`\n\n  return new window.DOMParser().parseFromString(wrappedValue, 'text/html').body\n}\n","import {\n  DOMParser,\n  Fragment,\n  Node as ProseMirrorNode,\n  ParseOptions,\n  Schema,\n} from 'prosemirror-model'\n\nimport { Content } from '../types'\nimport { elementFromString } from '../utilities/elementFromString'\n\nexport type CreateNodeFromContentOptions = {\n  slice?: boolean,\n  parseOptions?: ParseOptions,\n}\n\nexport function createNodeFromContent(\n  content: Content,\n  schema: Schema,\n  options?: CreateNodeFromContentOptions,\n): ProseMirrorNode | Fragment {\n  options = {\n    slice: true,\n    parseOptions: {},\n    ...options,\n  }\n\n  if (typeof content === 'object' && content !== null) {\n    try {\n      if (Array.isArray(content)) {\n        return Fragment.fromArray(content.map(item => schema.nodeFromJSON(item)))\n      }\n\n      return schema.nodeFromJSON(content)\n    } catch (error) {\n      console.warn(\n        '[tiptap warn]: Invalid content.',\n        'Passed value:',\n        content,\n        'Error:',\n        error,\n      )\n\n      return createNodeFromContent('', schema, options)\n    }\n  }\n\n  if (typeof content === 'string') {\n    const parser = DOMParser.fromSchema(schema)\n\n    return options.slice\n      ? parser.parseSlice(elementFromString(content), options.parseOptions).content\n      : parser.parse(elementFromString(content), options.parseOptions)\n  }\n\n  return createNodeFromContent('', schema, options)\n}\n","import { Selection, Transaction } from 'prosemirror-state'\nimport { ReplaceAroundStep, ReplaceStep } from 'prosemirror-transform'\n\n// source: https://github.com/ProseMirror/prosemirror-state/blob/master/src/selection.js#L466\nexport function selectionToInsertionEnd(tr: Transaction, startLen: number, bias: number) {\n  const last = tr.steps.length - 1\n\n  if (last < startLen) {\n    return\n  }\n\n  const step = tr.steps[last]\n\n  if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep)) {\n    return\n  }\n\n  const map = tr.mapping.maps[last]\n  let end = 0\n\n  map.forEach((_from, _to, _newFrom, newTo) => {\n    if (end === 0) {\n      end = newTo\n    }\n  })\n\n  tr.setSelection(Selection.near(tr.doc.resolve(end), bias))\n}\n","import { Fragment, Node as ProseMirrorNode, ParseOptions } from 'prosemirror-model'\n\nimport { createNodeFromContent } from '../helpers/createNodeFromContent'\nimport { selectionToInsertionEnd } from '../helpers/selectionToInsertionEnd'\nimport {\n  Content,\n  Range,\n  RawCommands,\n} from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    insertContentAt: {\n      /**\n       * Insert a node or string of HTML at a specific position.\n       */\n      insertContentAt: (\n        position: number | Range,\n        value: Content,\n        options?: {\n          parseOptions?: ParseOptions,\n          updateSelection?: boolean,\n        },\n      ) => ReturnType,\n    }\n  }\n}\n\nconst isFragment = (nodeOrFragment: ProseMirrorNode | Fragment): nodeOrFragment is Fragment => {\n  return nodeOrFragment.toString().startsWith('<')\n}\n\nexport const insertContentAt: RawCommands['insertContentAt'] = (position, value, options) => ({ tr, dispatch, editor }) => {\n  if (dispatch) {\n    options = {\n      parseOptions: {},\n      updateSelection: true,\n      ...options,\n    }\n\n    const content = createNodeFromContent(value, editor.schema, {\n      parseOptions: {\n        preserveWhitespace: 'full',\n        ...options.parseOptions,\n      },\n    })\n\n    // don’t dispatch an empty fragment because this can lead to strange errors\n    if (content.toString() === '<>') {\n      return true\n    }\n\n    let { from, to } = typeof position === 'number'\n      ? { from: position, to: position }\n      : position\n\n    let isOnlyTextContent = true\n    let isOnlyBlockContent = true\n    const nodes = isFragment(content)\n      ? content\n      : [content]\n\n    nodes.forEach(node => {\n      // check if added node is valid\n      node.check()\n\n      isOnlyTextContent = isOnlyTextContent\n        ? node.isText && node.marks.length === 0\n        : false\n\n      isOnlyBlockContent = isOnlyBlockContent\n        ? node.isBlock\n        : false\n    })\n\n    // check if we can replace the wrapping node by\n    // the newly inserted content\n    // example:\n    // replace an empty paragraph by an inserted image\n    // instead of inserting the image below the paragraph\n    if (from === to && isOnlyBlockContent) {\n      const { parent } = tr.doc.resolve(from)\n      const isEmptyTextBlock = parent.isTextblock\n        && !parent.type.spec.code\n        && !parent.childCount\n\n      if (isEmptyTextBlock) {\n        from -= 1\n        to += 1\n      }\n    }\n\n    // if there is only plain text we have to use `insertText`\n    // because this will keep the current marks\n    if (isOnlyTextContent) {\n      tr.insertText(value as string, from, to)\n    } else {\n      tr.replaceWith(from, to, content)\n    }\n\n    // set cursor at end of inserted content\n    if (options.updateSelection) {\n      selectionToInsertionEnd(tr, tr.steps.length - 1, -1)\n    }\n  }\n\n  return true\n}\n","import { joinBackward as originalJoinBackward } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    joinBackward: {\n      /**\n       * Join two nodes backward.\n       */\n      joinBackward: () => ReturnType,\n    }\n  }\n}\n\nexport const joinBackward: RawCommands['joinBackward'] = () => ({ state, dispatch }) => {\n  return originalJoinBackward(state, dispatch)\n}\n","import { joinForward as originalJoinForward } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    joinForward: {\n      /**\n       * Join two nodes forward.\n       */\n      joinForward: () => ReturnType,\n    }\n  }\n}\n\nexport const joinForward: RawCommands['joinForward'] = () => ({ state, dispatch }) => {\n  return originalJoinForward(state, dispatch)\n}\n","export function isMacOS(): boolean {\n  return typeof navigator !== 'undefined'\n    ? /Mac/.test(navigator.platform)\n    : false\n}\n","import { RawCommands } from '../types'\nimport { isiOS } from '../utilities/isiOS'\nimport { isMacOS } from '../utilities/isMacOS'\n\nfunction normalizeKeyName(name: string) {\n  const parts = name.split(/-(?!$)/)\n  let result = parts[parts.length - 1]\n\n  if (result === 'Space') {\n    result = ' '\n  }\n\n  let alt\n  let ctrl\n  let shift\n  let meta\n\n  for (let i = 0; i < parts.length - 1; i += 1) {\n    const mod = parts[i]\n\n    if (/^(cmd|meta|m)$/i.test(mod)) {\n      meta = true\n    } else if (/^a(lt)?$/i.test(mod)) {\n      alt = true\n    } else if (/^(c|ctrl|control)$/i.test(mod)) {\n      ctrl = true\n    } else if (/^s(hift)?$/i.test(mod)) {\n      shift = true\n    } else if (/^mod$/i.test(mod)) {\n      if (isiOS() || isMacOS()) {\n        meta = true\n      } else {\n        ctrl = true\n      }\n    } else {\n      throw new Error(`Unrecognized modifier name: ${mod}`)\n    }\n  }\n\n  if (alt) {\n    result = `Alt-${result}`\n  }\n\n  if (ctrl) {\n    result = `Ctrl-${result}`\n  }\n\n  if (meta) {\n    result = `Meta-${result}`\n  }\n\n  if (shift) {\n    result = `Shift-${result}`\n  }\n\n  return result\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    keyboardShortcut: {\n      /**\n       * Trigger a keyboard shortcut.\n       */\n      keyboardShortcut: (name: string) => ReturnType,\n    }\n  }\n}\n\nexport const keyboardShortcut: RawCommands['keyboardShortcut'] = name => ({\n  editor,\n  view,\n  tr,\n  dispatch,\n}) => {\n  const keys = normalizeKeyName(name).split(/-(?!$)/)\n  const key = keys.find(item => !['Alt', 'Ctrl', 'Meta', 'Shift'].includes(item))\n  const event = new KeyboardEvent('keydown', {\n    key: key === 'Space'\n      ? ' '\n      : key,\n    altKey: keys.includes('Alt'),\n    ctrlKey: keys.includes('Ctrl'),\n    metaKey: keys.includes('Meta'),\n    shiftKey: keys.includes('Shift'),\n    bubbles: true,\n    cancelable: true,\n  })\n\n  const capturedTransaction = editor.captureTransaction(() => {\n    view.someProp('handleKeyDown', f => f(view, event))\n  })\n\n  capturedTransaction?.steps.forEach(step => {\n    const newStep = step.map(tr.mapping)\n\n    if (newStep && dispatch) {\n      tr.maybeStep(newStep)\n    }\n  })\n\n  return true\n}\n","import { NodeType } from 'prosemirror-model'\nimport { EditorState } from 'prosemirror-state'\n\nimport { NodeRange } from '../types'\nimport { objectIncludes } from '../utilities/objectIncludes'\nimport { getNodeType } from './getNodeType'\n\nexport function isNodeActive(\n  state: EditorState,\n  typeOrName: NodeType | string | null,\n  attributes: Record<string, any> = {},\n): boolean {\n  const { from, to, empty } = state.selection\n  const type = typeOrName\n    ? getNodeType(typeOrName, state.schema)\n    : null\n\n  const nodeRanges: NodeRange[] = []\n\n  state.doc.nodesBetween(from, to, (node, pos) => {\n    if (node.isText) {\n      return\n    }\n\n    const relativeFrom = Math.max(from, pos)\n    const relativeTo = Math.min(to, pos + node.nodeSize)\n\n    nodeRanges.push({\n      node,\n      from: relativeFrom,\n      to: relativeTo,\n    })\n  })\n\n  const selectionRange = to - from\n  const matchedNodeRanges = nodeRanges\n    .filter(nodeRange => {\n      if (!type) {\n        return true\n      }\n\n      return type.name === nodeRange.node.type.name\n    })\n    .filter(nodeRange => objectIncludes(nodeRange.node.attrs, attributes, { strict: false }))\n\n  if (empty) {\n    return !!matchedNodeRanges.length\n  }\n\n  const range = matchedNodeRanges\n    .reduce((sum, nodeRange) => sum + nodeRange.to - nodeRange.from, 0)\n\n  return range >= selectionRange\n}\n","import { lift as originalLift } from 'prosemirror-commands'\nimport { NodeType } from 'prosemirror-model'\n\nimport { getNodeType } from '../helpers/getNodeType'\nimport { isNodeActive } from '../helpers/isNodeActive'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    lift: {\n      /**\n       * Removes an existing wrap.\n       */\n      lift: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const lift: RawCommands['lift'] = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const isActive = isNodeActive(state, type, attributes)\n\n  if (!isActive) {\n    return false\n  }\n\n  return originalLift(state, dispatch)\n}\n","import { liftEmptyBlock as originalLiftEmptyBlock } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    liftEmptyBlock: {\n      /**\n       * Lift block if empty.\n       */\n      liftEmptyBlock: () => ReturnType,\n    }\n  }\n}\n\nexport const liftEmptyBlock: RawCommands['liftEmptyBlock'] = () => ({ state, dispatch }) => {\n  return originalLiftEmptyBlock(state, dispatch)\n}\n","import { NodeType } from 'prosemirror-model'\nimport { liftListItem as originalLiftListItem } from 'prosemirror-schema-list'\n\nimport { getNodeType } from '../helpers/getNodeType'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    liftListItem: {\n      /**\n       * Lift the list item into a wrapping list.\n       */\n      liftListItem: (typeOrName: string | NodeType) => ReturnType,\n    }\n  }\n}\n\nexport const liftListItem: RawCommands['liftListItem'] = typeOrName => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return originalLiftListItem(type)(state, dispatch)\n}\n","import { newlineInCode as originalNewlineInCode } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    newlineInCode: {\n      /**\n       * Add a newline character in code.\n       */\n      newlineInCode: () => ReturnType,\n    }\n  }\n}\n\nexport const newlineInCode: RawCommands['newlineInCode'] = () => ({ state, dispatch }) => {\n  return originalNewlineInCode(state, dispatch)\n}\n","import { Schema } from 'prosemirror-model'\n\nexport function getSchemaTypeNameByName(name: string, schema: Schema): 'node' | 'mark' | null {\n  if (schema.nodes[name]) {\n    return 'node'\n  }\n\n  if (schema.marks[name]) {\n    return 'mark'\n  }\n\n  return null\n}\n","/**\n * Remove a property or an array of properties from an object\n * @param obj Object\n * @param key Key to remove\n */\nexport function deleteProps(obj: Record<string, any>, propOrProps: string | string[]): Record<string, any> {\n  const props = typeof propOrProps === 'string'\n    ? [propOrProps]\n    : propOrProps\n\n  return Object\n    .keys(obj)\n    .reduce((newObj: Record<string, any>, prop) => {\n      if (!props.includes(prop)) {\n        newObj[prop] = obj[prop]\n      }\n\n      return newObj\n    }, {})\n}\n","import { MarkType, NodeType } from 'prosemirror-model'\n\nimport { getMarkType } from '../helpers/getMarkType'\nimport { getNodeType } from '../helpers/getNodeType'\nimport { getSchemaTypeNameByName } from '../helpers/getSchemaTypeNameByName'\nimport { RawCommands } from '../types'\nimport { deleteProps } from '../utilities/deleteProps'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    resetAttributes: {\n      /**\n       * Resets some node attributes to the default value.\n       */\n      resetAttributes: (typeOrName: string | NodeType | MarkType, attributes: string | string[]) => ReturnType,\n    }\n  }\n}\n\nexport const resetAttributes: RawCommands['resetAttributes'] = (typeOrName, attributes) => ({ tr, state, dispatch }) => {\n  let nodeType: NodeType | null = null\n  let markType: MarkType | null = null\n\n  const schemaType = getSchemaTypeNameByName(\n    typeof typeOrName === 'string'\n      ? typeOrName\n      : typeOrName.name,\n    state.schema,\n  )\n\n  if (!schemaType) {\n    return false\n  }\n\n  if (schemaType === 'node') {\n    nodeType = getNodeType(typeOrName as NodeType, state.schema)\n  }\n\n  if (schemaType === 'mark') {\n    markType = getMarkType(typeOrName as MarkType, state.schema)\n  }\n\n  if (dispatch) {\n    tr.selection.ranges.forEach(range => {\n      state.doc.nodesBetween(range.$from.pos, range.$to.pos, (node, pos) => {\n        if (nodeType && nodeType === node.type) {\n          tr.setNodeMarkup(pos, undefined, deleteProps(node.attrs, attributes))\n        }\n\n        if (markType && node.marks.length) {\n          node.marks.forEach(mark => {\n            if (markType === mark.type) {\n              tr.addMark(pos, pos + node.nodeSize, markType.create(deleteProps(mark.attrs, attributes)))\n            }\n          })\n        }\n      })\n    })\n  }\n\n  return true\n}\n","import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    scrollIntoView: {\n      /**\n       * Scroll the selection into view.\n       */\n      scrollIntoView: () => ReturnType,\n    }\n  }\n}\n\nexport const scrollIntoView: RawCommands['scrollIntoView'] = () => ({ tr, dispatch }) => {\n  if (dispatch) {\n    tr.scrollIntoView()\n  }\n\n  return true\n}\n","import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectAll: {\n      /**\n       * Select the whole document.\n       */\n      selectAll: () => ReturnType,\n    }\n  }\n}\n\nexport const selectAll: RawCommands['selectAll'] = () => ({ tr, commands }) => {\n  return commands.setTextSelection({\n    from: 0,\n    to: tr.doc.content.size,\n  })\n}\n","import { selectNodeBackward as originalSelectNodeBackward } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectNodeBackward: {\n      /**\n       * Select a node backward.\n       */\n      selectNodeBackward: () => ReturnType,\n    }\n  }\n}\n\nexport const selectNodeBackward: RawCommands['selectNodeBackward'] = () => ({ state, dispatch }) => {\n  return originalSelectNodeBackward(state, dispatch)\n}\n","import { selectNodeForward as originalSelectNodeForward } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectNodeForward: {\n      /**\n       * Select a node forward.\n       */\n      selectNodeForward: () => ReturnType,\n    }\n  }\n}\n\nexport const selectNodeForward: RawCommands['selectNodeForward'] = () => ({ state, dispatch }) => {\n  return originalSelectNodeForward(state, dispatch)\n}\n","import { selectParentNode as originalSelectParentNode } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectParentNode: {\n      /**\n       * Select the parent node.\n       */\n      selectParentNode: () => ReturnType,\n    }\n  }\n}\n\nexport const selectParentNode: RawCommands['selectParentNode'] = () => ({ state, dispatch }) => {\n  return originalSelectParentNode(state, dispatch)\n}\n","// @ts-ignore\n// TODO: add types to @types/prosemirror-commands\nimport { selectTextblockEnd as originalSelectTextblockEnd } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectTextblockEnd: {\n      /**\n       * Moves the cursor to the end of current text block.\n       */\n      selectTextblockEnd: () => ReturnType,\n    }\n  }\n}\n\nexport const selectTextblockEnd: RawCommands['selectTextblockEnd'] = () => ({ state, dispatch }) => {\n  return originalSelectTextblockEnd(state, dispatch)\n}\n","// @ts-ignore\n// TODO: add types to @types/prosemirror-commands\nimport { selectTextblockStart as originalSelectTextblockStart } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectTextblockStart: {\n      /**\n       * Moves the cursor to the start of current text block.\n       */\n      selectTextblockStart: () => ReturnType,\n    }\n  }\n}\n\nexport const selectTextblockStart: RawCommands['selectTextblockStart'] = () => ({ state, dispatch }) => {\n  return originalSelectTextblockStart(state, dispatch)\n}\n","import { Node as ProseMirrorNode, ParseOptions, Schema } from 'prosemirror-model'\n\nimport { Content } from '../types'\nimport { createNodeFromContent } from './createNodeFromContent'\n\nexport function createDocument(\n  content: Content,\n  schema: Schema,\n  parseOptions: ParseOptions = {},\n): ProseMirrorNode {\n  return createNodeFromContent(content, schema, { slice: false, parseOptions }) as ProseMirrorNode\n}\n","import { ParseOptions } from 'prosemirror-model'\n\nimport { createDocument } from '../helpers/createDocument'\nimport { Content, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setContent: {\n      /**\n       * Replace the whole document with new content.\n       */\n      setContent: (\n        content: Content,\n        emitUpdate?: boolean,\n        parseOptions?: ParseOptions,\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const setContent: RawCommands['setContent'] = (content, emitUpdate = false, parseOptions = {}) => ({ tr, editor, dispatch }) => {\n  const { doc } = tr\n  const document = createDocument(content, editor.schema, parseOptions)\n\n  if (dispatch) {\n    tr.replaceWith(0, doc.content.size, document)\n      .setMeta('preventUpdate', !emitUpdate)\n  }\n\n  return true\n}\n","import { Mark, MarkType } from 'prosemirror-model'\nimport { EditorState } from 'prosemirror-state'\n\nimport { getMarkType } from './getMarkType'\n\nexport function getMarkAttributes(state: EditorState, typeOrName: string | MarkType): Record<string, any> {\n  const type = getMarkType(typeOrName, state.schema)\n  const { from, to, empty } = state.selection\n  const marks: Mark[] = []\n\n  if (empty) {\n    if (state.storedMarks) {\n      marks.push(...state.storedMarks)\n    }\n\n    marks.push(...state.selection.$head.marks())\n  } else {\n    state.doc.nodesBetween(from, to, node => {\n      marks.push(...node.marks)\n    })\n  }\n\n  const mark = marks.find(markItem => markItem.type.name === type.name)\n\n  if (!mark) {\n    return {}\n  }\n\n  return { ...mark.attrs }\n}\n","import { MarkType } from 'prosemirror-model'\n\nimport { getMarkAttributes } from '../helpers/getMarkAttributes'\nimport { getMarkType } from '../helpers/getMarkType'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setMark: {\n      /**\n       * Add a mark with new attributes.\n       */\n      setMark: (typeOrName: string | MarkType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const setMark: RawCommands['setMark'] = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\n  const { selection } = tr\n  const { empty, ranges } = selection\n  const type = getMarkType(typeOrName, state.schema)\n\n  if (dispatch) {\n    if (empty) {\n      const oldAttributes = getMarkAttributes(state, type)\n\n      tr.addStoredMark(type.create({\n        ...oldAttributes,\n        ...attributes,\n      }))\n    } else {\n      ranges.forEach(range => {\n        const from = range.$from.pos\n        const to = range.$to.pos\n\n        state.doc.nodesBetween(from, to, (node, pos) => {\n          const trimmedFrom = Math.max(pos, from)\n          const trimmedTo = Math.min(pos + node.nodeSize, to)\n          const someHasMark = node.marks.find(mark => mark.type === type)\n\n          // if there is already a mark of this type\n          // we know that we have to merge its attributes\n          // otherwise we add a fresh new mark\n          if (someHasMark) {\n            node.marks.forEach(mark => {\n              if (type === mark.type) {\n                tr.addMark(trimmedFrom, trimmedTo, type.create({\n                  ...mark.attrs,\n                  ...attributes,\n                }))\n              }\n            })\n          } else {\n            tr.addMark(trimmedFrom, trimmedTo, type.create(attributes))\n          }\n        })\n      })\n    }\n  }\n\n  return true\n}\n","import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setMeta: {\n      /**\n       * Store a metadata property in the current transaction.\n       */\n      setMeta: (key: string, value: any) => ReturnType,\n    }\n  }\n}\n\nexport const setMeta: RawCommands['setMeta'] = (key, value) => ({ tr }) => {\n  tr.setMeta(key, value)\n\n  return true\n}\n","import { setBlockType } from 'prosemirror-commands'\nimport { NodeType } from 'prosemirror-model'\n\nimport { getNodeType } from '../helpers/getNodeType'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setNode: {\n      /**\n       * Replace a given range with a node.\n       */\n      setNode: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const setNode: RawCommands['setNode'] = (typeOrName, attributes = {}) => ({ state, dispatch, chain }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  // TODO: use a fallback like insertContent?\n  if (!type.isTextblock) {\n    console.warn('[tiptap warn]: Currently \"setNode()\" only supports text block nodes.')\n\n    return false\n  }\n\n  return chain()\n    // try to convert node to default node if needed\n    .command(({ commands }) => {\n      const canSetBlock = setBlockType(type, attributes)(state)\n\n      if (canSetBlock) {\n        return true\n      }\n\n      return commands.clearNodes()\n    })\n    .command(({ state: updatedState }) => {\n      return setBlockType(type, attributes)(updatedState, dispatch)\n    })\n    .run()\n}\n","import { NodeSelection } from 'prosemirror-state'\n\nimport { RawCommands } from '../types'\nimport { minMax } from '../utilities/minMax'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setNodeSelection: {\n      /**\n       * Creates a NodeSelection.\n       */\n      setNodeSelection: (position: number) => ReturnType,\n    }\n  }\n}\n\nexport const setNodeSelection: RawCommands['setNodeSelection'] = position => ({ tr, dispatch }) => {\n  if (dispatch) {\n    const { doc } = tr\n    const from = minMax(position, 0, doc.content.size)\n    const selection = NodeSelection.create(doc, from)\n\n    tr.setSelection(selection)\n  }\n\n  return true\n}\n","import { TextSelection } from 'prosemirror-state'\n\nimport { Range, RawCommands } from '../types'\nimport { minMax } from '../utilities/minMax'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setTextSelection: {\n      /**\n       * Creates a TextSelection.\n       */\n      setTextSelection: (position: number | Range) => ReturnType,\n    }\n  }\n}\n\nexport const setTextSelection: RawCommands['setTextSelection'] = position => ({ tr, dispatch }) => {\n  if (dispatch) {\n    const { doc } = tr\n    const { from, to } = typeof position === 'number'\n      ? { from: position, to: position }\n      : position\n    const minPos = TextSelection.atStart(doc).from\n    const maxPos = TextSelection.atEnd(doc).to\n    const resolvedFrom = minMax(from, minPos, maxPos)\n    const resolvedEnd = minMax(to, minPos, maxPos)\n    const selection = TextSelection.create(doc, resolvedFrom, resolvedEnd)\n\n    tr.setSelection(selection)\n  }\n\n  return true\n}\n","import { NodeType } from 'prosemirror-model'\nimport { sinkListItem as originalSinkListItem } from 'prosemirror-schema-list'\n\nimport { getNodeType } from '../helpers/getNodeType'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    sinkListItem: {\n      /**\n       * Sink the list item down into an inner list.\n       */\n      sinkListItem: (typeOrName: string | NodeType) => ReturnType,\n    }\n  }\n}\n\nexport const sinkListItem: RawCommands['sinkListItem'] = typeOrName => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return originalSinkListItem(type)(state, dispatch)\n}\n","import { ContentMatch, NodeType } from 'prosemirror-model'\n\nexport function defaultBlockAt(match: ContentMatch): NodeType | null {\n  for (let i = 0; i < match.edgeCount; i += 1) {\n    const { type } = match.edge(i)\n\n    if (type.isTextblock && !type.hasRequiredAttrs()) {\n      return type\n    }\n  }\n\n  return null\n}\n","import { ExtensionAttribute } from '../types'\n\nexport function getSplittedAttributes(\n  extensionAttributes: ExtensionAttribute[],\n  typeName: string,\n  attributes: Record<string, any>,\n): Record<string, any> {\n  return Object.fromEntries(Object\n    .entries(attributes)\n    .filter(([name]) => {\n      const extensionAttribute = extensionAttributes.find(item => {\n        return item.type === typeName && item.name === name\n      })\n\n      if (!extensionAttribute) {\n        return false\n      }\n\n      return extensionAttribute.attribute.keepOnSplit\n    }))\n}\n","import { EditorState, NodeSelection, TextSelection } from 'prosemirror-state'\nimport { canSplit } from 'prosemirror-transform'\n\nimport { defaultBlockAt } from '../helpers/defaultBlockAt'\nimport { getSplittedAttributes } from '../helpers/getSplittedAttributes'\nimport { RawCommands } from '../types'\n\nfunction ensureMarks(state: EditorState, splittableMarks?: string[]) {\n  const marks = state.storedMarks\n    || (state.selection.$to.parentOffset && state.selection.$from.marks())\n\n  if (marks) {\n    const filteredMarks = marks.filter(mark => splittableMarks?.includes(mark.type.name))\n\n    state.tr.ensureMarks(filteredMarks)\n  }\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    splitBlock: {\n      /**\n       * Forks a new node from an existing node.\n       */\n      splitBlock: (options?: { keepMarks?: boolean }) => ReturnType,\n    }\n  }\n}\n\nexport const splitBlock: RawCommands['splitBlock'] = ({ keepMarks = true } = {}) => ({\n  tr,\n  state,\n  dispatch,\n  editor,\n}) => {\n  const { selection, doc } = tr\n  const { $from, $to } = selection\n  const extensionAttributes = editor.extensionManager.attributes\n  const newAttributes = getSplittedAttributes(\n    extensionAttributes,\n    $from.node().type.name,\n    $from.node().attrs,\n  )\n\n  if (selection instanceof NodeSelection && selection.node.isBlock) {\n    if (!$from.parentOffset || !canSplit(doc, $from.pos)) {\n      return false\n    }\n\n    if (dispatch) {\n      if (keepMarks) {\n        ensureMarks(state, editor.extensionManager.splittableMarks)\n      }\n\n      tr.split($from.pos).scrollIntoView()\n    }\n\n    return true\n  }\n\n  if (!$from.parent.isBlock) {\n    return false\n  }\n\n  if (dispatch) {\n    const atEnd = $to.parentOffset === $to.parent.content.size\n\n    if (selection instanceof TextSelection) {\n      tr.deleteSelection()\n    }\n\n    const deflt = $from.depth === 0\n      ? undefined\n      : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)))\n\n    let types = atEnd && deflt\n      ? [{\n        type: deflt,\n        attrs: newAttributes,\n      }]\n      : undefined\n\n    let can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types)\n\n    if (\n      !types\n      && !can\n      && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt ? [{ type: deflt }] : undefined)\n    ) {\n      can = true\n      types = deflt\n        ? [{\n          type: deflt,\n          attrs: newAttributes,\n        }]\n        : undefined\n    }\n\n    if (can) {\n      tr.split(tr.mapping.map($from.pos), 1, types)\n\n      if (\n        deflt\n        && !atEnd\n        && !$from.parentOffset\n        && $from.parent.type !== deflt\n      ) {\n        const first = tr.mapping.map($from.before())\n        const $first = tr.doc.resolve(first)\n\n        if ($from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt)) {\n          tr.setNodeMarkup(tr.mapping.map($from.before()), deflt)\n        }\n      }\n    }\n\n    if (keepMarks) {\n      ensureMarks(state, editor.extensionManager.splittableMarks)\n    }\n\n    tr.scrollIntoView()\n  }\n\n  return true\n}\n","import {\n  Fragment,\n  Node as ProseMirrorNode,\n  NodeType,\n  Slice,\n} from 'prosemirror-model'\nimport { TextSelection } from 'prosemirror-state'\nimport { canSplit } from 'prosemirror-transform'\n\nimport { getNodeType } from '../helpers/getNodeType'\nimport { getSplittedAttributes } from '../helpers/getSplittedAttributes'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    splitListItem: {\n      /**\n       * Splits one list item into two list items.\n       */\n      splitListItem: (typeOrName: string | NodeType) => ReturnType,\n    }\n  }\n}\n\nexport const splitListItem: RawCommands['splitListItem'] = typeOrName => ({\n  tr, state, dispatch, editor,\n}) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const { $from, $to } = state.selection\n\n  // @ts-ignore\n  // eslint-disable-next-line\n  const node: ProseMirrorNode = state.selection.node\n\n  if ((node && node.isBlock) || $from.depth < 2 || !$from.sameParent($to)) {\n    return false\n  }\n\n  const grandParent = $from.node(-1)\n\n  if (grandParent.type !== type) {\n    return false\n  }\n\n  const extensionAttributes = editor.extensionManager.attributes\n\n  if ($from.parent.content.size === 0 && $from.node(-1).childCount === $from.indexAfter(-1)) {\n    // In an empty block. If this is a nested list, the wrapping\n    // list item should be split. Otherwise, bail out and let next\n    // command handle lifting.\n    if (\n      $from.depth === 2\n      || $from.node(-3).type !== type\n      || $from.index(-2) !== $from.node(-2).childCount - 1\n    ) {\n      return false\n    }\n\n    if (dispatch) {\n      let wrap = Fragment.empty\n      // eslint-disable-next-line\n      const depthBefore = $from.index(-1)\n        ? 1\n        : $from.index(-2)\n          ? 2\n          : 3\n\n      // Build a fragment containing empty versions of the structure\n      // from the outer list item to the parent node of the cursor\n      for (let d = $from.depth - depthBefore; d >= $from.depth - 3; d -= 1) {\n        wrap = Fragment.from($from.node(d).copy(wrap))\n      }\n\n      // eslint-disable-next-line\n      const depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount\n        ? 1\n        : $from.indexAfter(-2) < $from.node(-3).childCount\n          ? 2\n          : 3\n\n      // Add a second list item with an empty default start node\n      const newNextTypeAttributes = getSplittedAttributes(\n        extensionAttributes,\n        $from.node().type.name,\n        $from.node().attrs,\n      )\n      const nextType = type.contentMatch.defaultType?.createAndFill(newNextTypeAttributes) || undefined\n\n      wrap = wrap.append(Fragment.from(type.createAndFill(null, nextType) || undefined))\n\n      const start = $from.before($from.depth - (depthBefore - 1))\n\n      tr.replace(start, $from.after(-depthAfter), new Slice(wrap, 4 - depthBefore, 0))\n\n      let sel = -1\n\n      tr.doc.nodesBetween(start, tr.doc.content.size, (n, pos) => {\n        if (sel > -1) {\n          return false\n        }\n\n        if (n.isTextblock && n.content.size === 0) {\n          sel = pos + 1\n        }\n      })\n\n      if (sel > -1) {\n        tr.setSelection(TextSelection.near(tr.doc.resolve(sel)))\n      }\n\n      tr.scrollIntoView()\n    }\n\n    return true\n  }\n\n  const nextType = $to.pos === $from.end()\n    ? grandParent.contentMatchAt(0).defaultType\n    : null\n\n  const newTypeAttributes = getSplittedAttributes(\n    extensionAttributes,\n    grandParent.type.name,\n    grandParent.attrs,\n  )\n  const newNextTypeAttributes = getSplittedAttributes(\n    extensionAttributes,\n    $from.node().type.name,\n    $from.node().attrs,\n  )\n\n  tr.delete($from.pos, $to.pos)\n\n  const types = nextType\n    ? [{ type, attrs: newTypeAttributes }, { type: nextType, attrs: newNextTypeAttributes }]\n    : [{ type, attrs: newTypeAttributes }]\n\n  if (!canSplit(tr.doc, $from.pos, 2)) {\n    return false\n  }\n\n  if (dispatch) {\n    tr.split($from.pos, 2, types).scrollIntoView()\n  }\n\n  return true\n}\n","import { Node as ProseMirrorNode, ResolvedPos } from 'prosemirror-model'\n\nimport { Predicate } from '../types'\n\nexport function findParentNodeClosestToPos($pos: ResolvedPos, predicate: Predicate): ({\n  pos: number,\n  start: number,\n  depth: number,\n  node: ProseMirrorNode,\n} | undefined) {\n  for (let i = $pos.depth; i > 0; i -= 1) {\n    const node = $pos.node(i)\n\n    if (predicate(node)) {\n      return {\n        pos: i > 0 ? $pos.before(i) : 0,\n        start: $pos.start(i),\n        depth: i,\n        node,\n      }\n    }\n  }\n}\n","import { Selection } from 'prosemirror-state'\n\nimport { Predicate } from '../types'\nimport { findParentNodeClosestToPos } from './findParentNodeClosestToPos'\n\nexport function findParentNode(predicate: Predicate) {\n  return (selection: Selection) => findParentNodeClosestToPos(selection.$from, predicate)\n}\n","import { NodeConfig } from '..'\nimport { getExtensionField } from '../helpers/getExtensionField'\nimport { Extensions } from '../types'\nimport { callOrReturn } from '../utilities/callOrReturn'\nimport { splitExtensions } from './splitExtensions'\n\nexport function isList(name: string, extensions: Extensions): boolean {\n  const { nodeExtensions } = splitExtensions(extensions)\n  const extension = nodeExtensions.find(item => item.name === name)\n\n  if (!extension) {\n    return false\n  }\n\n  const context = {\n    name: extension.name,\n    options: extension.options,\n    storage: extension.storage,\n  }\n  const group = callOrReturn(getExtensionField<NodeConfig['group']>(extension, 'group', context))\n\n  if (typeof group !== 'string') {\n    return false\n  }\n\n  return group.split(' ').includes('list')\n}\n","import { NodeType } from 'prosemirror-model'\nimport { Transaction } from 'prosemirror-state'\nimport { canJoin } from 'prosemirror-transform'\n\nimport { findParentNode } from '../helpers/findParentNode'\nimport { getNodeType } from '../helpers/getNodeType'\nimport { isList } from '../helpers/isList'\nimport { RawCommands } from '../types'\n\nconst joinListBackwards = (tr: Transaction, listType: NodeType): boolean => {\n  const list = findParentNode(node => node.type === listType)(tr.selection)\n\n  if (!list) {\n    return true\n  }\n\n  const before = tr.doc.resolve(Math.max(0, list.pos - 1)).before(list.depth)\n\n  if (before === undefined) {\n    return true\n  }\n\n  const nodeBefore = tr.doc.nodeAt(before)\n  const canJoinBackwards = list.node.type === nodeBefore?.type\n    && canJoin(tr.doc, list.pos)\n\n  if (!canJoinBackwards) {\n    return true\n  }\n\n  tr.join(list.pos)\n\n  return true\n}\n\nconst joinListForwards = (tr: Transaction, listType: NodeType): boolean => {\n  const list = findParentNode(node => node.type === listType)(tr.selection)\n\n  if (!list) {\n    return true\n  }\n\n  const after = tr.doc.resolve(list.start).after(list.depth)\n\n  if (after === undefined) {\n    return true\n  }\n\n  const nodeAfter = tr.doc.nodeAt(after)\n  const canJoinForwards = list.node.type === nodeAfter?.type\n    && canJoin(tr.doc, after)\n\n  if (!canJoinForwards) {\n    return true\n  }\n\n  tr.join(after)\n\n  return true\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    toggleList: {\n      /**\n       * Toggle between different list types.\n       */\n      toggleList: (listTypeOrName: string | NodeType, itemTypeOrName: string | NodeType) => ReturnType,\n    }\n  }\n}\n\nexport const toggleList: RawCommands['toggleList'] = (listTypeOrName, itemTypeOrName) => ({\n  editor, tr, state, dispatch, chain, commands, can,\n}) => {\n  const { extensions } = editor.extensionManager\n  const listType = getNodeType(listTypeOrName, state.schema)\n  const itemType = getNodeType(itemTypeOrName, state.schema)\n  const { selection } = state\n  const { $from, $to } = selection\n  const range = $from.blockRange($to)\n\n  if (!range) {\n    return false\n  }\n\n  const parentList = findParentNode(node => isList(node.type.name, extensions))(selection)\n\n  if (range.depth >= 1 && parentList && range.depth - parentList.depth <= 1) {\n    // remove list\n    if (parentList.node.type === listType) {\n      return commands.liftListItem(itemType)\n    }\n\n    // change list type\n    if (\n      isList(parentList.node.type.name, extensions)\n      && listType.validContent(parentList.node.content)\n      && dispatch\n    ) {\n      return chain()\n        .command(() => {\n          tr.setNodeMarkup(parentList.pos, listType)\n\n          return true\n        })\n        .command(() => joinListBackwards(tr, listType))\n        .command(() => joinListForwards(tr, listType))\n        .run()\n    }\n  }\n\n  return chain()\n    // try to convert node to default node if needed\n    .command(() => {\n      const canWrapInList = can().wrapInList(listType)\n\n      if (canWrapInList) {\n        return true\n      }\n\n      return commands.clearNodes()\n    })\n    .wrapInList(listType)\n    .command(() => joinListBackwards(tr, listType))\n    .command(() => joinListForwards(tr, listType))\n    .run()\n}\n","import { MarkType } from 'prosemirror-model'\nimport { EditorState } from 'prosemirror-state'\n\nimport { MarkRange } from '../types'\nimport { objectIncludes } from '../utilities/objectIncludes'\nimport { getMarkType } from './getMarkType'\n\nexport function isMarkActive(\n  state: EditorState,\n  typeOrName: MarkType | string | null,\n  attributes: Record<string, any> = {},\n): boolean {\n  const { empty, ranges } = state.selection\n  const type = typeOrName\n    ? getMarkType(typeOrName, state.schema)\n    : null\n\n  if (empty) {\n    return !!(state.storedMarks || state.selection.$from.marks())\n      .filter(mark => {\n        if (!type) {\n          return true\n        }\n\n        return type.name === mark.type.name\n      })\n      .find(mark => objectIncludes(mark.attrs, attributes, { strict: false }))\n  }\n\n  let selectionRange = 0\n  const markRanges: MarkRange[] = []\n\n  ranges.forEach(({ $from, $to }) => {\n    const from = $from.pos\n    const to = $to.pos\n\n    state.doc.nodesBetween(from, to, (node, pos) => {\n      if (!node.isText && !node.marks.length) {\n        return\n      }\n\n      const relativeFrom = Math.max(from, pos)\n      const relativeTo = Math.min(to, pos + node.nodeSize)\n      const range = relativeTo - relativeFrom\n\n      selectionRange += range\n\n      markRanges.push(...node.marks.map(mark => ({\n        mark,\n        from: relativeFrom,\n        to: relativeTo,\n      })))\n    })\n  })\n\n  if (selectionRange === 0) {\n    return false\n  }\n\n  // calculate range of matched mark\n  const matchedRange = markRanges\n    .filter(markRange => {\n      if (!type) {\n        return true\n      }\n\n      return type.name === markRange.mark.type.name\n    })\n    .filter(markRange => objectIncludes(markRange.mark.attrs, attributes, { strict: false }))\n    .reduce((sum, markRange) => sum + markRange.to - markRange.from, 0)\n\n  // calculate range of marks that excludes the searched mark\n  // for example `code` doesn’t allow any other marks\n  const excludedRange = markRanges\n    .filter(markRange => {\n      if (!type) {\n        return true\n      }\n\n      return markRange.mark.type !== type\n        && markRange.mark.type.excludes(type)\n    })\n    .reduce((sum, markRange) => sum + markRange.to - markRange.from, 0)\n\n  // we only include the result of `excludedRange`\n  // if there is a match at all\n  const range = matchedRange > 0\n    ? matchedRange + excludedRange\n    : matchedRange\n\n  return range >= selectionRange\n}\n","import { MarkType } from 'prosemirror-model'\n\nimport { getMarkType } from '../helpers/getMarkType'\nimport { isMarkActive } from '../helpers/isMarkActive'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    toggleMark: {\n      /**\n       * Toggle a mark on and off.\n       */\n      toggleMark: (\n        typeOrName: string | MarkType,\n        attributes?: Record<string, any>,\n        options?: {\n          /**\n           * Removes the mark even across the current selection. Defaults to `false`.\n           */\n          extendEmptyMarkRange?: boolean,\n        },\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const toggleMark: RawCommands['toggleMark'] = (typeOrName, attributes = {}, options = {}) => ({ state, commands }) => {\n  const { extendEmptyMarkRange = false } = options\n  const type = getMarkType(typeOrName, state.schema)\n  const isActive = isMarkActive(state, type, attributes)\n\n  if (isActive) {\n    return commands.unsetMark(type, { extendEmptyMarkRange })\n  }\n\n  return commands.setMark(type, attributes)\n}\n","import { NodeType } from 'prosemirror-model'\n\nimport { getNodeType } from '../helpers/getNodeType'\nimport { isNodeActive } from '../helpers/isNodeActive'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    toggleNode: {\n      /**\n       * Toggle a node with another node.\n       */\n      toggleNode: (typeOrName: string | NodeType, toggleTypeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const toggleNode: RawCommands['toggleNode'] = (typeOrName, toggleTypeOrName, attributes = {}) => ({ state, commands }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const toggleType = getNodeType(toggleTypeOrName, state.schema)\n  const isActive = isNodeActive(state, type, attributes)\n\n  if (isActive) {\n    return commands.setNode(toggleType)\n  }\n\n  return commands.setNode(type, attributes)\n}\n","import { NodeType } from 'prosemirror-model'\n\nimport { getNodeType } from '../helpers/getNodeType'\nimport { isNodeActive } from '../helpers/isNodeActive'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    toggleWrap: {\n      /**\n       * Wraps nodes in another node, or removes an existing wrap.\n       */\n      toggleWrap: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const toggleWrap: RawCommands['toggleWrap'] = (typeOrName, attributes = {}) => ({ state, commands }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const isActive = isNodeActive(state, type, attributes)\n\n  if (isActive) {\n    return commands.lift(type)\n  }\n\n  return commands.wrapIn(type, attributes)\n}\n","import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    undoInputRule: {\n      /**\n       * Undo an input rule.\n       */\n      undoInputRule: () => ReturnType,\n    }\n  }\n}\n\nexport const undoInputRule: RawCommands['undoInputRule'] = () => ({ state, dispatch }) => {\n  const plugins = state.plugins\n\n  for (let i = 0; i < plugins.length; i += 1) {\n    const plugin = plugins[i]\n    let undoable\n\n    // @ts-ignore\n    // eslint-disable-next-line\n    if (plugin.spec.isInputRules && (undoable = plugin.getState(state))) {\n      if (dispatch) {\n        const tr = state.tr\n        const toUndo = undoable.transform\n\n        for (let j = toUndo.steps.length - 1; j >= 0; j -= 1) {\n          tr.step(toUndo.steps[j].invert(toUndo.docs[j]))\n        }\n\n        if (undoable.text) {\n          const marks = tr.doc.resolve(undoable.from).marks()\n\n          tr.replaceWith(undoable.from, undoable.to, state.schema.text(undoable.text, marks))\n        } else {\n          tr.delete(undoable.from, undoable.to)\n        }\n      }\n\n      return true\n    }\n  }\n\n  return false\n}\n","import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    unsetAllMarks: {\n      /**\n       * Remove all marks in the current selection.\n       */\n      unsetAllMarks: () => ReturnType,\n    }\n  }\n}\n\nexport const unsetAllMarks: RawCommands['unsetAllMarks'] = () => ({ tr, dispatch }) => {\n  const { selection } = tr\n  const { empty, ranges } = selection\n\n  if (empty) {\n    return true\n  }\n\n  if (dispatch) {\n    ranges.forEach(range => {\n      tr.removeMark(range.$from.pos, range.$to.pos)\n    })\n  }\n\n  return true\n}\n","import { MarkType } from 'prosemirror-model'\n\nimport { getMarkRange } from '../helpers/getMarkRange'\nimport { getMarkType } from '../helpers/getMarkType'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    unsetMark: {\n      /**\n       * Remove all marks in the current selection.\n       */\n      unsetMark: (\n        typeOrName: string | MarkType,\n        options?: {\n          /**\n           * Removes the mark even across the current selection. Defaults to `false`.\n           */\n          extendEmptyMarkRange?: boolean,\n        },\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const unsetMark: RawCommands['unsetMark'] = (typeOrName, options = {}) => ({ tr, state, dispatch }) => {\n  const { extendEmptyMarkRange = false } = options\n  const { selection } = tr\n  const type = getMarkType(typeOrName, state.schema)\n  const { $from, empty, ranges } = selection\n\n  if (!dispatch) {\n    return true\n  }\n\n  if (empty && extendEmptyMarkRange) {\n    let { from, to } = selection\n    const attrs = $from.marks().find(mark => mark.type === type)?.attrs\n    const range = getMarkRange($from, type, attrs)\n\n    if (range) {\n      from = range.from\n      to = range.to\n    }\n\n    tr.removeMark(from, to, type)\n  } else {\n    ranges.forEach(range => {\n      tr.removeMark(range.$from.pos, range.$to.pos, type)\n    })\n  }\n\n  tr.removeStoredMark(type)\n\n  return true\n}\n","import { MarkType, NodeType } from 'prosemirror-model'\n\nimport { getMarkType } from '../helpers/getMarkType'\nimport { getNodeType } from '../helpers/getNodeType'\nimport { getSchemaTypeNameByName } from '../helpers/getSchemaTypeNameByName'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    updateAttributes: {\n      /**\n       * Update attributes of a node or mark.\n       */\n      updateAttributes: (typeOrName: string | NodeType | MarkType, attributes: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const updateAttributes: RawCommands['updateAttributes'] = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\n  let nodeType: NodeType | null = null\n  let markType: MarkType | null = null\n\n  const schemaType = getSchemaTypeNameByName(\n    typeof typeOrName === 'string'\n      ? typeOrName\n      : typeOrName.name,\n    state.schema,\n  )\n\n  if (!schemaType) {\n    return false\n  }\n\n  if (schemaType === 'node') {\n    nodeType = getNodeType(typeOrName as NodeType, state.schema)\n  }\n\n  if (schemaType === 'mark') {\n    markType = getMarkType(typeOrName as MarkType, state.schema)\n  }\n\n  if (dispatch) {\n    tr.selection.ranges.forEach(range => {\n      const from = range.$from.pos\n      const to = range.$to.pos\n\n      state.doc.nodesBetween(from, to, (node, pos) => {\n        if (nodeType && nodeType === node.type) {\n          tr.setNodeMarkup(pos, undefined, {\n            ...node.attrs,\n            ...attributes,\n          })\n        }\n\n        if (markType && node.marks.length) {\n          node.marks.forEach(mark => {\n            if (markType === mark.type) {\n              const trimmedFrom = Math.max(pos, from)\n              const trimmedTo = Math.min(pos + node.nodeSize, to)\n\n              tr.addMark(trimmedFrom, trimmedTo, markType.create({\n                ...mark.attrs,\n                ...attributes,\n              }))\n            }\n          })\n        }\n      })\n    })\n  }\n\n  return true\n}\n","import { wrapIn as originalWrapIn } from 'prosemirror-commands'\nimport { NodeType } from 'prosemirror-model'\n\nimport { getNodeType } from '../helpers/getNodeType'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    wrapIn: {\n      /**\n       * Wraps nodes in another node.\n       */\n      wrapIn: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const wrapIn: RawCommands['wrapIn'] = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return originalWrapIn(type, attributes)(state, dispatch)\n}\n","import { NodeType } from 'prosemirror-model'\nimport { wrapInList as originalWrapInList } from 'prosemirror-schema-list'\n\nimport { getNodeType } from '../helpers/getNodeType'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    wrapInList: {\n      /**\n       * Wrap a node in a list.\n       */\n      wrapInList: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const wrapInList: RawCommands['wrapInList'] = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return originalWrapInList(type, attributes)(state, dispatch)\n}\n","import * as commands from '../commands'\nimport { Extension } from '../Extension'\n\nexport * from '../commands'\n\nexport const Commands = Extension.create({\n  name: 'commands',\n\n  addCommands() {\n    return {\n      ...commands,\n    }\n  },\n})\n","import { Plugin, PluginKey } from 'prosemirror-state'\n\nimport { Extension } from '../Extension'\n\nexport const Editable = Extension.create({\n  name: 'editable',\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: new PluginKey('editable'),\n        props: {\n          editable: () => this.editor.options.editable,\n        },\n      }),\n    ]\n  },\n})\n","import { Plugin, PluginKey } from 'prosemirror-state'\n\nimport { Extension } from '../Extension'\n\nexport const FocusEvents = Extension.create({\n  name: 'focusEvents',\n\n  addProseMirrorPlugins() {\n    const { editor } = this\n\n    return [\n      new Plugin({\n        key: new PluginKey('focusEvents'),\n        props: {\n          handleDOMEvents: {\n            focus: (view, event: Event) => {\n              editor.isFocused = true\n\n              const transaction = editor.state.tr\n                .setMeta('focus', { event })\n                .setMeta('addToHistory', false)\n\n              view.dispatch(transaction)\n\n              return false\n            },\n            blur: (view, event: Event) => {\n              editor.isFocused = false\n\n              const transaction = editor.state.tr\n                .setMeta('blur', { event })\n                .setMeta('addToHistory', false)\n\n              view.dispatch(transaction)\n\n              return false\n            },\n          },\n        },\n      }),\n    ]\n  },\n})\n","import { Plugin, PluginKey, Selection } from 'prosemirror-state'\n\nimport { CommandManager } from '../CommandManager'\nimport { Extension } from '../Extension'\nimport { createChainableState } from '../helpers/createChainableState'\nimport { isiOS } from '../utilities/isiOS'\nimport { isMacOS } from '../utilities/isMacOS'\n\nexport const Keymap = Extension.create({\n  name: 'keymap',\n\n  addKeyboardShortcuts() {\n    const handleBackspace = () => this.editor.commands.first(({ commands }) => [\n      () => commands.undoInputRule(),\n      // maybe convert first text block node to default node\n      () => commands.command(({ tr }) => {\n        const { selection, doc } = tr\n        const { empty, $anchor } = selection\n        const { pos, parent } = $anchor\n        const isAtStart = Selection.atStart(doc).from === pos\n\n        if (\n          !empty\n          || !isAtStart\n          || !parent.type.isTextblock\n          || parent.textContent.length\n        ) {\n          return false\n        }\n\n        return commands.clearNodes()\n      }),\n      () => commands.deleteSelection(),\n      () => commands.joinBackward(),\n      () => commands.selectNodeBackward(),\n    ])\n\n    const handleDelete = () => this.editor.commands.first(({ commands }) => [\n      () => commands.deleteSelection(),\n      () => commands.joinForward(),\n      () => commands.selectNodeForward(),\n    ])\n\n    const handleEnter = () => this.editor.commands.first(({ commands }) => [\n      () => commands.newlineInCode(),\n      () => commands.createParagraphNear(),\n      () => commands.liftEmptyBlock(),\n      () => commands.splitBlock(),\n    ])\n\n    const baseKeymap = {\n      Enter: handleEnter,\n      'Mod-Enter': () => this.editor.commands.exitCode(),\n      Backspace: handleBackspace,\n      'Mod-Backspace': handleBackspace,\n      'Shift-Backspace': handleBackspace,\n      Delete: handleDelete,\n      'Mod-Delete': handleDelete,\n      'Mod-a': () => this.editor.commands.selectAll(),\n    }\n\n    const pcKeymap = {\n      ...baseKeymap,\n    }\n\n    const macKeymap = {\n      ...baseKeymap,\n      'Ctrl-h': handleBackspace,\n      'Alt-Backspace': handleBackspace,\n      'Ctrl-d': handleDelete,\n      'Ctrl-Alt-Backspace': handleDelete,\n      'Alt-Delete': handleDelete,\n      'Alt-d': handleDelete,\n      'Ctrl-a': () => this.editor.commands.selectTextblockStart(),\n      'Ctrl-e': () => this.editor.commands.selectTextblockEnd(),\n    }\n\n    if (isiOS() || isMacOS()) {\n      return macKeymap\n    }\n\n    return pcKeymap\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      // With this plugin we check if the whole document was selected and deleted.\n      // In this case we will additionally call `clearNodes()` to convert e.g. a heading\n      // to a paragraph if necessary.\n      // This is an alternative to ProseMirror's `AllSelection`, which doesn’t work well\n      // with many other commands.\n      new Plugin({\n        key: new PluginKey('clearDocument'),\n        appendTransaction: (transactions, oldState, newState) => {\n          const docChanges = transactions.some(transaction => transaction.docChanged)\n            && !oldState.doc.eq(newState.doc)\n\n          if (!docChanges) {\n            return\n          }\n\n          const { empty, from, to } = oldState.selection\n          const allFrom = Selection.atStart(oldState.doc).from\n          const allEnd = Selection.atEnd(oldState.doc).to\n          const allWasSelected = from === allFrom && to === allEnd\n          const isEmpty = newState.doc.textBetween(0, newState.doc.content.size, ' ', ' ').length === 0\n\n          if (empty || !allWasSelected || !isEmpty) {\n            return\n          }\n\n          const tr = newState.tr\n          const state = createChainableState({\n            state: newState,\n            transaction: tr,\n          })\n          const { commands } = new CommandManager({\n            editor: this.editor,\n            state,\n          })\n\n          commands.clearNodes()\n\n          if (!tr.steps.length) {\n            return\n          }\n\n          return tr\n        },\n      }),\n    ]\n  },\n})\n","import { Plugin, PluginKey } from 'prosemirror-state'\n\nimport { Extension } from '../Extension'\n\nexport const Tabindex = Extension.create({\n  name: 'tabindex',\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: new PluginKey('tabindex'),\n        props: {\n          attributes: this.editor.isEditable ? { tabindex: '0' } : {},\n        },\n      }),\n    ]\n  },\n})\n","import { Node, NodeType } from 'prosemirror-model'\nimport { EditorState } from 'prosemirror-state'\n\nimport { getNodeType } from './getNodeType'\n\nexport function getNodeAttributes(state: EditorState, typeOrName: string | NodeType): Record<string, any> {\n  const type = getNodeType(typeOrName, state.schema)\n  const { from, to } = state.selection\n  const nodes: Node[] = []\n\n  state.doc.nodesBetween(from, to, node => {\n    nodes.push(node)\n  })\n\n  const node = nodes\n    .reverse()\n    .find(nodeItem => nodeItem.type.name === type.name)\n\n  if (!node) {\n    return {}\n  }\n\n  return { ...node.attrs }\n}\n","import { MarkType, NodeType } from 'prosemirror-model'\nimport { EditorState } from 'prosemirror-state'\n\nimport { getMarkAttributes } from './getMarkAttributes'\nimport { getNodeAttributes } from './getNodeAttributes'\nimport { getSchemaTypeNameByName } from './getSchemaTypeNameByName'\n\nexport function getAttributes(\n  state: EditorState,\n  typeOrName: string | NodeType | MarkType,\n): Record<string, any> {\n  const schemaType = getSchemaTypeNameByName(\n    typeof typeOrName === 'string'\n      ? typeOrName\n      : typeOrName.name,\n    state.schema,\n  )\n\n  if (schemaType === 'node') {\n    return getNodeAttributes(state, typeOrName as NodeType)\n  }\n\n  if (schemaType === 'mark') {\n    return getMarkAttributes(state, typeOrName as MarkType)\n  }\n\n  return {}\n}\n","import { DOMSerializer, Fragment, Schema } from 'prosemirror-model'\n\nexport function getHTMLFromFragment(fragment: Fragment, schema: Schema): string {\n  const documentFragment = DOMSerializer\n    .fromSchema(schema)\n    .serializeFragment(fragment)\n\n  const temporaryDocument = document.implementation.createHTMLDocument()\n  const container = temporaryDocument.createElement('div')\n\n  container.appendChild(documentFragment)\n\n  return container.innerHTML\n}\n","import { Node as ProseMirrorNode } from 'prosemirror-model'\n\nimport { TextSerializer } from '../types'\nimport { getTextBetween } from './getTextBetween'\n\nexport function getText(\n  node: ProseMirrorNode,\n  options?: {\n    blockSeparator?: string,\n    textSerializers?: Record<string, TextSerializer>,\n  },\n) {\n  const range = {\n    from: 0,\n    to: node.content.size,\n  }\n\n  return getTextBetween(node, range, options)\n}\n","import { EditorState } from 'prosemirror-state'\n\nimport { getSchemaTypeNameByName } from './getSchemaTypeNameByName'\nimport { isMarkActive } from './isMarkActive'\nimport { isNodeActive } from './isNodeActive'\n\nexport function isActive(state: EditorState, name: string | null, attributes: Record<string, any> = {}): boolean {\n  if (!name) {\n    return isNodeActive(state, null, attributes) || isMarkActive(state, null, attributes)\n  }\n\n  const schemaType = getSchemaTypeNameByName(name, state.schema)\n\n  if (schemaType === 'node') {\n    return isNodeActive(state, name, attributes)\n  }\n\n  if (schemaType === 'mark') {\n    return isMarkActive(state, name, attributes)\n  }\n\n  return false\n}\n","import { Node as ProseMirrorNode } from 'prosemirror-model'\n\nexport function isNodeEmpty(node: ProseMirrorNode): boolean {\n  const defaultContent = node.type.createAndFill()?.toJSON()\n  const content = node.toJSON()\n\n  return JSON.stringify(defaultContent) === JSON.stringify(content)\n}\n","export const style = `.ProseMirror {\n  position: relative;\n}\n\n.ProseMirror {\n  word-wrap: break-word;\n  white-space: pre-wrap;\n  white-space: break-spaces;\n  -webkit-font-variant-ligatures: none;\n  font-variant-ligatures: none;\n  font-feature-settings: \"liga\" 0; /* the above doesn't seem to work in Edge */\n}\n\n.ProseMirror [contenteditable=\"false\"] {\n  white-space: normal;\n}\n\n.ProseMirror [contenteditable=\"false\"] [contenteditable=\"true\"] {\n  white-space: pre-wrap;\n}\n\n.ProseMirror pre {\n  white-space: pre-wrap;\n}\n\nimg.ProseMirror-separator {\n  display: inline !important;\n  border: none !important;\n  margin: 0 !important;\n  width: 1px !important;\n  height: 1px !important;\n}\n\n.ProseMirror-gapcursor {\n  display: none;\n  pointer-events: none;\n  position: absolute;\n  margin: 0;\n}\n\n.ProseMirror-gapcursor:after {\n  content: \"\";\n  display: block;\n  position: absolute;\n  top: -2px;\n  width: 20px;\n  border-top: 1px solid black;\n  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;\n}\n\n@keyframes ProseMirror-cursor-blink {\n  to {\n    visibility: hidden;\n  }\n}\n\n.ProseMirror-hideselection *::selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection *::-moz-selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection * {\n  caret-color: transparent;\n}\n\n.ProseMirror-focused .ProseMirror-gapcursor {\n  display: block;\n}\n\n.tippy-box[data-animation=fade][data-state=hidden] {\n  opacity: 0\n}`\n","export function createStyleTag(style: string, nonce?: string): HTMLStyleElement {\n  const tipTapStyleTag = (<HTMLStyleElement>document.querySelector('style[data-tiptap-style]'))\n\n  if (tipTapStyleTag !== null) {\n    return tipTapStyleTag\n  }\n\n  const styleNode = document.createElement('style')\n\n  if (nonce) {\n    styleNode.setAttribute('nonce', nonce)\n  }\n\n  styleNode.setAttribute('data-tiptap-style', '')\n  styleNode.innerHTML = style\n  document.getElementsByTagName('head')[0].appendChild(styleNode)\n\n  return styleNode\n}\n","import { MarkType, NodeType, Schema } from 'prosemirror-model'\nimport {\n  EditorState,\n  Plugin,\n  PluginKey,\n  Transaction,\n} from 'prosemirror-state'\nimport { EditorView } from 'prosemirror-view'\n\nimport { CommandManager } from './CommandManager'\nimport { EventEmitter } from './EventEmitter'\nimport { ExtensionManager } from './ExtensionManager'\nimport * as extensions from './extensions'\nimport { createDocument } from './helpers/createDocument'\nimport { getAttributes } from './helpers/getAttributes'\nimport { getHTMLFromFragment } from './helpers/getHTMLFromFragment'\nimport { getText } from './helpers/getText'\nimport { getTextSerializersFromSchema } from './helpers/getTextSerializersFromSchema'\nimport { isActive } from './helpers/isActive'\nimport { isNodeEmpty } from './helpers/isNodeEmpty'\nimport { resolveFocusPosition } from './helpers/resolveFocusPosition'\nimport { style } from './style'\nimport {\n  CanCommands,\n  ChainedCommands,\n  EditorEvents,\n  EditorOptions,\n  JSONContent,\n  SingleCommands,\n  TextSerializer,\n} from './types'\nimport { createStyleTag } from './utilities/createStyleTag'\nimport { isFunction } from './utilities/isFunction'\n\nexport { extensions }\n\nexport interface HTMLElement {\n  editor?: Editor\n}\n\nexport class Editor extends EventEmitter<EditorEvents> {\n\n  private commandManager!: CommandManager\n\n  public extensionManager!: ExtensionManager\n\n  private css!: HTMLStyleElement\n\n  public schema!: Schema\n\n  public view!: EditorView\n\n  public isFocused = false\n\n  public extensionStorage: Record<string, any> = {}\n\n  public options: EditorOptions = {\n    element: document.createElement('div'),\n    content: '',\n    injectCSS: true,\n    injectNonce: undefined,\n    extensions: [],\n    autofocus: false,\n    editable: true,\n    editorProps: {},\n    parseOptions: {},\n    enableInputRules: true,\n    enablePasteRules: true,\n    enableCoreExtensions: true,\n    onBeforeCreate: () => null,\n    onCreate: () => null,\n    onUpdate: () => null,\n    onSelectionUpdate: () => null,\n    onTransaction: () => null,\n    onFocus: () => null,\n    onBlur: () => null,\n    onDestroy: () => null,\n  }\n\n  constructor(options: Partial<EditorOptions> = {}) {\n    super()\n    this.setOptions(options)\n    this.createExtensionManager()\n    this.createCommandManager()\n    this.createSchema()\n    this.on('beforeCreate', this.options.onBeforeCreate)\n    this.emit('beforeCreate', { editor: this })\n    this.createView()\n    this.injectCSS()\n    this.on('create', this.options.onCreate)\n    this.on('update', this.options.onUpdate)\n    this.on('selectionUpdate', this.options.onSelectionUpdate)\n    this.on('transaction', this.options.onTransaction)\n    this.on('focus', this.options.onFocus)\n    this.on('blur', this.options.onBlur)\n    this.on('destroy', this.options.onDestroy)\n\n    window.setTimeout(() => {\n      if (this.isDestroyed) {\n        return\n      }\n\n      this.commands.focus(this.options.autofocus)\n      this.emit('create', { editor: this })\n    }, 0)\n  }\n\n  /**\n   * Returns the editor storage.\n   */\n  public get storage(): Record<string, any> {\n    return this.extensionStorage\n  }\n\n  /**\n   * An object of all registered commands.\n   */\n  public get commands(): SingleCommands {\n    return this.commandManager.commands\n  }\n\n  /**\n   * Create a command chain to call multiple commands at once.\n   */\n  public chain(): ChainedCommands {\n    return this.commandManager.chain()\n  }\n\n  /**\n   * Check if a command or a command chain can be executed. Without executing it.\n   */\n  public can(): CanCommands {\n    return this.commandManager.can()\n  }\n\n  /**\n   * Inject CSS styles.\n   */\n  private injectCSS(): void {\n    if (this.options.injectCSS && document) {\n      this.css = createStyleTag(style, this.options.injectNonce)\n    }\n  }\n\n  /**\n   * Update editor options.\n   *\n   * @param options A list of options\n   */\n  public setOptions(options: Partial<EditorOptions> = {}): void {\n    this.options = {\n      ...this.options,\n      ...options,\n    }\n\n    if (!this.view || !this.state || this.isDestroyed) {\n      return\n    }\n\n    if (this.options.editorProps) {\n      this.view.setProps(this.options.editorProps)\n    }\n\n    this.view.updateState(this.state)\n  }\n\n  /**\n   * Update editable state of the editor.\n   */\n  public setEditable(editable: boolean): void {\n    this.setOptions({ editable })\n    this.emit('update', { editor: this, transaction: this.state.tr })\n  }\n\n  /**\n   * Returns whether the editor is editable.\n   */\n  public get isEditable(): boolean {\n    // since plugins are applied after creating the view\n    // `editable` is always `true` for one tick.\n    // that’s why we also have to check for `options.editable`\n    return this.options.editable\n      && this.view\n      && this.view.editable\n  }\n\n  /**\n   * Returns the editor state.\n   */\n  public get state(): EditorState {\n    return this.view.state\n  }\n\n  /**\n   * Register a ProseMirror plugin.\n   *\n   * @param plugin A ProseMirror plugin\n   * @param handlePlugins Control how to merge the plugin into the existing plugins.\n   */\n  public registerPlugin(plugin: Plugin, handlePlugins?: (newPlugin: Plugin, plugins: Plugin[]) => Plugin[]): void {\n    const plugins = isFunction(handlePlugins)\n      ? handlePlugins(plugin, [...this.state.plugins])\n      : [...this.state.plugins, plugin]\n\n    const state = this.state.reconfigure({ plugins })\n\n    this.view.updateState(state)\n  }\n\n  /**\n   * Unregister a ProseMirror plugin.\n   *\n   * @param nameOrPluginKey The plugins name\n   */\n  public unregisterPlugin(nameOrPluginKey: string | PluginKey): void {\n    if (this.isDestroyed) {\n      return\n    }\n\n    const name = typeof nameOrPluginKey === 'string'\n      ? `${nameOrPluginKey}$`\n      // @ts-ignore\n      : nameOrPluginKey.key\n\n    const state = this.state.reconfigure({\n      // @ts-ignore\n      plugins: this.state.plugins.filter(plugin => !plugin.key.startsWith(name)),\n    })\n\n    this.view.updateState(state)\n  }\n\n  /**\n   * Creates an extension manager.\n   */\n  private createExtensionManager(): void {\n    const coreExtensions = this.options.enableCoreExtensions\n      ? Object.values(extensions)\n      : []\n    const allExtensions = [...coreExtensions, ...this.options.extensions].filter(extension => {\n      return ['extension', 'node', 'mark'].includes(extension?.type)\n    })\n\n    this.extensionManager = new ExtensionManager(allExtensions, this)\n  }\n\n  /**\n   * Creates an command manager.\n   */\n  private createCommandManager(): void {\n    this.commandManager = new CommandManager({\n      editor: this,\n    })\n  }\n\n  /**\n   * Creates a ProseMirror schema.\n   */\n  private createSchema(): void {\n    this.schema = this.extensionManager.schema\n  }\n\n  /**\n   * Creates a ProseMirror view.\n   */\n  private createView(): void {\n    const doc = createDocument(this.options.content, this.schema, this.options.parseOptions)\n    const selection = resolveFocusPosition(doc, this.options.autofocus)\n\n    this.view = new EditorView(this.options.element, {\n      ...this.options.editorProps,\n      dispatchTransaction: this.dispatchTransaction.bind(this),\n      state: EditorState.create({\n        doc,\n        selection: selection || undefined,\n      }),\n    })\n\n    // `editor.view` is not yet available at this time.\n    // Therefore we will add all plugins and node views directly afterwards.\n    const newState = this.state.reconfigure({\n      plugins: this.extensionManager.plugins,\n    })\n\n    this.view.updateState(newState)\n\n    this.createNodeViews()\n\n    // Let’s store the editor instance in the DOM element.\n    // So we’ll have access to it for tests.\n    const dom = this.view.dom as HTMLElement\n\n    dom.editor = this\n  }\n\n  /**\n   * Creates all node views.\n   */\n  public createNodeViews(): void {\n    this.view.setProps({\n      nodeViews: this.extensionManager.nodeViews,\n    })\n  }\n\n  public isCapturingTransaction = false\n\n  private capturedTransaction: Transaction | null = null\n\n  public captureTransaction(fn: Function) {\n    this.isCapturingTransaction = true\n    fn()\n    this.isCapturingTransaction = false\n\n    const tr = this.capturedTransaction\n\n    this.capturedTransaction = null\n\n    return tr\n  }\n\n  /**\n   * The callback over which to send transactions (state updates) produced by the view.\n   *\n   * @param transaction An editor state transaction\n   */\n  private dispatchTransaction(transaction: Transaction): void {\n    if (this.isCapturingTransaction) {\n      if (!this.capturedTransaction) {\n        this.capturedTransaction = transaction\n\n        return\n      }\n\n      transaction.steps.forEach(step => this.capturedTransaction?.step(step))\n\n      return\n    }\n\n    const state = this.state.apply(transaction)\n    const selectionHasChanged = !this.state.selection.eq(state.selection)\n\n    this.view.updateState(state)\n    this.emit('transaction', {\n      editor: this,\n      transaction,\n    })\n\n    if (selectionHasChanged) {\n      this.emit('selectionUpdate', {\n        editor: this,\n        transaction,\n      })\n    }\n\n    const focus = transaction.getMeta('focus')\n    const blur = transaction.getMeta('blur')\n\n    if (focus) {\n      this.emit('focus', {\n        editor: this,\n        event: focus.event,\n        transaction,\n      })\n    }\n\n    if (blur) {\n      this.emit('blur', {\n        editor: this,\n        event: blur.event,\n        transaction,\n      })\n    }\n\n    if (!transaction.docChanged || transaction.getMeta('preventUpdate')) {\n      return\n    }\n\n    this.emit('update', {\n      editor: this,\n      transaction,\n    })\n  }\n\n  /**\n   * Get attributes of the currently selected node or mark.\n   */\n  public getAttributes(nameOrType: string | NodeType | MarkType): Record<string, any> {\n    return getAttributes(this.state, nameOrType)\n  }\n\n  /**\n   * Returns if the currently selected node or mark is active.\n   *\n   * @param name Name of the node or mark\n   * @param attributes Attributes of the node or mark\n   */\n  public isActive(name: string, attributes?: {}): boolean;\n  public isActive(attributes: {}): boolean;\n  public isActive(nameOrAttributes: string, attributesOrUndefined?: {}): boolean {\n    const name = typeof nameOrAttributes === 'string'\n      ? nameOrAttributes\n      : null\n\n    const attributes = typeof nameOrAttributes === 'string'\n      ? attributesOrUndefined\n      : nameOrAttributes\n\n    return isActive(this.state, name, attributes)\n  }\n\n  /**\n   * Get the document as JSON.\n   */\n  public getJSON(): JSONContent {\n    return this.state.doc.toJSON()\n  }\n\n  /**\n   * Get the document as HTML.\n   */\n  public getHTML(): string {\n    return getHTMLFromFragment(this.state.doc.content, this.schema)\n  }\n\n  /**\n   * Get the document as text.\n   */\n  public getText(options?: {\n    blockSeparator?: string,\n    textSerializers?: Record<string, TextSerializer>,\n  }): string {\n    const {\n      blockSeparator = '\\n\\n',\n      textSerializers = {},\n    } = options || {}\n\n    return getText(this.state.doc, {\n      blockSeparator,\n      textSerializers: {\n        ...textSerializers,\n        ...getTextSerializersFromSchema(this.schema),\n      },\n    })\n  }\n\n  /**\n   * Check if there is no content.\n   */\n  public get isEmpty(): boolean {\n    return isNodeEmpty(this.state.doc)\n  }\n\n  /**\n   * Get the number of characters for the current document.\n   *\n   * @deprecated\n   */\n  public getCharacterCount(): number {\n    console.warn('[tiptap warn]: \"editor.getCharacterCount()\" is deprecated. Please use \"editor.storage.characterCount.characters()\" instead.')\n\n    return this.state.doc.content.size - 2\n  }\n\n  /**\n   * Destroy the editor.\n   */\n  public destroy(): void {\n    this.emit('destroy')\n\n    if (this.view) {\n      this.view.destroy()\n    }\n\n    this.removeAllListeners()\n  }\n\n  /**\n   * Check if the editor is already destroyed.\n   */\n  public get isDestroyed(): boolean {\n    // @ts-ignore\n    return !this.view?.docView\n  }\n\n}\n","import { Node as ProseMirrorNode } from 'prosemirror-model'\nimport { Transaction } from 'prosemirror-state'\nimport { Transform } from 'prosemirror-transform'\n\n/**\n * Returns a new `Transform` based on all steps of the passed transactions.\n */\nexport function combineTransactionSteps(oldDoc: ProseMirrorNode, transactions: Transaction[]): Transform {\n  const transform = new Transform(oldDoc)\n\n  transactions.forEach(transaction => {\n    transaction.steps.forEach(step => {\n      transform.step(step)\n    })\n  })\n\n  return transform\n}\n","import { Node as ProseMirrorNode } from 'prosemirror-model'\n\nimport { NodeWithPos, Predicate } from '../types'\n\nexport function findChildren(node: ProseMirrorNode, predicate: Predicate): NodeWithPos[] {\n  const nodesWithPos: NodeWithPos[] = []\n\n  node.descendants((child, pos) => {\n    if (predicate(child)) {\n      nodesWithPos.push({\n        node: child,\n        pos,\n      })\n    }\n  })\n\n  return nodesWithPos\n}\n","import { Node as ProseMirrorNode } from 'prosemirror-model'\n\nimport { NodeWithPos, Predicate, Range } from '../types'\n\n/**\n * Same as `findChildren` but searches only within a `range`.\n */\nexport function findChildrenInRange(node: ProseMirrorNode, range: Range, predicate: Predicate): NodeWithPos[] {\n  const nodesWithPos: NodeWithPos[] = []\n\n  // if (range.from === range.to) {\n  //   const nodeAt = node.nodeAt(range.from)\n\n  //   if (nodeAt) {\n  //     nodesWithPos.push({\n  //       node: nodeAt,\n  //       pos: range.from,\n  //     })\n  //   }\n  // }\n\n  node.nodesBetween(range.from, range.to, (child, pos) => {\n    if (predicate(child)) {\n      nodesWithPos.push({\n        node: child,\n        pos,\n      })\n    }\n  })\n\n  return nodesWithPos\n}\n","import { Schema } from 'prosemirror-model'\n\nimport { ExtensionManager } from '../ExtensionManager'\nimport { Extensions } from '../types'\nimport { getSchemaByResolvedExtensions } from './getSchemaByResolvedExtensions'\n\nexport function getSchema(extensions: Extensions): Schema {\n  const resolvedExtensions = ExtensionManager.resolve(extensions)\n\n  return getSchemaByResolvedExtensions(resolvedExtensions)\n}\n","import { Node } from 'prosemirror-model'\n\nimport { Extensions, JSONContent } from '../types'\nimport { getHTMLFromFragment } from './getHTMLFromFragment'\nimport { getSchema } from './getSchema'\n\nexport function generateHTML(doc: JSONContent, extensions: Extensions): string {\n  const schema = getSchema(extensions)\n  const contentNode = Node.fromJSON(schema, doc)\n\n  return getHTMLFromFragment(contentNode.content, schema)\n}\n","import { DOMParser } from 'prosemirror-model'\n\nimport { Extensions } from '../types'\nimport { elementFromString } from '../utilities/elementFromString'\nimport { getSchema } from './getSchema'\n\nexport function generateJSON(html: string, extensions: Extensions): Record<string, any> {\n  const schema = getSchema(extensions)\n  const dom = elementFromString(html)\n\n  return DOMParser.fromSchema(schema)\n    .parse(dom)\n    .toJSON()\n}\n","import { Node } from 'prosemirror-model'\n\nimport { Extensions, JSONContent, TextSerializer } from '../types'\nimport { getSchema } from './getSchema'\nimport { getText } from './getText'\nimport { getTextSerializersFromSchema } from './getTextSerializersFromSchema'\n\nexport function generateText(\n  doc: JSONContent,\n  extensions: Extensions,\n  options?: {\n    blockSeparator?: string,\n    textSerializers?: Record<string, TextSerializer>,\n  },\n): string {\n  const {\n    blockSeparator = '\\n\\n',\n    textSerializers = {},\n  } = options || {}\n  const schema = getSchema(extensions)\n  const contentNode = Node.fromJSON(schema, doc)\n\n  return getText(contentNode, {\n    blockSeparator,\n    textSerializers: {\n      ...textSerializers,\n      ...getTextSerializersFromSchema(schema),\n    },\n  })\n}\n","/**\n * Removes duplicated values within an array.\n * Supports numbers, strings and objects.\n */\nexport function removeDuplicates<T>(array: T[], by = JSON.stringify): T[] {\n  const seen: Record<any, any> = {}\n\n  return array.filter(item => {\n    const key = by(item)\n\n    return Object.prototype.hasOwnProperty.call(seen, key)\n      ? false\n      : (seen[key] = true)\n  })\n}\n","import { Step, Transform } from 'prosemirror-transform'\n\nimport { Range } from '../types'\nimport { removeDuplicates } from '../utilities/removeDuplicates'\n\nexport type ChangedRange = {\n  oldRange: Range,\n  newRange: Range,\n}\n\n/**\n * Removes duplicated ranges and ranges that are\n * fully captured by other ranges.\n */\nfunction simplifyChangedRanges(changes: ChangedRange[]): ChangedRange[] {\n  const uniqueChanges = removeDuplicates(changes)\n\n  return uniqueChanges.length === 1\n    ? uniqueChanges\n    : uniqueChanges.filter((change, index) => {\n      const rest = uniqueChanges.filter((_, i) => i !== index)\n\n      return !rest.some(otherChange => {\n        return change.oldRange.from >= otherChange.oldRange.from\n          && change.oldRange.to <= otherChange.oldRange.to\n          && change.newRange.from >= otherChange.newRange.from\n          && change.newRange.to <= otherChange.newRange.to\n      })\n    })\n}\n\n/**\n * Returns a list of changed ranges\n * based on the first and last state of all steps.\n */\nexport function getChangedRanges(transform: Transform): ChangedRange[] {\n  const { mapping, steps } = transform\n  const changes: ChangedRange[] = []\n\n  mapping.maps.forEach((stepMap, index) => {\n    const ranges: Range[] = []\n\n    // This accounts for step changes where no range was actually altered\n    // e.g. when setting a mark, node attribute, etc.\n    // @ts-ignore\n    if (!stepMap.ranges.length) {\n      const { from, to } = steps[index] as Step & {\n        from?: number,\n        to?: number,\n      }\n\n      if (from === undefined || to === undefined) {\n        return\n      }\n\n      ranges.push({ from, to })\n    } else {\n      stepMap.forEach((from, to) => {\n        ranges.push({ from, to })\n      })\n    }\n\n    ranges.forEach(({ from, to }) => {\n      const newStart = mapping.slice(index).map(from, -1)\n      const newEnd = mapping.slice(index).map(to)\n      const oldStart = mapping.invert().map(newStart, -1)\n      const oldEnd = mapping.invert().map(newEnd)\n\n      changes.push({\n        oldRange: {\n          from: oldStart,\n          to: oldEnd,\n        },\n        newRange: {\n          from: newStart,\n          to: newEnd,\n        },\n      })\n    })\n  })\n\n  return simplifyChangedRanges(changes)\n}\n","import { Node as ProseMirrorNode } from 'prosemirror-model'\n\nimport { JSONContent } from '../types'\n\ninterface DebugJSONContent extends JSONContent {\n  from: number,\n  to: number,\n}\n\nexport function getDebugJSON(node: ProseMirrorNode, startOffset = 0): DebugJSONContent {\n  const isTopNode = node.type === node.type.schema.topNodeType\n  const increment = isTopNode ? 0 : 1\n  const from = startOffset\n  const to = from + node.nodeSize\n  const marks = node.marks.map(mark => {\n    const output: { type: string, attrs?: Record<string, any> } = {\n      type: mark.type.name,\n    }\n\n    if (Object.keys(mark.attrs).length) {\n      output.attrs = { ...mark.attrs }\n    }\n\n    return output\n  })\n  const attrs = { ...node.attrs }\n  const output: DebugJSONContent = {\n    type: node.type.name,\n    from,\n    to,\n  }\n\n  if (Object.keys(attrs).length) {\n    output.attrs = attrs\n  }\n\n  if (marks.length) {\n    output.marks = marks\n  }\n\n  if (node.content.childCount) {\n    output.content = []\n\n    node.forEach((child, offset) => {\n      output.content?.push(getDebugJSON(child, startOffset + offset + increment))\n    })\n  }\n\n  if (node.text) {\n    output.text = node.text\n  }\n\n  return output\n}\n","import { Node as ProseMirrorNode } from 'prosemirror-model'\n\nimport { MarkRange } from '../types'\nimport { getMarkRange } from './getMarkRange'\n\nexport function getMarksBetween(from: number, to: number, doc: ProseMirrorNode): MarkRange[] {\n  const marks: MarkRange[] = []\n\n  // get all inclusive marks on empty selection\n  if (from === to) {\n    doc\n      .resolve(from)\n      .marks()\n      .forEach(mark => {\n        const $pos = doc.resolve(from - 1)\n        const range = getMarkRange($pos, mark.type)\n\n        if (!range) {\n          return\n        }\n\n        marks.push({\n          mark,\n          ...range,\n        })\n      })\n  } else {\n    doc.nodesBetween(from, to, (node, pos) => {\n      marks.push(...node.marks.map(mark => ({\n        from: pos,\n        to: pos + node.nodeSize,\n        mark,\n      })))\n    })\n  }\n\n  return marks\n}\n","import { NodeSelection } from 'prosemirror-state'\n\nexport function isNodeSelection(value: unknown): value is NodeSelection {\n  return value instanceof NodeSelection\n}\n","import { EditorView } from 'prosemirror-view'\n\nimport { minMax } from '../utilities/minMax'\n\nexport function posToDOMRect(view: EditorView, from: number, to: number): DOMRect {\n  const minPos = 0\n  const maxPos = view.state.doc.content.size\n  const resolvedFrom = minMax(from, minPos, maxPos)\n  const resolvedEnd = minMax(to, minPos, maxPos)\n  const start = view.coordsAtPos(resolvedFrom)\n  const end = view.coordsAtPos(resolvedEnd, -1)\n  const top = Math.min(start.top, end.top)\n  const bottom = Math.max(start.bottom, end.bottom)\n  const left = Math.min(start.left, end.left)\n  const right = Math.max(start.right, end.right)\n  const width = right - left\n  const height = bottom - top\n  const x = left\n  const y = top\n  const data = {\n    top,\n    bottom,\n    left,\n    right,\n    width,\n    height,\n    x,\n    y,\n  }\n\n  return {\n    ...data,\n    toJSON: () => data,\n  }\n}\n","import { MarkType } from 'prosemirror-model'\n\nimport { getMarksBetween } from '../helpers/getMarksBetween'\nimport { InputRule, InputRuleFinder } from '../InputRule'\nimport { ExtendedRegExpMatchArray } from '../types'\nimport { callOrReturn } from '../utilities/callOrReturn'\n\n/**\n * Build an input rule that adds a mark when the\n * matched text is typed into it.\n */\nexport function markInputRule(config: {\n  find: InputRuleFinder,\n  type: MarkType,\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null\n  ,\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match)\n\n      if (attributes === false || attributes === null) {\n        return null\n      }\n\n      const { tr } = state\n      const captureGroup = match[match.length - 1]\n      const fullMatch = match[0]\n      let markEnd = range.to\n\n      if (captureGroup) {\n        const startSpaces = fullMatch.search(/\\S/)\n        const textStart = range.from + fullMatch.indexOf(captureGroup)\n        const textEnd = textStart + captureGroup.length\n\n        const excludedMarks = getMarksBetween(range.from, range.to, state.doc)\n          .filter(item => {\n            // @ts-ignore\n            const excluded = item.mark.type.excluded as MarkType[]\n\n            return excluded.find(type => type === config.type && type !== item.mark.type)\n          })\n          .filter(item => item.to > textStart)\n\n        if (excludedMarks.length) {\n          return null\n        }\n\n        if (textEnd < range.to) {\n          tr.delete(textEnd, range.to)\n        }\n\n        if (textStart > range.from) {\n          tr.delete(range.from + startSpaces, textStart)\n        }\n\n        markEnd = range.from + startSpaces + captureGroup.length\n\n        tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}))\n\n        tr.removeStoredMark(config.type)\n      }\n    },\n  })\n}\n","import { NodeType } from 'prosemirror-model'\n\nimport { InputRule, InputRuleFinder } from '../InputRule'\nimport { ExtendedRegExpMatchArray } from '../types'\nimport { callOrReturn } from '../utilities/callOrReturn'\n\n/**\n * Build an input rule that adds a node when the\n * matched text is typed into it.\n */\nexport function nodeInputRule(config: {\n  find: InputRuleFinder,\n  type: NodeType,\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null\n  ,\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match) || {}\n      const { tr } = state\n      const start = range.from\n      let end = range.to\n\n      if (match[1]) {\n        const offset = match[0].lastIndexOf(match[1])\n        let matchStart = start + offset\n\n        if (matchStart > end) {\n          matchStart = end\n        } else {\n          end = matchStart + match[1].length\n        }\n\n        // insert last typed character\n        const lastChar = match[0][match[0].length - 1]\n\n        tr.insertText(lastChar, start + match[0].length - 1)\n\n        // insert node from input rule\n        tr.replaceWith(matchStart, end, config.type.create(attributes))\n      } else if (match[0]) {\n        tr.replaceWith(start, end, config.type.create(attributes))\n      }\n    },\n  })\n}\n","import { NodeType } from 'prosemirror-model'\n\nimport { InputRule, InputRuleFinder } from '../InputRule'\nimport { ExtendedRegExpMatchArray } from '../types'\nimport { callOrReturn } from '../utilities/callOrReturn'\n\n/**\n * Build an input rule that changes the type of a textblock when the\n * matched text is typed into it. When using a regular expresion you’ll\n * probably want the regexp to start with `^`, so that the pattern can\n * only occur at the start of a textblock.\n */\nexport function textblockTypeInputRule(config: {\n  find: InputRuleFinder,\n  type: NodeType,\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null\n  ,\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      const $start = state.doc.resolve(range.from)\n      const attributes = callOrReturn(config.getAttributes, undefined, match) || {}\n\n      if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), config.type)) {\n        return null\n      }\n\n      state.tr\n        .delete(range.from, range.to)\n        .setBlockType(range.from, range.from, config.type, attributes)\n    },\n  })\n}\n","import { InputRule, InputRuleFinder } from '../InputRule'\n\n/**\n * Build an input rule that replaces text when the\n * matched text is typed into it.\n */\nexport function textInputRule(config: {\n  find: InputRuleFinder,\n  replace: string,\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      let insert = config.replace\n      let start = range.from\n      const end = range.to\n\n      if (match[1]) {\n        const offset = match[0].lastIndexOf(match[1])\n\n        insert += match[0].slice(offset + match[1].length)\n        start += offset\n\n        const cutOff = start - end\n\n        if (cutOff > 0) {\n          insert = match[0].slice(offset - cutOff, offset) + insert\n          start = end\n        }\n      }\n\n      state.tr.insertText(insert, start, end)\n    },\n  })\n}\n","import { Node as ProseMirrorNode, NodeType } from 'prosemirror-model'\nimport { canJoin, findWrapping } from 'prosemirror-transform'\n\nimport { InputRule, InputRuleFinder } from '../InputRule'\nimport { ExtendedRegExpMatchArray } from '../types'\nimport { callOrReturn } from '../utilities/callOrReturn'\n\n/**\n * Build an input rule for automatically wrapping a textblock when a\n * given string is typed. When using a regular expresion you’ll\n * probably want the regexp to start with `^`, so that the pattern can\n * only occur at the start of a textblock.\n *\n * `type` is the type of node to wrap in.\n *\n * By default, if there’s a node with the same type above the newly\n * wrapped node, the rule will try to join those\n * two nodes. You can pass a join predicate, which takes a regular\n * expression match and the node before the wrapped node, and can\n * return a boolean to indicate whether a join should happen.\n */\nexport function wrappingInputRule(config: {\n  find: InputRuleFinder,\n  type: NodeType,\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null\n  ,\n  joinPredicate?: (match: ExtendedRegExpMatchArray, node: ProseMirrorNode) => boolean,\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match) || {}\n      const tr = state.tr.delete(range.from, range.to)\n      const $start = tr.doc.resolve(range.from)\n      const blockRange = $start.blockRange()\n      const wrapping = blockRange && findWrapping(blockRange, config.type, attributes)\n\n      if (!wrapping) {\n        return null\n      }\n\n      tr.wrap(blockRange, wrapping)\n\n      const before = tr.doc.resolve(range.from - 1).nodeBefore\n\n      if (\n        before\n        && before.type === config.type\n        && canJoin(tr.doc, range.from - 1)\n        && (!config.joinPredicate || config.joinPredicate(match, before))\n      ) {\n        tr.join(range.from - 1)\n      }\n    },\n  })\n}\n","import {\n  DOMOutputSpec,\n  Mark as ProseMirrorMark,\n  MarkSpec,\n  MarkType,\n} from 'prosemirror-model'\nimport { Plugin, Transaction } from 'prosemirror-state'\n\nimport { MarkConfig } from '.'\nimport { Editor } from './Editor'\nimport { getExtensionField } from './helpers/getExtensionField'\nimport { InputRule } from './InputRule'\nimport { Node } from './Node'\nimport { PasteRule } from './PasteRule'\nimport {\n  AnyConfig,\n  Attributes,\n  Extensions,\n  GlobalAttributes,\n  KeyboardShortcutCommand,\n  ParentConfig,\n  RawCommands,\n} from './types'\nimport { callOrReturn } from './utilities/callOrReturn'\nimport { mergeDeep } from './utilities/mergeDeep'\n\ndeclare module '@tiptap/core' {\n  export interface MarkConfig<Options = any, Storage = any> {\n    [key: string]: any;\n\n    /**\n     * Name\n     */\n    name: string,\n\n    /**\n     * Priority\n     */\n    priority?: number,\n\n    /**\n     * Default options\n     */\n    defaultOptions?: Options,\n\n    /**\n     * Default Options\n     */\n    addOptions?: (this: {\n      name: string,\n      parent: Exclude<ParentConfig<MarkConfig<Options, Storage>>['addOptions'], undefined>,\n    }) => Options,\n\n    /**\n     * Default Storage\n     */\n    addStorage?: (this: {\n      name: string,\n      options: Options,\n      parent: Exclude<ParentConfig<MarkConfig<Options, Storage>>['addStorage'], undefined>,\n    }) => Storage,\n\n    /**\n     * Global attributes\n     */\n    addGlobalAttributes?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addGlobalAttributes'],\n    }) => GlobalAttributes | {},\n\n    /**\n     * Raw\n     */\n    addCommands?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addCommands'],\n    }) => Partial<RawCommands>,\n\n    /**\n     * Keyboard shortcuts\n     */\n    addKeyboardShortcuts?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addKeyboardShortcuts'],\n    }) => {\n      [key: string]: KeyboardShortcutCommand,\n    },\n\n    /**\n     * Input rules\n     */\n    addInputRules?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addInputRules'],\n    }) => InputRule[],\n\n    /**\n     * Paste rules\n     */\n    addPasteRules?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addPasteRules'],\n    }) => PasteRule[],\n\n    /**\n     * ProseMirror plugins\n     */\n    addProseMirrorPlugins?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addProseMirrorPlugins'],\n    }) => Plugin[],\n\n    /**\n     * Extensions\n     */\n    addExtensions?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addExtensions'],\n    }) => Extensions,\n\n    /**\n     * Extend Node Schema\n     */\n    extendNodeSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['extendNodeSchema'],\n      },\n      extension: Node,\n    ) => Record<string, any>) | null,\n\n    /**\n     * Extend Mark Schema\n     */\n    extendMarkSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['extendMarkSchema'],\n      },\n      extension: Mark,\n    ) => Record<string, any>) | null,\n\n    /**\n     * The editor is not ready yet.\n     */\n    onBeforeCreate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['onBeforeCreate'],\n    }) => void) | null,\n\n    /**\n     * The editor is ready.\n     */\n    onCreate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['onCreate'],\n    }) => void) | null,\n\n    /**\n     * The content has changed.\n     */\n    onUpdate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['onUpdate'],\n    }) => void) | null,\n\n    /**\n     * The selection has changed.\n     */\n    onSelectionUpdate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['onSelectionUpdate'],\n    }) => void) | null,\n\n    /**\n     * The editor state has changed.\n     */\n    onTransaction?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        type: MarkType,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['onTransaction'],\n      },\n      props: {\n        transaction: Transaction,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is focused.\n     */\n    onFocus?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        type: MarkType,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['onFocus'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor isn’t focused anymore.\n     */\n    onBlur?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        type: MarkType,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['onBlur'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is destroyed.\n     */\n    onDestroy?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['onDestroy'],\n    }) => void) | null,\n\n    /**\n     * Keep mark after split node\n     */\n    keepOnSplit?: boolean | (() => boolean),\n\n    /**\n     * Inclusive\n     */\n    inclusive?: MarkSpec['inclusive'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['inclusive'],\n    }) => MarkSpec['inclusive']),\n\n    /**\n     * Excludes\n     */\n    excludes?: MarkSpec['excludes'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['excludes'],\n    }) => MarkSpec['excludes']),\n\n    /**\n     * Marks this Mark as exitable\n     */\n    exitable?: boolean | (() => boolean),\n\n    /**\n     * Group\n     */\n    group?: MarkSpec['group'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['group'],\n    }) => MarkSpec['group']),\n\n    /**\n     * Spanning\n     */\n    spanning?: MarkSpec['spanning'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['spanning'],\n    }) => MarkSpec['spanning']),\n\n    /**\n     * Code\n     */\n    code?: boolean | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['code'],\n    }) => boolean),\n\n    /**\n     * Parse HTML\n     */\n    parseHTML?: (\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['parseHTML'],\n      },\n    ) => MarkSpec['parseDOM'],\n\n    /**\n     * Render HTML\n     */\n    renderHTML?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['renderHTML'],\n      },\n      props: {\n        mark: ProseMirrorMark,\n        HTMLAttributes: Record<string, any>,\n      },\n    ) => DOMOutputSpec) | null,\n\n    /**\n     * Attributes\n     */\n    addAttributes?: (\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['addAttributes'],\n      },\n    ) => Attributes | {},\n  }\n}\n\nexport class Mark<Options = any, Storage = any> {\n  type = 'mark'\n\n  name = 'mark'\n\n  parent: Mark | null = null\n\n  child: Mark | null = null\n\n  options: Options\n\n  storage: Storage\n\n  config: MarkConfig = {\n    name: this.name,\n    defaultOptions: {},\n  }\n\n  constructor(config: Partial<MarkConfig<Options, Storage>> = {}) {\n    this.config = {\n      ...this.config,\n      ...config,\n    }\n\n    this.name = this.config.name\n\n    if (config.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`)\n    }\n\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions\n\n    if (this.config.addOptions) {\n      this.options = callOrReturn(getExtensionField<AnyConfig['addOptions']>(\n        this,\n        'addOptions',\n        {\n          name: this.name,\n        },\n      ))\n    }\n\n    this.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      this,\n      'addStorage',\n      {\n        name: this.name,\n        options: this.options,\n      },\n    )) || {}\n  }\n\n  static create<O = any, S = any>(config: Partial<MarkConfig<O, S>> = {}) {\n    return new Mark<O, S>(config)\n  }\n\n  configure(options: Partial<Options> = {}) {\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend()\n\n    extension.options = mergeDeep(this.options, options) as Options\n\n    extension.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      extension,\n      'addStorage',\n      {\n        name: extension.name,\n        options: extension.options,\n      },\n    ))\n\n    return extension\n  }\n\n  extend<ExtendedOptions = Options, ExtendedStorage = Storage>(extendedConfig: Partial<MarkConfig<ExtendedOptions, ExtendedStorage>> = {}) {\n    const extension = new Mark<ExtendedOptions, ExtendedStorage>(extendedConfig)\n\n    extension.parent = this\n\n    this.child = extension\n\n    extension.name = extendedConfig.name\n      ? extendedConfig.name\n      : extension.parent.name\n\n    if (extendedConfig.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`)\n    }\n\n    extension.options = callOrReturn(getExtensionField<AnyConfig['addOptions']>(\n      extension,\n      'addOptions',\n      {\n        name: extension.name,\n      },\n    ))\n\n    extension.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      extension,\n      'addStorage',\n      {\n        name: extension.name,\n        options: extension.options,\n      },\n    ))\n\n    return extension\n  }\n\n  static handleExit({\n    editor,\n    mark,\n  }: {\n    editor: Editor\n    mark: Mark\n  }) {\n    const { tr } = editor.state\n    const currentPos = editor.state.selection.$from\n    const isAtEnd = currentPos.pos === currentPos.end()\n\n    if (isAtEnd) {\n      const currentMarks = currentPos.marks()\n      const isInMark = !!currentMarks.find(m => m?.type.name === mark.name)\n\n      if (!isInMark) {\n        return false\n      }\n\n      const removeMark = currentMarks.find(m => m?.type.name === mark.name)\n\n      if (removeMark) {\n        tr.removeStoredMark(removeMark)\n      }\n      tr.insertText(' ', currentPos.pos)\n\n      editor.view.dispatch(tr)\n\n      return true\n    }\n\n    return false\n  }\n}\n","import {\n  DOMOutputSpec,\n  Node as ProseMirrorNode,\n  NodeSpec,\n  NodeType,\n} from 'prosemirror-model'\nimport { Plugin, Transaction } from 'prosemirror-state'\n\nimport { NodeConfig } from '.'\nimport { Editor } from './Editor'\nimport { getExtensionField } from './helpers/getExtensionField'\nimport { InputRule } from './InputRule'\nimport { PasteRule } from './PasteRule'\nimport {\n  AnyConfig,\n  Attributes,\n  Extensions,\n  GlobalAttributes,\n  KeyboardShortcutCommand,\n  NodeViewRenderer,\n  ParentConfig,\n  RawCommands,\n} from './types'\nimport { callOrReturn } from './utilities/callOrReturn'\nimport { mergeDeep } from './utilities/mergeDeep'\n\ndeclare module '@tiptap/core' {\n  interface NodeConfig<Options = any, Storage = any> {\n    [key: string]: any;\n\n    /**\n     * Name\n     */\n    name: string,\n\n    /**\n     * Priority\n     */\n    priority?: number,\n\n    /**\n     * Default options\n     */\n    defaultOptions?: Options,\n\n    /**\n     * Default Options\n     */\n    addOptions?: (this: {\n      name: string,\n      parent: Exclude<ParentConfig<NodeConfig<Options, Storage>>['addOptions'], undefined>,\n    }) => Options,\n\n    /**\n     * Default Storage\n     */\n    addStorage?: (this: {\n      name: string,\n      options: Options,\n      parent: Exclude<ParentConfig<NodeConfig<Options, Storage>>['addStorage'], undefined>,\n    }) => Storage,\n\n    /**\n     * Global attributes\n     */\n    addGlobalAttributes?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addGlobalAttributes'],\n    }) => GlobalAttributes | {},\n\n    /**\n     * Raw\n     */\n    addCommands?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addCommands'],\n    }) => Partial<RawCommands>,\n\n    /**\n     * Keyboard shortcuts\n     */\n    addKeyboardShortcuts?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addKeyboardShortcuts'],\n    }) => {\n      [key: string]: KeyboardShortcutCommand,\n    },\n\n    /**\n     * Input rules\n     */\n    addInputRules?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addInputRules'],\n    }) => InputRule[],\n\n    /**\n     * Paste rules\n     */\n    addPasteRules?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addPasteRules'],\n    }) => PasteRule[],\n\n    /**\n     * ProseMirror plugins\n     */\n    addProseMirrorPlugins?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addProseMirrorPlugins'],\n    }) => Plugin[],\n\n    /**\n     * Extensions\n     */\n    addExtensions?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addExtensions'],\n    }) => Extensions,\n\n    /**\n     * Extend Node Schema\n     */\n    extendNodeSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['extendNodeSchema'],\n      },\n      extension: Node,\n    ) => Record<string, any>) | null,\n\n    /**\n     * Extend Mark Schema\n     */\n    extendMarkSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['extendMarkSchema'],\n      },\n      extension: Node,\n    ) => Record<string, any>) | null,\n\n    /**\n     * The editor is not ready yet.\n     */\n    onBeforeCreate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['onBeforeCreate'],\n    }) => void) | null,\n\n    /**\n     * The editor is ready.\n     */\n    onCreate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['onCreate'],\n    }) => void) | null,\n\n    /**\n     * The content has changed.\n     */\n    onUpdate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['onUpdate'],\n    }) => void) | null,\n\n    /**\n     * The selection has changed.\n     */\n    onSelectionUpdate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['onSelectionUpdate'],\n    }) => void) | null,\n\n    /**\n     * The editor state has changed.\n     */\n    onTransaction?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        type: NodeType,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['onTransaction'],\n      },\n      props: {\n        transaction: Transaction,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is focused.\n     */\n    onFocus?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        type: NodeType,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['onFocus'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor isn’t focused anymore.\n     */\n    onBlur?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        type: NodeType,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['onBlur'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is destroyed.\n     */\n    onDestroy?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['onDestroy'],\n    }) => void) | null,\n\n    /**\n     * Node View\n     */\n    addNodeView?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addNodeView'],\n    }) => NodeViewRenderer) | null,\n\n    /**\n     * TopNode\n     */\n    topNode?: boolean,\n\n    /**\n     * Content\n     */\n    content?: NodeSpec['content'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['content'],\n    }) => NodeSpec['content']),\n\n    /**\n     * Marks\n     */\n    marks?: NodeSpec['marks'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['marks'],\n    }) => NodeSpec['marks']),\n\n    /**\n     * Group\n     */\n    group?: NodeSpec['group'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['group'],\n    }) => NodeSpec['group']),\n\n    /**\n     * Inline\n     */\n    inline?: NodeSpec['inline'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['inline'],\n    }) => NodeSpec['inline']),\n\n    /**\n     * Atom\n     */\n    atom?: NodeSpec['atom'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['atom'],\n    }) => NodeSpec['atom']),\n\n    /**\n     * Selectable\n     */\n    selectable?: NodeSpec['selectable'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['selectable'],\n    }) => NodeSpec['selectable']),\n\n    /**\n     * Draggable\n     */\n    draggable?: NodeSpec['draggable'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['draggable'],\n    }) => NodeSpec['draggable']),\n\n    /**\n     * Code\n     */\n    code?: NodeSpec['code'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['code'],\n    }) => NodeSpec['code']),\n\n    /**\n     * Whitespace\n     */\n    whitespace?: NodeSpec['whitespace'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['whitespace'],\n    }) => NodeSpec['whitespace']),\n\n    /**\n     * Defining\n     */\n    defining?: NodeSpec['defining'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['defining'],\n    }) => NodeSpec['defining']),\n\n    /**\n     * Isolating\n     */\n    isolating?: NodeSpec['isolating'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['isolating'],\n    }) => NodeSpec['isolating']),\n\n    /**\n     * Parse HTML\n     */\n    parseHTML?: (\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['parseHTML'],\n      },\n    ) => NodeSpec['parseDOM'],\n\n    /**\n     * Render HTML\n     */\n    renderHTML?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['renderHTML'],\n      },\n      props: {\n        node: ProseMirrorNode,\n        HTMLAttributes: Record<string, any>,\n      }\n    ) => DOMOutputSpec) | null,\n\n    /**\n     * Render Text\n     */\n    renderText?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['renderText'],\n      },\n      props: {\n        node: ProseMirrorNode,\n        pos: number,\n        parent: ProseMirrorNode,\n        index: number,\n      }\n    ) => string) | null,\n\n    /**\n     * Add Attributes\n     */\n    addAttributes?: (\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['addAttributes'],\n      },\n    ) => Attributes | {},\n  }\n}\n\nexport class Node<Options = any, Storage = any> {\n  type = 'node'\n\n  name = 'node'\n\n  parent: Node | null = null\n\n  child: Node | null = null\n\n  options: Options\n\n  storage: Storage\n\n  config: NodeConfig = {\n    name: this.name,\n    defaultOptions: {},\n  }\n\n  constructor(config: Partial<NodeConfig<Options, Storage>> = {}) {\n    this.config = {\n      ...this.config,\n      ...config,\n    }\n\n    this.name = this.config.name\n\n    if (config.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`)\n    }\n\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions\n\n    if (this.config.addOptions) {\n      this.options = callOrReturn(getExtensionField<AnyConfig['addOptions']>(\n        this,\n        'addOptions',\n        {\n          name: this.name,\n        },\n      ))\n    }\n\n    this.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      this,\n      'addStorage',\n      {\n        name: this.name,\n        options: this.options,\n      },\n    )) || {}\n  }\n\n  static create<O = any, S = any>(config: Partial<NodeConfig<O, S>> = {}) {\n    return new Node<O, S>(config)\n  }\n\n  configure(options: Partial<Options> = {}) {\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend()\n\n    extension.options = mergeDeep(this.options, options) as Options\n\n    extension.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      extension,\n      'addStorage',\n      {\n        name: extension.name,\n        options: extension.options,\n      },\n    ))\n\n    return extension\n  }\n\n  extend<ExtendedOptions = Options, ExtendedStorage = Storage>(extendedConfig: Partial<NodeConfig<ExtendedOptions, ExtendedStorage>> = {}) {\n    const extension = new Node<ExtendedOptions, ExtendedStorage>(extendedConfig)\n\n    extension.parent = this\n\n    this.child = extension\n\n    extension.name = extendedConfig.name\n      ? extendedConfig.name\n      : extension.parent.name\n\n    if (extendedConfig.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`)\n    }\n\n    extension.options = callOrReturn(getExtensionField<AnyConfig['addOptions']>(\n      extension,\n      'addOptions',\n      {\n        name: extension.name,\n      },\n    ))\n\n    extension.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      extension,\n      'addStorage',\n      {\n        name: extension.name,\n        options: extension.options,\n      },\n    ))\n\n    return extension\n  }\n}\n","import { Node as ProseMirrorNode } from 'prosemirror-model'\nimport { NodeSelection } from 'prosemirror-state'\nimport { Decoration, NodeView as ProseMirrorNodeView } from 'prosemirror-view'\n\nimport { Editor as CoreEditor } from './Editor'\nimport { Node } from './Node'\nimport { NodeViewRendererOptions, NodeViewRendererProps } from './types'\nimport { isiOS } from './utilities/isiOS'\n\nexport class NodeView<\n  Component,\n  Editor extends CoreEditor = CoreEditor,\n  Options extends NodeViewRendererOptions = NodeViewRendererOptions,\n> implements ProseMirrorNodeView {\n\n  component: Component\n\n  editor: Editor\n\n  options: Options\n\n  extension: Node\n\n  node: ProseMirrorNode\n\n  decorations: Decoration[]\n\n  getPos: any\n\n  isDragging = false\n\n  constructor(component: Component, props: NodeViewRendererProps, options?: Partial<Options>) {\n    this.component = component\n    this.editor = props.editor as Editor\n    this.options = {\n      stopEvent: null,\n      ignoreMutation: null,\n      ...options,\n    } as Options\n    this.extension = props.extension\n    this.node = props.node\n    this.decorations = props.decorations\n    this.getPos = props.getPos\n    this.mount()\n  }\n\n  mount() {\n    // eslint-disable-next-line\n    return\n  }\n\n  get dom(): HTMLElement {\n    return this.editor.view.dom as HTMLElement\n  }\n\n  get contentDOM(): HTMLElement | null {\n    return null\n  }\n\n  onDragStart(event: DragEvent) {\n    const { view } = this.editor\n    const target = (event.target as HTMLElement)\n\n    // get the drag handle element\n    // `closest` is not available for text nodes so we may have to use its parent\n    const dragHandle = target.nodeType === 3\n      ? target.parentElement?.closest('[data-drag-handle]')\n      : target.closest('[data-drag-handle]')\n\n    if (\n      !this.dom\n      || this.contentDOM?.contains(target)\n      || !dragHandle\n    ) {\n      return\n    }\n\n    let x = 0\n    let y = 0\n\n    // calculate offset for drag element if we use a different drag handle element\n    if (this.dom !== dragHandle) {\n      const domBox = this.dom.getBoundingClientRect()\n      const handleBox = dragHandle.getBoundingClientRect()\n\n      // In React, we have to go through nativeEvent to reach offsetX/offsetY.\n      const offsetX = event.offsetX ?? (event as any).nativeEvent?.offsetX\n      const offsetY = event.offsetY ?? (event as any).nativeEvent?.offsetY\n\n      x = handleBox.x - domBox.x + offsetX\n      y = handleBox.y - domBox.y + offsetY\n    }\n\n    event.dataTransfer?.setDragImage(this.dom, x, y)\n\n    // we need to tell ProseMirror that we want to move the whole node\n    // so we create a NodeSelection\n    const selection = NodeSelection.create(view.state.doc, this.getPos())\n    const transaction = view.state.tr.setSelection(selection)\n\n    view.dispatch(transaction)\n  }\n\n  stopEvent(event: Event) {\n    if (!this.dom) {\n      return false\n    }\n\n    if (typeof this.options.stopEvent === 'function') {\n      return this.options.stopEvent({ event })\n    }\n\n    const target = (event.target as HTMLElement)\n    const isInElement = this.dom.contains(target) && !this.contentDOM?.contains(target)\n\n    // any event from child nodes should be handled by ProseMirror\n    if (!isInElement) {\n      return false\n    }\n\n    const isDropEvent = event.type === 'drop'\n    const isInput = ['INPUT', 'BUTTON', 'SELECT', 'TEXTAREA'].includes(target.tagName)\n      || target.isContentEditable\n\n    // any input event within node views should be ignored by ProseMirror\n    if (isInput && !isDropEvent) {\n      return true\n    }\n\n    const { isEditable } = this.editor\n    const { isDragging } = this\n    const isDraggable = !!this.node.type.spec.draggable\n    const isSelectable = NodeSelection.isSelectable(this.node)\n    const isCopyEvent = event.type === 'copy'\n    const isPasteEvent = event.type === 'paste'\n    const isCutEvent = event.type === 'cut'\n    const isClickEvent = event.type === 'mousedown'\n    const isDragEvent = event.type.startsWith('drag')\n\n    // ProseMirror tries to drag selectable nodes\n    // even if `draggable` is set to `false`\n    // this fix prevents that\n    if (!isDraggable && isSelectable && isDragEvent) {\n      event.preventDefault()\n    }\n\n    if (isDraggable && isDragEvent && !isDragging) {\n      event.preventDefault()\n      return false\n    }\n\n    // we have to store that dragging started\n    if (isDraggable && isEditable && !isDragging && isClickEvent) {\n      const dragHandle = target.closest('[data-drag-handle]')\n      const isValidDragHandle = dragHandle\n        && (this.dom === dragHandle || (this.dom.contains(dragHandle)))\n\n      if (isValidDragHandle) {\n        this.isDragging = true\n\n        document.addEventListener('dragend', () => {\n          this.isDragging = false\n        }, { once: true })\n\n        document.addEventListener('mouseup', () => {\n          this.isDragging = false\n        }, { once: true })\n      }\n    }\n\n    // these events are handled by prosemirror\n    if (\n      isDragging\n      || isDropEvent\n      || isCopyEvent\n      || isPasteEvent\n      || isCutEvent\n      || (isClickEvent && isSelectable)\n    ) {\n      return false\n    }\n\n    return true\n  }\n\n  ignoreMutation(mutation: MutationRecord | { type: 'selection', target: Element }) {\n    if (!this.dom || !this.contentDOM) {\n      return true\n    }\n\n    if (typeof this.options.ignoreMutation === 'function') {\n      return this.options.ignoreMutation({ mutation })\n    }\n\n    // a leaf/atom node is like a black box for ProseMirror\n    // and should be fully handled by the node view\n    if (this.node.isLeaf || this.node.isAtom) {\n      return true\n    }\n\n    // ProseMirror should handle any selections\n    if (mutation.type === 'selection') {\n      return false\n    }\n\n    // try to prevent a bug on iOS that will break node views on enter\n    // this is because ProseMirror can’t preventDispatch on enter\n    // this will lead to a re-render of the node view on enter\n    // see: https://github.com/ueberdosis/tiptap/issues/1214\n    if (\n      this.dom.contains(mutation.target)\n      && mutation.type === 'childList'\n      && isiOS()\n      && this.editor.isFocused\n    ) {\n      const changedNodes = [\n        ...Array.from(mutation.addedNodes),\n        ...Array.from(mutation.removedNodes),\n      ] as HTMLElement[]\n\n      // we’ll check if every changed node is contentEditable\n      // to make sure it’s probably mutated by ProseMirror\n      if (changedNodes.every(node => node.isContentEditable)) {\n        return false\n      }\n    }\n\n    // we will allow mutation contentDOM with attributes\n    // so we can for example adding classes within our node view\n    if (this.contentDOM === mutation.target && mutation.type === 'attributes') {\n      return true\n    }\n\n    // ProseMirror should handle any changes within contentDOM\n    if (this.contentDOM.contains(mutation.target)) {\n      return false\n    }\n\n    return true\n  }\n\n  updateAttributes(attributes: {}) {\n    this.editor.commands.command(({ tr }) => {\n      const pos = this.getPos()\n\n      tr.setNodeMarkup(pos, undefined, {\n        ...this.node.attrs,\n        ...attributes,\n      })\n\n      return true\n    })\n  }\n\n  deleteNode(): void {\n    const from = this.getPos()\n    const to = from + this.node.nodeSize\n\n    this.editor.commands.deleteRange({ from, to })\n  }\n}\n","import { MarkType } from 'prosemirror-model'\n\nimport { getMarksBetween } from '../helpers/getMarksBetween'\nimport { PasteRule, PasteRuleFinder } from '../PasteRule'\nimport { ExtendedRegExpMatchArray } from '../types'\nimport { callOrReturn } from '../utilities/callOrReturn'\n\n/**\n * Build an paste rule that adds a mark when the\n * matched text is pasted into it.\n */\nexport function markPasteRule(config: {\n  find: PasteRuleFinder,\n  type: MarkType,\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null\n  ,\n}) {\n  return new PasteRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match)\n\n      if (attributes === false || attributes === null) {\n        return null\n      }\n\n      const { tr } = state\n      const captureGroup = match[match.length - 1]\n      const fullMatch = match[0]\n      let markEnd = range.to\n\n      if (captureGroup) {\n        const startSpaces = fullMatch.search(/\\S/)\n        const textStart = range.from + fullMatch.indexOf(captureGroup)\n        const textEnd = textStart + captureGroup.length\n\n        const excludedMarks = getMarksBetween(range.from, range.to, state.doc)\n          .filter(item => {\n            // @ts-ignore\n            const excluded = item.mark.type.excluded as MarkType[]\n\n            return excluded.find(type => type === config.type && type !== item.mark.type)\n          })\n          .filter(item => item.to > textStart)\n\n        if (excludedMarks.length) {\n          return null\n        }\n\n        if (textEnd < range.to) {\n          tr.delete(textEnd, range.to)\n        }\n\n        if (textStart > range.from) {\n          tr.delete(range.from + startSpaces, textStart)\n        }\n\n        markEnd = range.from + startSpaces + captureGroup.length\n\n        tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}))\n\n        tr.removeStoredMark(config.type)\n      }\n    },\n  })\n}\n","// source: https://stackoverflow.com/a/6969486\nexport function escapeForRegEx(string: string): string {\n  return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\n}\n","import { NodeType } from 'prosemirror-model'\n\nimport { PasteRule } from '../PasteRule'\nimport { ExtendedRegExpMatchArray } from '../types'\nimport { callOrReturn } from '../utilities'\n\n/**\n * Build an paste rule that adds a node when the\n * matched text is pasted into it.\n */\nexport function nodePasteRule(config: {\n  find: RegExp,\n  type: NodeType,\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null,\n}) {\n  return new PasteRule({\n    find: config.find,\n    handler({ match, chain, range }) {\n      const attributes = callOrReturn(config.getAttributes, undefined, match)\n\n      if (attributes === false || attributes === null) {\n        return null\n      }\n\n      if (match.input) {\n        chain()\n          .deleteRange(range)\n          .insertContent({\n            type: config.type.name,\n            attrs: attributes,\n          })\n      }\n    },\n  })\n}\n","import { PasteRule, PasteRuleFinder } from '../PasteRule'\n\n/**\n * Build an paste rule that replaces text when the\n * matched text is pasted into it.\n */\nexport function textPasteRule(config: {\n  find: PasteRuleFinder,\n  replace: string,\n}) {\n  return new PasteRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      let insert = config.replace\n      let start = range.from\n      const end = range.to\n\n      if (match[1]) {\n        const offset = match[0].lastIndexOf(match[1])\n\n        insert += match[0].slice(offset + match[1].length)\n        start += offset\n\n        const cutOff = start - end\n\n        if (cutOff > 0) {\n          insert = match[0].slice(offset - cutOff, offset) + insert\n          start = end\n        }\n      }\n\n      state.tr.insertText(insert, start, end)\n    },\n  })\n}\n","import { Transaction } from 'prosemirror-state'\n\nexport interface TrackerResult {\n  position: number,\n  deleted: boolean,\n}\n\nexport class Tracker {\n\n  transaction: Transaction\n\n  currentStep: number\n\n  constructor(transaction: Transaction) {\n    this.transaction = transaction\n    this.currentStep = this.transaction.steps.length\n  }\n\n  map(position: number): TrackerResult {\n    let deleted = false\n\n    const mappedPosition = this.transaction.steps\n      .slice(this.currentStep)\n      .reduce((newPosition, step) => {\n        const mapResult = step\n          .getMap()\n          .mapResult(newPosition)\n\n        if (mapResult.deleted) {\n          deleted = true\n        }\n\n        return mapResult.pos\n      }, position)\n\n    return {\n      position: mappedPosition,\n      deleted,\n    }\n  }\n\n}\n"],"names":["Schema","run","Plugin","keymap","PluginKey","liftTarget","originalCreateParagraphNear","originalDeleteSelection","originalExitCode","TextSelection","Selection","Fragment","DOMParser","ReplaceStep","ReplaceAroundStep","originalJoinBackward","originalJoinForward","originalLift","originalLiftEmptyBlock","originalLiftListItem","originalNewlineInCode","originalSelectNodeBackward","originalSelectNodeForward","originalSelectParentNode","originalSelectTextblockEnd","originalSelectTextblockStart","setBlockType","NodeSelection","originalSinkListItem","canSplit","Slice","canJoin","originalWrapIn","originalWrapInList","DOMSerializer","EditorView","EditorState","Transform","Node","findWrapping"],"mappings":"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"}