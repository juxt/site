#_( ;; Allow this script to be executed directly
   "exec" "bb" "--classpath" "$(clojure -Spath -Sdeps '{:deps {io.aviso/pretty {:mvn/version "1.1"}}}')" "$0" "$(readlink -f $(dirname $0)/..)" "$@"
   )

;; Copyright Â© 2021, JUXT LTD.

(ns site
  (:require
   [babashka.curl :as curl]
   [clojure.tools.cli :refer [parse-opts summarize]]
   [clojure.java.io :as io]
   [clojure.java.shell :as sh]
   [cheshire.core :as json]
   [clojure.pprint :refer [pprint]]
   [clojure.edn :as edn]
   [io.aviso.ansi :as ansi]
   [clojure.string :as str])
  (:import
   (java.nio.file Files)
   (java.nio.file.attribute FileAttribute)))

(def ^:dynamic *silent* nil)
(def ^:dynamic *debug* nil)

(def site-root-dir (io/file (first *command-line-args*)))

(defn edn-to-json
  [edn]
  (-> (edn/read-string {:readers {'juxt.site.alpha/as-str pr-str}} edn)
      (json/encode)))

(defn error! [& msg]
  (when-not *silent*
    (apply println (apply str ansi/red-font "fail:" ansi/reset-font) msg)))

(defn error-and-exit! [exit & msg]
  (apply error! msg)
  (System/exit exit))

(defn error-and-usage! [msg opts]
  (error! msg)
  (println "Usage:")
  (println (:summary opts))
  (System/exit 1))

(defn message! [& msg]
  (when-not *silent*
    (apply println (apply str ansi/bold-green-font "site:" ansi/reset-font) msg)))

(def config-file
  (case (System/getProperty "os.name")
    ("Linux" "Mac OS X") (io/file (System/getProperty "user.home") ".config/site/config.edn")
    (error-and-exit! 1 "Unsupported OS")))

(defn file-extension
  [path]
  (subs path (inc (str/last-index-of path "."))))

;;(assert (.exists config-file) (format "Config file does not exist: %s" (str config-file)))

(def config
  (cond-> {}
    (.exists config-file)
    (merge
     (edn/read-string
      {:readers {'ig/ref identity
                 'ref identity
                 'profile #(get % :prod)
                 'env #(System/getenv (str %))
                 'join #(apply str %)}}
      (slurp config-file)))
    (System/getenv "SITE_BASE_URI")
    (assoc :juxt.site.alpha/base-uri (System/getenv "SITE_BASE_URI"))))

(defn show-config
  "Show configuration"
  [opts]
  (pprint config))

(defn put-trigger
  "Put a trigger"
  [opts]
  (let [{:keys [base-uri name trigger]
         :or {base-uri (:juxt.site.alpha/base-uri config)}}
        (:options opts)]

    (when-not base-uri (error-and-exit! 1 "Base-URI not specified"))
    (when-not name (error-and-usage! "Name required" opts))
    (when-not trigger (error-and-usage! "Trigger file required" opts))
    (when-not (.isFile (io/file trigger)) (error-and-exit! 1 "Trigger file must be a file"))

    (let [{:keys [status headers body]}
          (curl/put
           (format "%s/_site/triggers/%s" base-uri name)
           {:headers {"content-type" "application/json"}
            :body (cond-> (slurp (io/file trigger))
                    base-uri (str/replace "{{base-uri}}" "")
                    (re-matches #".*\.edn$" trigger)
                    edn-to-json)
            :throw false})]
      (cond
        (= status 201)
        (message! (format "Trigger created: %s" (get headers "location")))

        (= status 204)
        (message! (format "Trigger updated: %s" (get headers "location")))

        :else
        (do
          (error! "Server response:" status (str/trim body))
          (message! "Request id:" (get headers "site-request-id")))))))

(defn put-graphql
  "Put a GraphQL document"
  [opts]
  (let [{:keys [base-uri file path]
         :or {base-uri (:juxt.site.alpha/base-uri config)}}
        (:options opts)
        file (-> file io/file)]

    (when-not base-uri (error-and-exit! 1 "Base-URI not specified"))
    (when-not file (error-and-usage! "GraphQL schema file required" opts))
    (when-not (.isFile file) (error-and-exit! 1 "GraphQL schema file must be a file"))
    (when-not path (error-and-usage! "Path required" opts))

    (let [{:keys [status headers body]}
          (curl/put
           (format "%s%s" base-uri path)
           {:headers {"content-type" "application/graphql"
                      "accept" "text/plain"}
            :body (cond-> (slurp file)
                    base-uri (str/replace "{{base-uri}}" ""))
            :throw false})]
      (cond
        (#{201 204} status)
        (message! (format "GraphQL document uploaded: %s%s %s->%s %s%s"
                          ansi/blue-font (.getName file) ansi/reset-font
                          ansi/blue-font path ansi/reset-font))

        :else
        (do
          (error! "Server response:" status (str/trim body))
          (message! "Request id:" (get headers "site-request-id")))))))

(defn post-graphql
  "Post a GraphQL schema"
  [opts]
  (let [{:keys [base-uri file path]
         :or {base-uri (:juxt.site.alpha/base-uri config)}}
        (:options opts)]

    (when-not base-uri (error-and-exit! 1 "Base-URI not specified"))
    (when-not file (error-and-usage! "GraphQL schema file required" opts))
    (when-not (.isFile (io/file file)) (error-and-exit! 1 "GraphQL schema file must be a file"))
    (when-not path (error-and-usage! "Path required" opts))

    (let [{:keys [status headers body]}
          (curl/post
           (format "%s%s" base-uri path)
           {:headers {"content-type" "application/json"
                      "accept" "text/plain"}
            :body (json/encode {"query" (cond-> (slurp (io/file file))
                                         base-uri (str/replace "{{base-uri}}" ""))})
            :throw false})]
      (cond
        (= status 200)
        (do
          (message! (format "GraphQL posted"))
          (message! (str/trim body)))

        :else
        (do
          (error! "Server response:" status (str/trim body))
          (message! "Request id:" (get headers "site-request-id")))))))

(defn put-redirect
  "Put a redirect"
  [opts]
  (let [{:keys [base-uri resource location]
         :or {base-uri (:juxt.site.alpha/base-uri config)}}
        (:options opts)]

    (when-not base-uri (error-and-exit! 1 "Base-URI not specified"))
    (when-not resource (error-and-usage! "Resource required" opts))
    (when-not location (error-and-usage! "Location required" opts))

    (let [{:keys [status headers body]}
          (curl/post
           (format "%s/_site/redirects/" base-uri)
           {:headers {"content-type" "application/json"}
            :body (json/generate-string
                   (cond-> {"type" "Redirect"
                            "resource" (str base-uri resource)
                            "location" (str base-uri location)}))
            :throw false})]
      (cond
        (= status 201)
        (message! (format "Redirect created"))

        (= status 204)
        (message! (format "Redirect updated"))

        :else
        (do
          (error! "Server response:" status (str/trim body))
          (message! "Request id:" (get headers "site-request-id")))))))

(defn put-api
  "Upload and install an API"
  [opts]
  (let [{:keys [base-uri name openapi]
         :or {base-uri (:juxt.site.alpha/base-uri config)}} (:options opts)

        _ (when-not name (error-and-usage! "API name required" opts))
        _ (when-not (re-matches #"[a-z]{2,}" name)
            (error-and-usage! "Name must match pattern: [a-z]{2,}" opts))

        _ (when-not openapi (error-and-usage! "OpenAPI file required" opts))
        _ (when-not (.exists (io/file openapi)) (error-and-exit! 1 "OpenAPI file not found"))
        _ (when-not (.isFile (io/file openapi)) (error-and-exit! 1 "OpenAPI argument is not a file"))

        openapi-doc (edn/read-string
                     {:readers {'juxt.site.alpha/as-str pr-str}}
                     (-> (slurp (io/file openapi))
                         (str/replace "{{base-uri}}" "")))

        {:keys [status headers body]}
        (curl/put
         (format "%s/_site/apis/%s/openapi.json" base-uri name)
         {:headers {"content-type" "application/vnd.oai.openapi+json;version=3.0.2"}
          :body (json/generate-string
                 {"type" "OpenAPI"
                  "openapi" openapi-doc})
          :throw true})]
    (cond
      (#{201 204} status)
      (message! (format "API %s: %s (version %s)"
                        (case status 201 "installed" 204 "updated")
                        (get-in openapi-doc [:info :title])
                        (get-in openapi-doc [:info :version])))

      :else
      (do
        (error! "Server response:" status (str/trim body))
        (message! "Request id:" (get headers "site-request-id"))))))

(defn sh [& args]
  (let [{:keys [exit out err]} (apply sh/sh args)]
    (when (pos? exit)
      (error! err))))

(defn create-tmp-dir []
  (let [tmpdir (Files/createTempDirectory
                "site-" (into-array FileAttribute []))]
    (message! "Created tmp dir:" (.toString tmpdir))
    tmpdir))

(defn infer-content-type
  [extension]
  (case extension
    ("htm" "html") "text/html;charset=utf-8"
    "js" "text/javascript"
    ("map" "json") "application/json"
    "edn" "application/edn"
    "csv" "text/csv"
    "png" "image/png"
    ("jpg" "jpeg") "image/jpeg"
    "svg" "image/svg+xml"
    "ico" "image/x-icon"
    ("gif" "webp" "bmp") (str "image/" extension)
    "css" "text/css; charset=utf-8"
    "txt" "text/plain"
    ("woff" "woff2" "otf" "ttf") (str "font/" extension)
    ("mp4" "mpeg" "webm") (str "video/" extension)
    ("opus" "wav" "aac") (str "audio/" extension)
    "mp3" "audio/mpeg"
    nil))

(defn content-type [filename]
  (when-let [suffix (file-extension filename)]
    (or
     (infer-content-type suffix)
     (do
       (error! "Failed to determine content-type for"
               filename (format "(suffix=%s)" suffix)
               " Falling back to application/octet-stream")
       "application/octet-stream"))))

(defn upload-file* [base-uri file type encoding language path opts]
  (assert (instance? java.io.File file))
  (when-not (.exists file)
    (error-and-exit! 1 (format "Cannot upload file that does not exist: %s" (str file))))

  (message! "Uploading file to" (str base-uri path))

  (let [variant-of (some-> (get-in opts [:options :resource])
                           (str/replace "{{base-uri}}" ""))
        classification (get-in opts [:options :classification])
        dialect (get-in opts [:options :dialect])
        {:keys [status headers body]}
        (curl/put
         (str base-uri path)
         {:headers (cond-> { "accept" "text/plain,application/json;q=0.8"
                            "content-type" type}
                     encoding (assoc "content-encoding" encoding)
                     language (assoc "content-language" language)
                     variant-of (assoc "site-variant-of" variant-of)
                     classification (assoc "site-classification" classification)
                     dialect (assoc "site-template-dialect" dialect))
          :body file
          :throw false})]

    (cond
      (= status 400)
      (do
        (error! "Server response:" status)
        (when body (println (str/trim body)))
        (message! "Request id:" (get headers "site-request-id")))

      (= status 200)
      (do
        (message! (format "Asset uploaded: %s" path))
        (message! "Server response:" status (str/trim body)))

      (= status 201)
      (message! (format "Asset created: %s" path))

      (= status 204)
      (message! (format "Asset updated: %s" path))

      :else
      (do
        (error! "Server response:" status (str/trim body))
        (message! "Request id:" (get headers "site-request-id"))))))

(defn put-asset
  "Upload an asset"
  [opts]
  (let [{:keys [base-uri file type encoding language path]
         :or {base-uri (:juxt.site.alpha/base-uri config)}}
        (:options opts)
        type (or type (when file (content-type file)))]

    (when-not base-uri (error-and-exit! 1 "Base-URI not specified"))
    (when-not file (error-and-usage! "Asset file required" opts))
    (when-not type (error-and-usage! "Content-type required" opts))
    (when-not path (error-and-usage! "Path required" opts))

    (upload-file*
     base-uri
     (io/file (str/replace file "{{base-uri}}" ""))
     type encoding language path opts)))

(defn post-resources
  "Post one or more resources"
  [opts]
  (let [{:keys [base-uri file]
         :or {base-uri (:juxt.site.alpha/base-uri config)}} (:options opts)]
    (when-not base-uri (error-and-exit! 1 "Base-URI not specified"))
    (when-not (.exists (io/file file)) (error-and-exit! 1 (str "File not found: " file)))

    (let [{:keys [status headers body]}
          (curl/post
           (str base-uri "/_site/resources/")
           {:headers (cond-> {"content-type" "application/edn"})
            :body (cond-> (slurp (io/file file))
                    :always (str/replace "{{base-uri}}" ""))
            :throw false})]
      (message! (format "Posting resources from %s" (io/file file)))
      (case status
        (201 204)
        (message! (format "Resource %s: %s"
                          (case status 201 "created" 204 "updated")
                          (get headers "location")))

        207
        (let [results (edn/read-string body)
              errors (filter #(contains? % :error) results)]
          (dorun
               (map
                (fn [ix r]
                  (cond
                    (< (:status r) 400)
                    (println (format "%s%d: %s%s" ansi/green-font ix r ansi/reset-font))
                    :else
                    (println (format "%s%d: %s%s" ansi/red-font ix r ansi/reset-font))))
                (range) results)))
        (do
          (error! "Server response:" status (str/trim body))
          (message! "Request id:" (get headers "site-request-id")))))))

(defn post
  "Post a resource"
  [opts]
  (let [{:keys [base-uri path url type encoding language data file]
         :or {base-uri (:juxt.site.alpha/base-uri config)}} (:options opts)]
    (when-not base-uri (error-and-exit! 1 "Base-URI not specified"))

    (when-not (or path url)
      (error-and-exit! 1 "PATH or URI required"))

    (when (and path url)
      (error-and-exit! 1 "Must specify one of PATH and URI"))

    (when (and data file)
      (error-and-exit! 1 "Must specify one of DATA and FILE"))

    (when (and file (not (.exists (io/file file))))
      (error-and-exit! 1 (str "File not found: " file)))

    (let [url (if path (str base-uri path) (str/replace url "{{base-uri}}" ""))

          type (or
                type
                (when file (content-type (.getName file)))
                (error-and-exit! 1 "Content-type must be specified or deducible from the file name"))

          {:keys [status headers body]}
          (curl/post
           url
           {:headers (cond-> {"content-type" type}
                       encoding (assoc "content-encoding" encoding)
                       language (assoc "content-language" language))
            :body (or data (slurp (io/file file)))
            :throw false})]
      (case status
        200
        (do
          (message! (format "OK: %s" status))
          (println (str/trim body)))

        (201 204)
        (message! (format "Resource %s: %s"
                          (case status 201 "created" 204 "updated")
                          (get headers "location")))
        (do
          (error-and-exit! 1 "Server response:" status (str/trim body))
          ;;(message! "Request id:" (get headers "site-request-id"))
          )))))

(defn post-json
  "Post JSON to a resource"
  [opts]
  (let [{:keys [base-uri file url]
         :or {base-uri (:juxt.site.alpha/base-uri config)}} (:options opts)]
    (when-not base-uri (error-and-exit! 1 "Base-URI not specified"))
    (when-not file (error-and-exit! 1 "File required"))
    (when-not (.exists (io/file file)) (error-and-exit! 1 (str "File not found: " file)))
    (when-not url (error-and-exit! 1 "URL is required"))

    (let [url (str/replace url "{{base-uri}}" base-uri)
          {:keys [status headers body]}
          (curl/post
           url
           {:headers (cond-> {"content-type" "application/json"})
            :body (cond-> (slurp (io/file file))
                    :always (str/replace "{{base-uri}}" "")
                    (.endsWith file ".edn") (edn-to-json))
            :throw false})]
      (case status
        (201 204)
        (message! (format "Resource %s: %s"
                          (case status 201 "created" 204 "updated")
                          (get headers "location")))
        (do
          (error! "Server response:" status (str/trim body))
          (message! "Request id:" (get headers "site-request-id")))))))

(defn put-json
  "PUT JSON to a resource"
  [opts]
  (let [{:keys [base-uri file url]
         :or {base-uri (:juxt.site.alpha/base-uri config)}} (:options opts)]
    (when-not base-uri (error-and-exit! 1 "Base-URI not specified"))
    (when-not file (error-and-exit! 1 "File required"))
    (when-not (.exists (io/file file)) (error-and-exit! 1 (str "File not found: " file)))

    (let [embedded-url (when (.endsWith file ".edn")
                         (:xt/id (edn/read-string (slurp file))))

          _ (when (and embedded-url url) (error-and-exit! 1 "Should not specify URL both in the document and as an option"))

          url (or embedded-url url)

          _ (when-not url (error-and-exit! 1 "Failed to specify identity (URI), either in the document (xt/id) or as an option"))

          url (str/replace url "{{base-uri}}" base-uri)
          {:keys [status headers body]}
          (curl/put
           url
           {:headers (cond-> {"content-type" "application/json"})
            :body (cond-> (slurp (io/file file))
                    :always (str/replace "{{base-uri}}" "")
                    (.endsWith file ".edn") (edn-to-json))
            :throw false})]
      (case status
        (201 204)
        (message! (format "Resource %s: %s"
                          (case status 201 "created" 204 "updated")
                          (get headers "location")))
        (do
          (error! "Server response:" status (str/trim body))
          (message! "Request id:" (get headers "site-request-id")))))))

(defn put-static-site
  "Given a path and a directory containing at least an index.html file, serves the
  files in the directory using the given path as the root"
  [opts]
  (try
    (let [{:keys [base-uri directory path spa]
           :or {base-uri (:juxt.site.alpha/base-uri config)}} (:options opts)]
      (message! "putting site" base-uri directory path)
      (when-not base-uri (error-and-exit! 1 "Base-URI not specified"))
      (when-not (some->> (str directory "/index.html")
                         io/file
                         .exists)
        (error-and-exit! 1 (str "No index.html found in directory: " directory)))
      (let [base (str (.getPath (.toURI (io/file (System/getProperty "user.dir")))) directory)
            relative-path (fn [file] (str path (str/replace-first (.getPath (.toURI file)) base "")))
            put-file
            (fn [file]
              (let [destination (str base-uri "/" (relative-path file))
                    _ (message! (str "Putting file " (.getAbsolutePath file) " to path " destination))
                    {:keys [status headers body]}
                    (curl/put
                     destination
                     {:headers (merge
                                {"content-type" (content-type (.getName file))}
                                (prn (relative-path file))
                                (when (and (str/includes? (relative-path file) "index.html")
                                           spa)
                                  (prn "adding headers")
                                  {"site-type" "AppRoutes"
                                   "site-pattern" (str "/" path "/app/.*")}))
                      :body (io/file file)
                      :throw false})]
                (case status
                  (201 204)
                  (message! (format "Resource %s: %s"
                                    (case status 201 "created" 204 "updated")
                                    headers))

                  207
                  (let [results (edn/read-string body)
                        errors (filter #(contains? % :error) results)]
                    (if (pos? (count errors))
                      (do
                        (error! (format "Not all resources were accepted:"))
                        (dorun (map (fn [ix r]
                                      (cond
                                        (< (:status r) 400)
                                        (println (format "%s%d: %s%s" ansi/green-font ix r ansi/reset-font))
                                        :else
                                        (println (format "%s%d: %s%s" ansi/red-font ix r ansi/reset-font))))
                                    (range) results)))
                      (message! (format "Resources all posted OK"))))

                  (do
                    (error! "Server response:" status (str/trim body))
                    (message! "Request id:" (get headers "site-request-id"))))))]
        (some->> directory
                 io/file
                 file-seq
                 (filter #(.isFile %))
                 (mapv put-file))
        (message! "Site successfully deployed. Visit "
                  (str base-uri "/" (-> directory
                                        (str "/index.html")
                                        io/file
                                        relative-path)))))
    (catch Exception e (str "error putting static site " e))))

(defn debugf
  "Write a debug message to the console, but only if *debug* is true."
  [& args]
  (when *debug*
    (println "DEBUG:" (apply format args))))

(def global-cli-options
  [["-b" "--base-uri BASE-URI" "The Base-URI of the server you are targetting"]
   ["-s" "--silent" "Silent mode"]
   ["-D" "--debug" "Enable debug mode"]
   ["-v" "--verbose" "Verbose mode"]
   ["-h" "--help" "Show this summary"]])

(def commands
  [["config"
    {:description (:doc (meta #'show-config))
     :cli-options []
     :delegate show-config}]

   ["put-trigger"
    {:description (:doc (meta #'put-trigger))
     :cli-options [["-n" "--name NAME" "Trigger name"]
                   ["-t" "--trigger FILE" "Trigger file"]]
     :delegate put-trigger}]

   ["put-graphql"
    {:description (:doc (meta #'put-graphql))
     :cli-options [["-f" "--file FILE" "GraphQL schema file"]
                   ["-p" "--path PATH" "The destination path after the base-uri"]]
     :delegate put-graphql}]

   ["post-graphql"
    {:description (:doc (meta #'post-graphql))
     :cli-options [["-f" "--file FILE" "GraphQL request"]
                   ["-p" "--path PATH" "The destination path after the base-uri"]]
     :delegate post-graphql}]

   ["put-redirect"
    {:description (:doc (meta #'put-redirect))
     :cli-options [["-r" "--resource URL" "Resource"]
                   ["-l" "--location URL" "Location to redirect to"]]
     :delegate put-redirect}]

   ["put-api"
    {:description (:doc (meta #'put-api))
     :cli-options [["-n" "--name NAME" "API name"]
                   ["-f" "--openapi FILE" "OpenAPI description file"]]
     :delegate put-api}]

   ["put-asset"
    {:description (:doc (meta #'put-asset))
     :cli-options [["-f" "--file FILE" "The asset file"]
                   ["-p" "--path PATH" "The destination path after the base-uri"]
                   ["-t" "--type MIME_TYPE" "The content-type"]
                   ["-e" "--encoding ENCODING" "The content-encoding (optional)"]
                   ["-l" "--language LANGUAGE" "The content-language (optional)"]
                   ["-r" "--resource URI" "The resource for which this asset is a variant of"]
                   ["-c" "--classification CLASSIFICATION" "The classification (e.g PUBLIC, RESTRICTED) applied to resource"]]
     :delegate put-asset}]

   ["post-resources"
    {:description (:doc (meta #'post-resources))
     :cli-options [["-f" "--file FILE" "Resource file (in EDN format)"]]
     :delegate post-resources}]

   ["post"
    {:description (:doc (meta #'post))
     :cli-options
     [ ;; One of these
      ["-p" "--path PATH" "The destination path after the base-uri"]
      ["-u" "--url URL" "URL to post to"]

      ["-t" "--type MIME_TYPE" "The content-type"] ; If missing, try to deduce
                                                   ; from other the file suffix
      ["-e" "--encoding ENCODING" "The content-encoding (optional)"]
      ["-l" "--language LANGUAGE" "The content-language (optional)"]

      ;; One of these
      ["-d" "--data DATA" "Data to post"]
      ["-f" "--file FILE" "File containing data"]]
     :delegate post}]

   ["post-json"
    {:description (:doc (meta #'post-json))
     :cli-options [["-f" "--file FILE" "File containing data"]
                   ["-u" "--url URL" "URL to POST to"]]
     :delegate post-json}]

   ["put-json"
    {:description (:doc (meta #'put-json))
     :cli-options [["-f" "--file FILE" "File containing data"]
                   ["-u" "--url URL" "URL to POST to"]]
     :delegate put-json}]

   ["put-static-site"
    {:description (:doc (meta #'put-static-site))
     :cli-options [["-d" "--directory DIR" "Directory containing static site files"]
                   ["-p" "--path PATH" "Path the site will be available at. e.g -p mysite will make the site available at BASE_URI/mysite/index.html"]
                   ["-spa" "--spa SPA" "If set the html file will be served at PATH/app/*"]]
     :delegate put-static-site}]])

(let [{:keys [options arguments summary errors]}
      (parse-opts (next *command-line-args*)  global-cli-options :in-order true)
      command (first arguments)
      {:keys [cli-options delegate]} ((into {} commands) (first arguments))

      print-summary
      (fn []
        (do
          (println (str ansi/bold-green-font "site" ansi/reset-font))
          (println)
          (println "This is a resource management tool for Site.")
          (println)
          (println (str ansi/white-font "Usage" ansi/reset-font))
          (println)
          (println "site <global-options> <subcommand> <subcommand-options>")
          (println)
          (println (str ansi/white-font "Global options" ansi/reset-font))
          (println summary)
          (println)
          (println (str ansi/white-font "Environment variables" ansi/reset-font))
          (println)
          (println "SITE_BASE_URI \tSet the default Base-URI")
          (println "SITE_PASS_DIR \tOverride where Unix pass passwords are located")
          (println)
          (println (str ansi/white-font "Subcommands" ansi/reset-font))
          (println)
          (doseq [[command {:keys [description cli-options delegate]}] commands]
            (apply
             println
             (remove nil? [command (str ansi/yellow-font "(" description (when-not delegate " - coming soon!") ")" ansi/reset-font)]))
            (when-let [summary (:summary (parse-opts [] cli-options))]
              (when-not (str/blank? (str/trim summary))
                (println summary)))
            (println))))]

  (cond
    (contains? options :help)
    (print-summary)

    errors
    (doseq [err errors]
      (println err))

    (find (into {} commands) command)
    (binding [*silent* (:silent options)
              *debug* (:debug options)]
      (if delegate
        (let [opts (parse-opts (next arguments) (concat global-cli-options
                                                        cli-options))]
          (when-let [err (some->> opts :errors (str/join ", "))]
            (println (str ansi/red-font "Error: " err)))
          (delegate
           (-> opts
               (update :options merge options))))
        (println "No implementation:" command)))

    (first arguments)
    (println "Unknown command:" (first arguments))

    :else
    (print-summary)))

;; Local Variables:
;; mode: clojure
;; End:
