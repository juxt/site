import {
  createSingleton,
  tippy_esm_default
} from "./chunk-QQZCBNLI.js";
import {
  require_react_dom
} from "./chunk-QKYHKZPX.js";
import {
  require_react
} from "./chunk-KQJKTEOQ.js";
import {
  __toESM
} from "./chunk-4ACCWERV.js";

// node_modules/@tippyjs/react/dist/tippy-react.esm.js
var import_react = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var isBrowser = typeof window !== "undefined" && typeof document !== "undefined";
function preserveRef(ref, node) {
  if (ref) {
    if (typeof ref === "function") {
      ref(node);
    }
    if ({}.hasOwnProperty.call(ref, "current")) {
      ref.current = node;
    }
  }
}
function ssrSafeCreateDiv() {
  return isBrowser && document.createElement("div");
}
function toDataAttributes(attrs) {
  var dataAttrs = {
    "data-placement": attrs.placement
  };
  if (attrs.referenceHidden) {
    dataAttrs["data-reference-hidden"] = "";
  }
  if (attrs.escaped) {
    dataAttrs["data-escaped"] = "";
  }
  return dataAttrs;
}
function deepEqual(x, y) {
  if (x === y) {
    return true;
  } else if (typeof x === "object" && x != null && typeof y === "object" && y != null) {
    if (Object.keys(x).length !== Object.keys(y).length) {
      return false;
    }
    for (var prop in x) {
      if (y.hasOwnProperty(prop)) {
        if (!deepEqual(x[prop], y[prop])) {
          return false;
        }
      } else {
        return false;
      }
    }
    return true;
  } else {
    return false;
  }
}
function uniqueByShape(arr) {
  var output = [];
  arr.forEach(function(item) {
    if (!output.find(function(outputItem) {
      return deepEqual(item, outputItem);
    })) {
      output.push(item);
    }
  });
  return output;
}
function deepPreserveProps(instanceProps, componentProps) {
  var _instanceProps$popper, _componentProps$poppe;
  return Object.assign({}, componentProps, {
    popperOptions: Object.assign({}, instanceProps.popperOptions, componentProps.popperOptions, {
      modifiers: uniqueByShape([].concat(((_instanceProps$popper = instanceProps.popperOptions) == null ? void 0 : _instanceProps$popper.modifiers) || [], ((_componentProps$poppe = componentProps.popperOptions) == null ? void 0 : _componentProps$poppe.modifiers) || []))
    })
  });
}
var useIsomorphicLayoutEffect = isBrowser ? import_react.useLayoutEffect : import_react.useEffect;
function useMutableBox(initialValue) {
  var ref = (0, import_react.useRef)();
  if (!ref.current) {
    ref.current = typeof initialValue === "function" ? initialValue() : initialValue;
  }
  return ref.current;
}
function updateClassName(box, action, classNames) {
  classNames.split(/\s+/).forEach(function(name) {
    if (name) {
      box.classList[action](name);
    }
  });
}
var classNamePlugin = {
  name: "className",
  defaultValue: "",
  fn: function fn(instance) {
    var box = instance.popper.firstElementChild;
    var isDefaultRenderFn = function isDefaultRenderFn2() {
      var _instance$props$rende;
      return !!((_instance$props$rende = instance.props.render) == null ? void 0 : _instance$props$rende.$$tippy);
    };
    function add() {
      if (instance.props.className && !isDefaultRenderFn()) {
        if (true) {
          console.warn(["@tippyjs/react: Cannot use `className` prop in conjunction with", "`render` prop. Place the className on the element you are", "rendering."].join(" "));
        }
        return;
      }
      updateClassName(box, "add", instance.props.className);
    }
    function remove() {
      if (isDefaultRenderFn()) {
        updateClassName(box, "remove", instance.props.className);
      }
    }
    return {
      onCreate: add,
      onBeforeUpdate: remove,
      onAfterUpdate: add
    };
  }
};
function TippyGenerator(tippy) {
  function Tippy(_ref) {
    var children = _ref.children, content = _ref.content, visible = _ref.visible, singleton = _ref.singleton, render = _ref.render, reference = _ref.reference, _ref$disabled = _ref.disabled, disabled = _ref$disabled === void 0 ? false : _ref$disabled, _ref$ignoreAttributes = _ref.ignoreAttributes, ignoreAttributes = _ref$ignoreAttributes === void 0 ? true : _ref$ignoreAttributes, __source = _ref.__source, __self = _ref.__self, restOfNativeProps = _objectWithoutPropertiesLoose(_ref, ["children", "content", "visible", "singleton", "render", "reference", "disabled", "ignoreAttributes", "__source", "__self"]);
    var isControlledMode = visible !== void 0;
    var isSingletonMode = singleton !== void 0;
    var _useState = (0, import_react.useState)(false), mounted = _useState[0], setMounted = _useState[1];
    var _useState2 = (0, import_react.useState)({}), attrs = _useState2[0], setAttrs = _useState2[1];
    var _useState3 = (0, import_react.useState)(), singletonContent = _useState3[0], setSingletonContent = _useState3[1];
    var mutableBox = useMutableBox(function() {
      return {
        container: ssrSafeCreateDiv(),
        renders: 1
      };
    });
    var props = Object.assign({
      ignoreAttributes
    }, restOfNativeProps, {
      content: mutableBox.container
    });
    if (isControlledMode) {
      if (true) {
        ["trigger", "hideOnClick", "showOnCreate"].forEach(function(nativeStateProp) {
          if (props[nativeStateProp] !== void 0) {
            console.warn(["@tippyjs/react: Cannot specify `" + nativeStateProp + "` prop in", "controlled mode (`visible` prop)"].join(" "));
          }
        });
      }
      props.trigger = "manual";
      props.hideOnClick = false;
    }
    if (isSingletonMode) {
      disabled = true;
    }
    var computedProps = props;
    var plugins = props.plugins || [];
    if (render) {
      computedProps = Object.assign({}, props, {
        plugins: isSingletonMode && singleton.data != null ? [].concat(plugins, [{
          fn: function fn2() {
            return {
              onTrigger: function onTrigger(instance, event) {
                var node = singleton.data.children.find(function(_ref2) {
                  var instance2 = _ref2.instance;
                  return instance2.reference === event.currentTarget;
                });
                instance.state.$$activeSingletonInstance = node.instance;
                setSingletonContent(node.content);
              }
            };
          }
        }]) : plugins,
        render: function render2() {
          return {
            popper: mutableBox.container
          };
        }
      });
    }
    var deps = [reference].concat(children ? [children.type] : []);
    useIsomorphicLayoutEffect(function() {
      var element = reference;
      if (reference && reference.hasOwnProperty("current")) {
        element = reference.current;
      }
      var instance = tippy(element || mutableBox.ref || ssrSafeCreateDiv(), Object.assign({}, computedProps, {
        plugins: [classNamePlugin].concat(props.plugins || [])
      }));
      mutableBox.instance = instance;
      if (disabled) {
        instance.disable();
      }
      if (visible) {
        instance.show();
      }
      if (isSingletonMode) {
        singleton.hook({
          instance,
          content,
          props: computedProps,
          setSingletonContent
        });
      }
      setMounted(true);
      return function() {
        instance.destroy();
        singleton == null ? void 0 : singleton.cleanup(instance);
      };
    }, deps);
    useIsomorphicLayoutEffect(function() {
      var _instance$popperInsta;
      if (mutableBox.renders === 1) {
        mutableBox.renders++;
        return;
      }
      var instance = mutableBox.instance;
      instance.setProps(deepPreserveProps(instance.props, computedProps));
      (_instance$popperInsta = instance.popperInstance) == null ? void 0 : _instance$popperInsta.forceUpdate();
      if (disabled) {
        instance.disable();
      } else {
        instance.enable();
      }
      if (isControlledMode) {
        if (visible) {
          instance.show();
        } else {
          instance.hide();
        }
      }
      if (isSingletonMode) {
        singleton.hook({
          instance,
          content,
          props: computedProps,
          setSingletonContent
        });
      }
    });
    useIsomorphicLayoutEffect(function() {
      var _instance$props$poppe;
      if (!render) {
        return;
      }
      var instance = mutableBox.instance;
      instance.setProps({
        popperOptions: Object.assign({}, instance.props.popperOptions, {
          modifiers: [].concat((((_instance$props$poppe = instance.props.popperOptions) == null ? void 0 : _instance$props$poppe.modifiers) || []).filter(function(_ref3) {
            var name = _ref3.name;
            return name !== "$$tippyReact";
          }), [{
            name: "$$tippyReact",
            enabled: true,
            phase: "beforeWrite",
            requires: ["computeStyles"],
            fn: function fn2(_ref4) {
              var _state$modifiersData;
              var state = _ref4.state;
              var hideData = (_state$modifiersData = state.modifiersData) == null ? void 0 : _state$modifiersData.hide;
              if (attrs.placement !== state.placement || attrs.referenceHidden !== (hideData == null ? void 0 : hideData.isReferenceHidden) || attrs.escaped !== (hideData == null ? void 0 : hideData.hasPopperEscaped)) {
                setAttrs({
                  placement: state.placement,
                  referenceHidden: hideData == null ? void 0 : hideData.isReferenceHidden,
                  escaped: hideData == null ? void 0 : hideData.hasPopperEscaped
                });
              }
              state.attributes.popper = {};
            }
          }])
        })
      });
    }, [attrs.placement, attrs.referenceHidden, attrs.escaped].concat(deps));
    return import_react.default.createElement(import_react.default.Fragment, null, children ? (0, import_react.cloneElement)(children, {
      ref: function ref(node) {
        mutableBox.ref = node;
        preserveRef(children.ref, node);
      }
    }) : null, mounted && (0, import_react_dom.createPortal)(render ? render(toDataAttributes(attrs), singletonContent, mutableBox.instance) : content, mutableBox.container));
  }
  return Tippy;
}
function useSingletonGenerator(createSingleton2) {
  return function useSingleton2(_temp) {
    var _ref = _temp === void 0 ? {} : _temp, _ref$disabled = _ref.disabled, disabled = _ref$disabled === void 0 ? false : _ref$disabled, _ref$overrides = _ref.overrides, overrides = _ref$overrides === void 0 ? [] : _ref$overrides;
    var _useState = (0, import_react.useState)(false), mounted = _useState[0], setMounted = _useState[1];
    var mutableBox = useMutableBox({
      children: [],
      renders: 1
    });
    useIsomorphicLayoutEffect(function() {
      if (!mounted) {
        setMounted(true);
        return;
      }
      var children = mutableBox.children, sourceData = mutableBox.sourceData;
      if (!sourceData) {
        if (true) {
          console.error(["@tippyjs/react: The `source` variable from `useSingleton()` has", "not been passed to a <Tippy /> component."].join(" "));
        }
        return;
      }
      var instance = createSingleton2(children.map(function(child) {
        return child.instance;
      }), Object.assign({}, sourceData.props, {
        popperOptions: sourceData.instance.props.popperOptions,
        overrides,
        plugins: [classNamePlugin].concat(sourceData.props.plugins || [])
      }));
      mutableBox.instance = instance;
      if (disabled) {
        instance.disable();
      }
      return function() {
        instance.destroy();
        mutableBox.children = children.filter(function(_ref2) {
          var instance2 = _ref2.instance;
          return !instance2.state.isDestroyed;
        });
      };
    }, [mounted]);
    useIsomorphicLayoutEffect(function() {
      if (!mounted) {
        return;
      }
      if (mutableBox.renders === 1) {
        mutableBox.renders++;
        return;
      }
      var children = mutableBox.children, instance = mutableBox.instance, sourceData = mutableBox.sourceData;
      if (!(instance && sourceData)) {
        return;
      }
      var _sourceData$props = sourceData.props, content = _sourceData$props.content, props = _objectWithoutPropertiesLoose(_sourceData$props, ["content"]);
      instance.setProps(deepPreserveProps(instance.props, Object.assign({}, props, {
        overrides
      })));
      instance.setInstances(children.map(function(child) {
        return child.instance;
      }));
      if (disabled) {
        instance.disable();
      } else {
        instance.enable();
      }
    });
    return (0, import_react.useMemo)(function() {
      var source = {
        data: mutableBox,
        hook: function hook(data) {
          mutableBox.sourceData = data;
          mutableBox.setSingletonContent = data.setSingletonContent;
        },
        cleanup: function cleanup() {
          mutableBox.sourceData = null;
        }
      };
      var target = {
        hook: function hook(data) {
          var _mutableBox$instance, _mutableBox$instance2;
          mutableBox.children = mutableBox.children.filter(function(_ref3) {
            var instance = _ref3.instance;
            return data.instance !== instance;
          });
          mutableBox.children.push(data);
          if (((_mutableBox$instance = mutableBox.instance) == null ? void 0 : _mutableBox$instance.state.isMounted) && ((_mutableBox$instance2 = mutableBox.instance) == null ? void 0 : _mutableBox$instance2.state.$$activeSingletonInstance) === data.instance) {
            mutableBox.setSingletonContent == null ? void 0 : mutableBox.setSingletonContent(data.content);
          }
          if (mutableBox.instance && !mutableBox.instance.state.isDestroyed) {
            mutableBox.instance.setInstances(mutableBox.children.map(function(child) {
              return child.instance;
            }));
          }
        },
        cleanup: function cleanup(instance) {
          mutableBox.children = mutableBox.children.filter(function(data) {
            return data.instance !== instance;
          });
          if (mutableBox.instance && !mutableBox.instance.state.isDestroyed) {
            mutableBox.instance.setInstances(mutableBox.children.map(function(child) {
              return child.instance;
            }));
          }
        }
      };
      return [source, target];
    }, []);
  };
}
var forwardRef = function(Tippy, defaultProps) {
  return (0, import_react.forwardRef)(function TippyWrapper(_ref, _ref2) {
    var children = _ref.children, props = _objectWithoutPropertiesLoose(_ref, ["children"]);
    return import_react.default.createElement(Tippy, Object.assign({}, defaultProps, props), children ? (0, import_react.cloneElement)(children, {
      ref: function ref(node) {
        preserveRef(_ref2, node);
        preserveRef(children.ref, node);
      }
    }) : null);
  });
};
var useSingleton = useSingletonGenerator(createSingleton);
var index = forwardRef(TippyGenerator(tippy_esm_default));
var tippy_react_esm_default = index;

// dep:@tippyjs_react
var tippyjs_react_default = tippy_react_esm_default;
export {
  tippyjs_react_default as default,
  tippy_esm_default as tippy,
  useSingleton
};
//# sourceMappingURL=@tippyjs_react.js.map
