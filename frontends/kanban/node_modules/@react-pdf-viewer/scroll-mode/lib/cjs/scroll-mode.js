'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@react-pdf-viewer/core');
var React = require('react');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);

var HorizontalScrollingIcon = function () { return (React__namespace.createElement(core.Icon, { size: 16 },
    React__namespace.createElement("path", { d: "M6.5,21.5c0,0.552-0.448,1-1,1h-4c-0.552,0-1-0.448-1-1v-20c0-0.552,0.448-1,1-1h4c0.552,0,1,0.448,1,1V21.5z\n            M14.5,21.5c0,0.552-0.448,1-1,1h-4c-0.552,0-1-0.448-1-1v-20c0-0.552,0.448-1,1-1h4c0.552,0,1,0.448,1,1V21.5z\n            M22.5,21.5 c0,0.552-0.448,1-1,1h-4c-0.552,0-1-0.448-1-1v-20c0-0.552,0.448-1,1-1h4c0.552,0,1,0.448,1,1V21.5z" }))); };

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var VerticalScrollingIcon = function () { return (React__namespace.createElement(core.Icon, { size: 16 },
    React__namespace.createElement("path", { d: "M23.5,5.5c0,0.552-0.448,1-1,1h-21c-0.552,0-1-0.448-1-1v-3c0-0.552,0.448-1,1-1h21c0.552,0,1,0.448,1,1V5.5z\n            M23.5,13.5c0,0.552-0.448,1-1,1h-21c-0.552,0-1-0.448-1-1v-3c0-0.552,0.448-1,1-1h21c0.552,0,1,0.448,1,1V13.5z\n            M23.5,21.5 c0,0.552-0.448,1-1,1h-21c-0.552,0-1-0.448-1-1v-3c0-0.552,0.448-1,1-1h21c0.552,0,1,0.448,1,1V21.5z" }))); };

var WrappedScrollingIcon = function () { return (React__namespace.createElement(core.Icon, { size: 16 },
    React__namespace.createElement("path", { d: "M10.5,9.5c0,0.552-0.448,1-1,1h-8c-0.552,0-1-0.448-1-1v-8c0-0.552,0.448-1,1-1h8c0.552,0,1,0.448,1,1V9.5z\n            M23.5,9.5c0,0.552-0.448,1-1,1h-8c-0.552,0-1-0.448-1-1v-8c0-0.552,0.448-1,1-1h8c0.552,0,1,0.448,1,1V9.5z\n            M10.5,22.5 c0,0.552-0.448,1-1,1h-8c-0.552,0-1-0.448-1-1v-8c0-0.552,0.448-1,1-1h8c0.552,0,1,0.448,1,1V22.5z\n            M23.5,22.5c0,0.552-0.448,1-1,1 h-8c-0.552,0-1-0.448-1-1v-8c0-0.552,0.448-1,1-1h8c0.552,0,1,0.448,1,1V22.5z" }))); };

var SwitchScrollModeDecorator = function (_a) {
    var children = _a.children, mode = _a.mode, onClick = _a.onClick;
    var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
    var label = '';
    var icon = React__namespace.createElement(VerticalScrollingIcon, null);
    switch (mode) {
        case core.ScrollMode.Horizontal:
            label =
                l10n && l10n.scrollMode
                    ? l10n.scrollMode.horizontalScrolling
                    : 'Horizontal scrolling';
            icon = React__namespace.createElement(HorizontalScrollingIcon, null);
            break;
        case core.ScrollMode.Wrapped:
            label =
                l10n && l10n.scrollMode
                    ? l10n.scrollMode.wrappedScrolling
                    : 'Wrapped scrolling';
            icon = React__namespace.createElement(WrappedScrollingIcon, null);
            break;
        case core.ScrollMode.Vertical:
        default:
            label =
                l10n && l10n.scrollMode
                    ? l10n.scrollMode.verticalScrolling
                    : 'Vertical scrolling';
            icon = React__namespace.createElement(VerticalScrollingIcon, null);
            break;
    }
    return children({ icon: icon, label: label, onClick: onClick });
};

var TOOLTIP_OFFSET = { left: 0, top: 8 };
var SwitchScrollModeButton = function (_a) {
    var isSelected = _a.isSelected, mode = _a.mode, onClick = _a.onClick;
    var testId = '';
    switch (mode) {
        case core.ScrollMode.Horizontal:
            testId = 'scroll-mode__horizontal-button';
            break;
        case core.ScrollMode.Wrapped:
            testId = 'scroll-mode__wrapped-button';
            break;
        case core.ScrollMode.Vertical:
        default:
            testId = 'scroll-mode__vertical-button';
            break;
    }
    return (React__namespace.createElement(SwitchScrollModeDecorator, { mode: mode, onClick: onClick }, function (props) { return (React__namespace.createElement(core.Tooltip, { ariaControlsSuffix: "scroll-mode-switch", position: core.Position.BottomCenter, target: React__namespace.createElement(core.MinimalButton, { ariaLabel: props.label, isSelected: isSelected, testId: testId, onClick: props.onClick }, props.icon), content: function () { return props.label; }, offset: TOOLTIP_OFFSET })); }));
};

var useScrollMode = function (store) {
    var _a = React__namespace.useState(store.get('scrollMode') || core.ScrollMode.Vertical), scrollMode = _a[0], setScrollMode = _a[1];
    var handleScrollModeChanged = function (currentScrollMode) {
        setScrollMode(currentScrollMode);
    };
    React__namespace.useEffect(function () {
        store.subscribe('scrollMode', handleScrollModeChanged);
        return function () {
            store.unsubscribe('scrollMode', handleScrollModeChanged);
        };
    }, []);
    return { scrollMode: scrollMode };
};

var SwitchScrollMode = function (_a) {
    var children = _a.children, mode = _a.mode, store = _a.store;
    var scrollMode = useScrollMode(store).scrollMode;
    var onClick = function () {
        store.get('switchScrollMode')(mode);
    };
    var isSelected = scrollMode === mode;
    var defaultChildren = function (props) { return (React__namespace.createElement(SwitchScrollModeButton, { isSelected: isSelected, mode: props.mode, onClick: props.onClick })); };
    var render = children || defaultChildren;
    return render({
        isSelected: isSelected,
        mode: mode,
        onClick: onClick,
    });
};

var SwitchScrollModeMenuItem = function (_a) {
    var isSelected = _a.isSelected, mode = _a.mode, onClick = _a.onClick;
    var testId = '';
    switch (mode) {
        case core.ScrollMode.Horizontal:
            testId = 'scroll-mode__horizontal-menu';
            break;
        case core.ScrollMode.Wrapped:
            testId = 'scroll-mode__wrapped-menu';
            break;
        case core.ScrollMode.Vertical:
        default:
            testId = 'scroll-mode__vertical-menu';
            break;
    }
    return (React__namespace.createElement(SwitchScrollModeDecorator, { mode: mode, onClick: onClick }, function (props) { return (React__namespace.createElement(core.MenuItem, { checked: isSelected, icon: props.icon, testId: testId, onClick: props.onClick }, props.label)); }));
};

var scrollModePlugin = function () {
    var store = React__namespace.useMemo(function () {
        return core.createStore({
            scrollMode: core.ScrollMode.Vertical,
            switchScrollMode: function () {
            },
        });
    }, []);
    var SwitchScrollModeDecorator = function (props) { return React__namespace.createElement(SwitchScrollMode, __assign({}, props, { store: store })); };
    var SwitchScrollModeButtonDecorator = function (props) { return (React__namespace.createElement(SwitchScrollModeDecorator, { mode: props.mode }, function (p) { return (React__namespace.createElement(SwitchScrollModeButton, { isSelected: p.isSelected, mode: p.mode, onClick: function () {
            p.onClick();
        } })); })); };
    var SwitchScrollModeMenuItemDecorator = function (props) { return (React__namespace.createElement(SwitchScrollModeDecorator, { mode: props.mode }, function (p) { return (React__namespace.createElement(SwitchScrollModeMenuItem, { isSelected: p.isSelected, mode: p.mode, onClick: function () {
            p.onClick();
            props.onClick();
        } })); })); };
    return {
        install: function (pluginFunctions) {
            store.update('switchScrollMode', pluginFunctions.switchScrollMode);
        },
        onViewerStateChange: function (viewerState) {
            store.update('scrollMode', viewerState.scrollMode);
            return viewerState;
        },
        switchScrollMode: function (mode) {
            store.get('switchScrollMode')(mode);
        },
        SwitchScrollMode: SwitchScrollModeDecorator,
        SwitchScrollModeButton: SwitchScrollModeButtonDecorator,
        SwitchScrollModeMenuItem: SwitchScrollModeMenuItemDecorator,
    };
};

exports.HorizontalScrollingIcon = HorizontalScrollingIcon;
exports.VerticalScrollingIcon = VerticalScrollingIcon;
exports.WrappedScrollingIcon = WrappedScrollingIcon;
exports.scrollModePlugin = scrollModePlugin;
