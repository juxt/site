export { Provider } from './core/Provider';
export { atom } from './core/atom';
export { useAtom } from './core/useAtom';
export { useAtomValue } from './core/useAtomValue';
export { useSetAtom } from './core/useSetAtom';
export { createStoreForExport as unstable_createStore } from './core/store';
export { Atom, WritableAtom, PrimitiveAtom } from './core/atom';
export { Getter, Setter, ExtractAtomValue, ExtractAtomUpdate, SetStateAction, } from './core/typeUtils';
/**
 * This is exported for internal use only.
 * It can change without notice. Do not use it in application code.
 */
export { getScopeContext as SECRET_INTERNAL_getScopeContext } from './core/contexts';
/**
 * This is exported for internal use only.
 * It can change without notice. Do not use it in application code.
 */
export { registerPromiseAbort as SECRET_INTERNAL_registerPromiseAbort } from './core/suspensePromise';
declare type Awaited<T> = T extends Promise<infer V> ? V : T;