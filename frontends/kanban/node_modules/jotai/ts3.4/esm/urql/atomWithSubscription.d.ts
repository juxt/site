import { AnyVariables, Client, OperationContext, OperationResult, TypedDocumentNode } from '@urql/core';
import { Getter, WritableAtom } from 'jotai';
declare type AtomWithSubscriptionAction = {
    type: 'refetch';
};
declare type OperationResultWithData<Data, Variables extends AnyVariables> = Pick<OperationResult<Data, Variables>, Exclude<keyof OperationResult<Data, Variables>, 'data'>> & {
    data: Data;
};
declare type SubscriptionArgs<Data, Variables extends AnyVariables> = {
    query: TypedDocumentNode<Data, Variables> | string;
    variables: Variables;
    context?: Partial<OperationContext>;
};
declare type SubscriptionArgsWithPause<Data, Variables extends AnyVariables> = SubscriptionArgs<Data, Variables> & {
    pause: boolean;
};
export declare function atomWithSubscription<Data, Variables extends AnyVariables>(createSubscriptionArgs: (get: Getter) => SubscriptionArgs<Data, Variables>, getClient?: (get: Getter) => Client): WritableAtom<OperationResultWithData<Data, Variables>, AtomWithSubscriptionAction>;
export declare function atomWithSubscription<Data, Variables extends AnyVariables>(createSubscriptionArgs: (get: Getter) => SubscriptionArgsWithPause<Data, Variables>, getClient?: (get: Getter) => Client): WritableAtom<OperationResultWithData<Data, Variables> | null, AtomWithSubscriptionAction>;
export {};
declare type Awaited<T> = T extends Promise<infer V> ? V : T;