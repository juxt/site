"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.plugin = void 0;
const index_1 = require("./zod/index");
const schema_ast_1 = require("@graphql-codegen/schema-ast");
const index_2 = require("./yup/index");
const plugin_helpers_1 = require("@graphql-codegen/plugin-helpers");
const plugin = (schema, _documents, config) => {
    const { schema: _schema, ast } = (0, schema_ast_1.transformSchemaAST)(schema, config);
    const _a = schemaVisitor(_schema, config), { buildImports, initialEmit } = _a, visitor = __rest(_a, ["buildImports", "initialEmit"]);
    const result = (0, plugin_helpers_1.oldVisit)(ast, {
        leave: visitor,
    });
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    const generated = result.definitions.filter(def => typeof def === 'string');
    return {
        prepend: buildImports(),
        content: [initialEmit(), ...generated].join('\n'),
    };
};
exports.plugin = plugin;
const schemaVisitor = (schema, config) => {
    if ((config === null || config === void 0 ? void 0 : config.schema) === 'zod') {
        return (0, index_1.ZodSchemaVisitor)(schema, config);
    }
    return (0, index_2.YupSchemaVisitor)(schema, config);
};
