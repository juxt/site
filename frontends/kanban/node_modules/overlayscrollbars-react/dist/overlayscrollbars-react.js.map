{"version":3,"file":"overlayscrollbars-react.js","sources":["../src/OverlayScrollbarsComponent.tsx"],"sourcesContent":["import React, { Component, RefObject } from 'react';\nimport OverlayScrollbars from \"overlayscrollbars\";\n\nexport interface OverlayScrollbarsComponentProps extends React.HTMLAttributes<HTMLDivElement> {\n    children?: any;\n    options?: OverlayScrollbars.Options;\n    extensions?: OverlayScrollbars.Extensions;\n}\nexport interface OverlayScrollbarsComponentState { }\n\nexport class OverlayScrollbarsComponent extends Component<OverlayScrollbarsComponentProps, OverlayScrollbarsComponentState> {\n    private _osInstance: OverlayScrollbars | null = null;\n    private _osTargetRef: RefObject<HTMLDivElement>;\n\n    constructor(props: OverlayScrollbarsComponentProps) {\n        super(props);\n        this._osTargetRef = React.createRef();\n    }\n\n    osInstance(): OverlayScrollbars | null {\n        return this._osInstance;\n    }\n\n    osTarget(): HTMLDivElement | null {\n        return this._osTargetRef.current || null;\n    }\n\n    componentDidMount() {\n        this._osInstance = OverlayScrollbars(this.osTarget(), this.props.options || {}, this.props.extensions);\n        mergeHostClassNames(this._osInstance, this.props.className);\n    }\n\n    componentWillUnmount() {\n        if (OverlayScrollbars.valid(this._osInstance)) {\n            this._osInstance.destroy();\n            this._osInstance = null;\n        }\n    }\n\n    componentDidUpdate(prevProps: OverlayScrollbarsComponentProps) {\n        if (OverlayScrollbars.valid(this._osInstance)) {\n            this._osInstance.options(this.props.options);\n\n            if (prevProps.className !== this.props.className) {\n                mergeHostClassNames(this._osInstance, this.props.className);\n            }\n        }\n    }\n\n    render() {\n        const {\n            options,\n            extensions,\n            children,\n            className,\n            ...divProps\n        } = this.props;\n\n        return (\n            <div className=\"os-host\" {...divProps} ref={this._osTargetRef}>\n                <div className=\"os-resize-observer-host\"></div>\n                <div className=\"os-padding\">\n                    <div className=\"os-viewport\">\n                        <div className=\"os-content\">\n                            {this.props.children}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"os-scrollbar os-scrollbar-horizontal \">\n                    <div className=\"os-scrollbar-track\">\n                        <div className=\"os-scrollbar-handle\"></div>\n                    </div>\n                </div>\n                <div className=\"os-scrollbar os-scrollbar-vertical\">\n                    <div className=\"os-scrollbar-track\">\n                        <div className=\"os-scrollbar-handle\"></div>\n                    </div>\n                </div>\n                <div className=\"os-scrollbar-corner\"></div>\n            </div>\n        );\n    }\n}\n\nfunction mergeHostClassNames(osInstance: OverlayScrollbars, className: string) {\n    if (OverlayScrollbars.valid(osInstance)) {\n        const { host } = osInstance.getElements();\n        const regex = new RegExp(`(^os-host([-_].+|)$)|${osInstance.options().className.replace(/\\s/g, \"$|\")}$`, 'g');\n        const osClassNames = host.className.split(' ')\n            .filter(name => name.match(regex))\n            .join(' ');\n\n        host.className = `${osClassNames} ${className || ''}`;\n    }\n}"],"names":["React","Component"],"mappings":"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"}