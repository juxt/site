{"mappings":"IAYgCA,EAAMC,KAAND,KAAMC,mBACpCC,OAAOC,KAAKF,GAAQG,SAAQ,SAASC,GACvB,YAARA,GAA6B,eAARA,GAIzBH,OAAOI,eAAeN,EAAMK,EAAK,CAC/BE,YAAY,EACZC,IAAK,WACH,OAAOP,EAAOI,SAKbL,GC6ET,SAASS,KAAwBC,GAC/B,MAAMC,EAAYD,EAAO,GACzB,GAAsB,IAAlBA,EAAOE,OAAc,OAAOD,EAEhC,MAAME,EAA2B,KAC/B,MAAMC,EAAaJ,EAAOK,KAAKF,IAAD,CAC5BG,SAAUH,IACVI,UAAWJ,EAAYI,cAGzB,OAAO,SAA2BC,GAChC,MAAMC,EAAaL,EAAWM,QAAO,CAACD,GAAcH,SAAAA,EAAUC,UAAAA,MAMrD,IAAKE,KAFOH,EAASE,GACK,UAASD,QAEzC,IAEH,OAAOI,EAAMC,SAAQ,KAAA,CAAS,CAAE,UAASX,EAAUM,aAAcE,KAAe,CAACA,MAKrF,OADAN,EAAYI,UAAYN,EAAUM,UAC3BJ,wBA9HT,SACEU,EACAC,GAEA,MAAMC,eAAUJ,EAAMK,cAA4CF,GAElE,SAASG,EAASC,GAChB,MAAMC,SAAEA,KAAaC,GAAYF,EAG3BG,EAAQV,EAAMC,SAAQ,IAAMQ,GAAS5B,OAAO8B,OAAOF,iBACzD,OAAOG,EAAAC,cAACT,EAAQE,SAAT,CAAkBI,MAAOA,GAAQF,GAY1C,OADAF,EAASQ,YAAcZ,EAAoB,WACpC,CAACI,EATR,SAAoBS,GAClB,MAAMN,EAAUT,EAAMgB,WAAWZ,GACjC,GAAIK,EAAS,OAAOA,EACpB,QAAuBQ,IAAnBd,EAA8B,OAAOA,EAEzC,MAAM,IAAIe,MAAO,KAAIH,6BAAwCb,qCAkBjE,SAA4BN,EAAmBuB,EAAwC,IACrF,IAAIC,EAAyB,GA0C7B,MAAM5B,EAA2B,KAC/B,MAAM6B,EAAgBD,EAAgB1B,KAAKS,gBAClCH,EAAMK,cAAcF,KAE7B,OAAO,SAAkBmB,GACvB,MAAMC,GAAWD,MAAAA,OAAA,EAAAA,EAAQ1B,KAAcyB,EACvC,OAAOrB,EAAMC,SACX,KAAA,CAAS,CAAE,UAASL,KAAc,IAAK0B,EAAO1B,CAACA,GAAY2B,MAC3D,CAACD,EAAOC,MAMd,OADA/B,EAAYI,UAAYA,EACjB,CAlDP,SACEM,EACAC,GAEA,MAAMqB,eAAcxB,EAAMK,cAA4CF,GAChEsB,EAAQL,EAAgB7B,OAG9B,SAASe,EACPC,GAEA,MAAMe,MAAEA,EAAFd,SAASA,KAAaC,GAAYF,EAClCH,GAAUkB,MAAAA,OAAA,EAAAA,EAAQ1B,GAAW6B,KAAUD,EAGvCd,EAAQV,EAAMC,SAAQ,IAAMQ,GAAS5B,OAAO8B,OAAOF,iBACzD,OAAOG,EAAAC,cAACT,EAAQE,SAAT,CAAkBI,MAAOA,GAAQF,GAa1C,OAvBAY,EAAkB,IAAIA,EAAiBjB,GAsBvCG,EAASQ,YAAcZ,EAAoB,WACpC,CAACI,EAVR,SAAoBS,EAAsBO,GACxC,MAAMlB,GAAUkB,MAAAA,OAAA,EAAAA,EAAQ1B,GAAW6B,KAAUD,EACvCf,EAAUT,EAAMgB,WAAWZ,GACjC,GAAIK,EAAS,OAAOA,EACpB,QAAuBQ,IAAnBd,EAA8B,OAAOA,EAEzC,MAAM,IAAIe,MAAO,KAAIH,6BAAwCb,UAyB1Cd,EAAqBI,KAAgB2B","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/react/context/src/createContext.tsx"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$reexport(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","import * as React from 'react';\n\nfunction createContext<ContextValueType extends object | null>(\n  rootComponentName: string,\n  defaultContext?: ContextValueType\n) {\n  const Context = React.createContext<ContextValueType | undefined>(defaultContext);\n\n  function Provider(props: ContextValueType & { children: React.ReactNode }) {\n    const { children, ...context } = props;\n    // Only re-memoize when prop values change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const value = React.useMemo(() => context, Object.values(context)) as ContextValueType;\n    return <Context.Provider value={value}>{children}</Context.Provider>;\n  }\n\n  function useContext(consumerName: string) {\n    const context = React.useContext(Context);\n    if (context) return context;\n    if (defaultContext !== undefined) return defaultContext;\n    // if a defaultContext wasn't specified, it's a required context.\n    throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n  }\n\n  Provider.displayName = rootComponentName + 'Provider';\n  return [Provider, useContext] as const;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * createContextScope\n * -----------------------------------------------------------------------------------------------*/\n\ntype Scope<C = any> = { [scopeName: string]: React.Context<C>[] } | undefined;\ntype ScopeHook = (scope: Scope) => { [__scopeProp: string]: Scope };\ninterface CreateScope {\n  scopeName: string;\n  (): ScopeHook;\n}\n\nfunction createContextScope(scopeName: string, createContextScopeDeps: CreateScope[] = []) {\n  let defaultContexts: any[] = [];\n\n  /* -----------------------------------------------------------------------------------------------\n   * createContext\n   * ---------------------------------------------------------------------------------------------*/\n\n  function createContext<ContextValueType extends object | null>(\n    rootComponentName: string,\n    defaultContext?: ContextValueType\n  ) {\n    const BaseContext = React.createContext<ContextValueType | undefined>(defaultContext);\n    const index = defaultContexts.length;\n    defaultContexts = [...defaultContexts, defaultContext];\n\n    function Provider(\n      props: ContextValueType & { scope: Scope<ContextValueType>; children: React.ReactNode }\n    ) {\n      const { scope, children, ...context } = props;\n      const Context = scope?.[scopeName][index] || BaseContext;\n      // Only re-memoize when prop values change\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const value = React.useMemo(() => context, Object.values(context)) as ContextValueType;\n      return <Context.Provider value={value}>{children}</Context.Provider>;\n    }\n\n    function useContext(consumerName: string, scope: Scope<ContextValueType | undefined>) {\n      const Context = scope?.[scopeName][index] || BaseContext;\n      const context = React.useContext(Context);\n      if (context) return context;\n      if (defaultContext !== undefined) return defaultContext;\n      // if a defaultContext wasn't specified, it's a required context.\n      throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n    }\n\n    Provider.displayName = rootComponentName + 'Provider';\n    return [Provider, useContext] as const;\n  }\n\n  /* -----------------------------------------------------------------------------------------------\n   * createScope\n   * ---------------------------------------------------------------------------------------------*/\n\n  const createScope: CreateScope = () => {\n    const scopeContexts = defaultContexts.map((defaultContext) => {\n      return React.createContext(defaultContext);\n    });\n    return function useScope(scope: Scope) {\n      const contexts = scope?.[scopeName] || scopeContexts;\n      return React.useMemo(\n        () => ({ [`__scope${scopeName}`]: { ...scope, [scopeName]: contexts } }),\n        [scope, contexts]\n      );\n    };\n  };\n\n  createScope.scopeName = scopeName;\n  return [createContext, composeContextScopes(createScope, ...createContextScopeDeps)] as const;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * composeContextScopes\n * -----------------------------------------------------------------------------------------------*/\n\nfunction composeContextScopes(...scopes: CreateScope[]) {\n  const baseScope = scopes[0];\n  if (scopes.length === 1) return baseScope;\n\n  const createScope: CreateScope = () => {\n    const scopeHooks = scopes.map((createScope) => ({\n      useScope: createScope(),\n      scopeName: createScope.scopeName,\n    }));\n\n    return function useComposedScopes(overrideScopes) {\n      const nextScopes = scopeHooks.reduce((nextScopes, { useScope, scopeName }) => {\n        // We are calling a hook inside a callback which React warns against to avoid inconsistent\n        // renders, however, scoping doesn't have render side effects so we ignore the rule.\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const scopeProps = useScope(overrideScopes);\n        const currentScope = scopeProps[`__scope${scopeName}`];\n        return { ...nextScopes, ...currentScope };\n      }, {});\n\n      return React.useMemo(() => ({ [`__scope${baseScope.scopeName}`]: nextScopes }), [nextScopes]);\n    };\n  };\n\n  createScope.scopeName = baseScope.scopeName;\n  return createScope;\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nexport { createContext, createContextScope };\nexport type { CreateScope, Scope };\n"],"names":["dest","source","Object","keys","forEach","key","defineProperty","enumerable","get","composeContextScopes","scopes","baseScope","length","createScope","scopeHooks","map","useScope","scopeName","overrideScopes","nextScopes","reduce","React","useMemo","rootComponentName","defaultContext","Context","createContext","Provider","props","children","context","value","values","_react","createElement","displayName","consumerName","useContext","undefined","Error","createContextScopeDeps","defaultContexts","scopeContexts","scope","contexts","BaseContext","index"],"version":3,"file":"index.js.map"}