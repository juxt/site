{"version":3,"file":"index.js","sources":["../src/schema-list.js"],"sourcesContent":["import {findWrapping, liftTarget, canSplit, ReplaceAroundStep} from \"prosemirror-transform\"\nimport {Slice, Fragment, NodeRange} from \"prosemirror-model\"\n\nconst olDOM = [\"ol\", 0], ulDOM = [\"ul\", 0], liDOM = [\"li\", 0]\n\n// :: NodeSpec\n// An ordered list [node spec](#model.NodeSpec). Has a single\n// attribute, `order`, which determines the number at which the list\n// starts counting, and defaults to 1. Represented as an `<ol>`\n// element.\nexport const orderedList = {\n  attrs: {order: {default: 1}},\n  parseDOM: [{tag: \"ol\", getAttrs(dom) {\n    return {order: dom.hasAttribute(\"start\") ? +dom.getAttribute(\"start\") : 1}\n  }}],\n  toDOM(node) {\n    return node.attrs.order == 1 ? olDOM : [\"ol\", {start: node.attrs.order}, 0]\n  }\n}\n\n// :: NodeSpec\n// A bullet list node spec, represented in the DOM as `<ul>`.\nexport const bulletList = {\n  parseDOM: [{tag: \"ul\"}],\n  toDOM() { return ulDOM }\n}\n\n// :: NodeSpec\n// A list item (`<li>`) spec.\nexport const listItem = {\n  parseDOM: [{tag: \"li\"}],\n  toDOM() { return liDOM },\n  defining: true\n}\n\nfunction add(obj, props) {\n  let copy = {}\n  for (let prop in obj) copy[prop] = obj[prop]\n  for (let prop in props) copy[prop] = props[prop]\n  return copy\n}\n\n// :: (OrderedMap<NodeSpec>, string, ?string) → OrderedMap<NodeSpec>\n// Convenience function for adding list-related node types to a map\n// specifying the nodes for a schema. Adds\n// [`orderedList`](#schema-list.orderedList) as `\"ordered_list\"`,\n// [`bulletList`](#schema-list.bulletList) as `\"bullet_list\"`, and\n// [`listItem`](#schema-list.listItem) as `\"list_item\"`.\n//\n// `itemContent` determines the content expression for the list items.\n// If you want the commands defined in this module to apply to your\n// list structure, it should have a shape like `\"paragraph block*\"` or\n// `\"paragraph (ordered_list | bullet_list)*\"`. `listGroup` can be\n// given to assign a group name to the list node types, for example\n// `\"block\"`.\nexport function addListNodes(nodes, itemContent, listGroup) {\n  return nodes.append({\n    ordered_list: add(orderedList, {content: \"list_item+\", group: listGroup}),\n    bullet_list: add(bulletList, {content: \"list_item+\", group: listGroup}),\n    list_item: add(listItem, {content: itemContent})\n  })\n}\n\n// :: (NodeType, ?Object) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool\n// Returns a command function that wraps the selection in a list with\n// the given type an attributes. If `dispatch` is null, only return a\n// value to indicate whether this is possible, but don't actually\n// perform the change.\nexport function wrapInList(listType, attrs) {\n  return function(state, dispatch) {\n    let {$from, $to} = state.selection\n    let range = $from.blockRange($to), doJoin = false, outerRange = range\n    if (!range) return false\n    // This is at the top of an existing list item\n    if (range.depth >= 2 && $from.node(range.depth - 1).type.compatibleContent(listType) && range.startIndex == 0) {\n      // Don't do anything if this is the top of the list\n      if ($from.index(range.depth - 1) == 0) return false\n      let $insert = state.doc.resolve(range.start - 2)\n      outerRange = new NodeRange($insert, $insert, range.depth)\n      if (range.endIndex < range.parent.childCount)\n        range = new NodeRange($from, state.doc.resolve($to.end(range.depth)), range.depth)\n      doJoin = true\n    }\n    let wrap = findWrapping(outerRange, listType, attrs, range)\n    if (!wrap) return false\n    if (dispatch) dispatch(doWrapInList(state.tr, range, wrap, doJoin, listType).scrollIntoView())\n    return true\n  }\n}\n\nfunction doWrapInList(tr, range, wrappers, joinBefore, listType) {\n  let content = Fragment.empty\n  for (let i = wrappers.length - 1; i >= 0; i--)\n    content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content))\n\n  tr.step(new ReplaceAroundStep(range.start - (joinBefore ? 2 : 0), range.end, range.start, range.end,\n                                new Slice(content, 0, 0), wrappers.length, true))\n\n  let found = 0\n  for (let i = 0; i < wrappers.length; i++) if (wrappers[i].type == listType) found = i + 1\n  let splitDepth = wrappers.length - found\n\n  let splitPos = range.start + wrappers.length - (joinBefore ? 2 : 0), parent = range.parent\n  for (let i = range.startIndex, e = range.endIndex, first = true; i < e; i++, first = false) {\n    if (!first && canSplit(tr.doc, splitPos, splitDepth)) {\n      tr.split(splitPos, splitDepth)\n      splitPos += 2 * splitDepth\n    }\n    splitPos += parent.child(i).nodeSize\n  }\n  return tr\n}\n\n// :: (NodeType) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool\n// Build a command that splits a non-empty textblock at the top level\n// of a list item by also splitting that list item.\nexport function splitListItem(itemType) {\n  return function(state, dispatch) {\n    let {$from, $to, node} = state.selection\n    if ((node && node.isBlock) || $from.depth < 2 || !$from.sameParent($to)) return false\n    let grandParent = $from.node(-1)\n    if (grandParent.type != itemType) return false\n    if ($from.parent.content.size == 0 && $from.node(-1).childCount == $from.indexAfter(-1)) {\n      // In an empty block. If this is a nested list, the wrapping\n      // list item should be split. Otherwise, bail out and let next\n      // command handle lifting.\n      if ($from.depth == 3 || $from.node(-3).type != itemType ||\n          $from.index(-2) != $from.node(-2).childCount - 1) return false\n      if (dispatch) {\n        let wrap = Fragment.empty\n        let depthBefore = $from.index(-1) ? 1 : $from.index(-2) ? 2 : 3\n        // Build a fragment containing empty versions of the structure\n        // from the outer list item to the parent node of the cursor\n        for (let d = $from.depth - depthBefore; d >= $from.depth - 3; d--)\n          wrap = Fragment.from($from.node(d).copy(wrap))\n        let depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount ? 1\n            : $from.indexAfter(-2) < $from.node(-3).childCount ? 2 : 3\n        // Add a second list item with an empty default start node\n        wrap = wrap.append(Fragment.from(itemType.createAndFill()))\n        let start = $from.before($from.depth - (depthBefore - 1))\n        let tr = state.tr.replace(start, $from.after(-depthAfter), new Slice(wrap, 4 - depthBefore, 0))\n        let sel = -1\n        tr.doc.nodesBetween(start, tr.doc.content.size, (node, pos) => {\n          if (sel > -1) return false\n          if (node.isTextblock && node.content.size == 0) sel = pos + 1\n        })\n        if (sel > -1) tr.setSelection(state.selection.constructor.near(tr.doc.resolve(sel)))\n        dispatch(tr.scrollIntoView())\n      }\n      return true\n    }\n    let nextType = $to.pos == $from.end() ? grandParent.contentMatchAt(0).defaultType : null\n    let tr = state.tr.delete($from.pos, $to.pos)\n    let types = nextType && [null, {type: nextType}]\n    if (!canSplit(tr.doc, $from.pos, 2, types)) return false\n    if (dispatch) dispatch(tr.split($from.pos, 2, types).scrollIntoView())\n    return true\n  }\n}\n\n// :: (NodeType) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool\n// Create a command to lift the list item around the selection up into\n// a wrapping list.\nexport function liftListItem(itemType) {\n  return function(state, dispatch) {\n    let {$from, $to} = state.selection\n    let range = $from.blockRange($to, node => node.childCount && node.firstChild.type == itemType)\n    if (!range) return false\n    if (!dispatch) return true\n    if ($from.node(range.depth - 1).type == itemType) // Inside a parent list\n      return liftToOuterList(state, dispatch, itemType, range)\n    else // Outer list node\n      return liftOutOfList(state, dispatch, range)\n  }\n}\n\nfunction liftToOuterList(state, dispatch, itemType, range) {\n  let tr = state.tr, end = range.end, endOfList = range.$to.end(range.depth)\n  if (end < endOfList) {\n    // There are siblings after the lifted items, which must become\n    // children of the last item\n    tr.step(new ReplaceAroundStep(end - 1, endOfList, end, endOfList,\n                                  new Slice(Fragment.from(itemType.create(null, range.parent.copy())), 1, 0), 1, true))\n    range = new NodeRange(tr.doc.resolve(range.$from.pos), tr.doc.resolve(endOfList), range.depth)\n  }\n  dispatch(tr.lift(range, liftTarget(range)).scrollIntoView())\n  return true\n}\n\nfunction liftOutOfList(state, dispatch, range) {\n  let tr = state.tr, list = range.parent\n  // Merge the list items into a single big item\n  for (let pos = range.end, i = range.endIndex - 1, e = range.startIndex; i > e; i--) {\n    pos -= list.child(i).nodeSize\n    tr.delete(pos - 1, pos + 1)\n  }\n  let $start = tr.doc.resolve(range.start), item = $start.nodeAfter\n  if (tr.mapping.map(range.end) != range.start + $start.nodeAfter.nodeSize) return false\n  let atStart = range.startIndex == 0, atEnd = range.endIndex == list.childCount\n  let parent = $start.node(-1), indexBefore = $start.index(-1)\n  if (!parent.canReplace(indexBefore + (atStart ? 0 : 1), indexBefore + 1,\n                         item.content.append(atEnd ? Fragment.empty : Fragment.from(list))))\n    return false\n  let start = $start.pos, end = start + item.nodeSize\n  // Strip off the surrounding list. At the sides where we're not at\n  // the end of the list, the existing list is closed. At sides where\n  // this is the end, it is overwritten to its end.\n  tr.step(new ReplaceAroundStep(start - (atStart ? 1 : 0), end + (atEnd ? 1 : 0), start + 1, end - 1,\n                                new Slice((atStart ? Fragment.empty : Fragment.from(list.copy(Fragment.empty)))\n                                          .append(atEnd ? Fragment.empty : Fragment.from(list.copy(Fragment.empty))),\n                                          atStart ? 0 : 1, atEnd ? 0 : 1), atStart ? 0 : 1))\n  dispatch(tr.scrollIntoView())\n  return true\n}\n\n// :: (NodeType) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool\n// Create a command to sink the list item around the selection down\n// into an inner list.\nexport function sinkListItem(itemType) {\n  return function(state, dispatch) {\n    let {$from, $to} = state.selection\n    let range = $from.blockRange($to, node => node.childCount && node.firstChild.type == itemType)\n    if (!range) return false\n    let startIndex = range.startIndex\n    if (startIndex == 0) return false\n    let parent = range.parent, nodeBefore = parent.child(startIndex - 1)\n    if (nodeBefore.type != itemType) return false\n\n    if (dispatch) {\n      let nestedBefore = nodeBefore.lastChild && nodeBefore.lastChild.type == parent.type\n      let inner = Fragment.from(nestedBefore ? itemType.create() : null)\n      let slice = new Slice(Fragment.from(itemType.create(null, Fragment.from(parent.type.create(null, inner)))),\n                            nestedBefore ? 3 : 1, 0)\n      let before = range.start, after = range.end\n      dispatch(state.tr.step(new ReplaceAroundStep(before - (nestedBefore ? 3 : 1), after,\n                                                   before, after, slice, 1, true))\n               .scrollIntoView())\n    }\n    return true\n  }\n}\n"],"names":["const","let","prop","NodeRange","findWrapping","Fragment","ReplaceAroundStep","Slice","i","canSplit","tr","liftTarget"],"mappings":"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"}