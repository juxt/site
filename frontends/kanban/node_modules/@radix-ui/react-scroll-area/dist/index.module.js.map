{"mappings":"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","sources":["./packages/react/scroll-area/src/ScrollArea.tsx","./packages/react/scroll-area/src/useStateMachine.ts"],"sourcesContent":["/// <reference types=\"resize-observer-browser\" />\n\nimport * as React from 'react';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Presence } from '@radix-ui/react-presence';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useDirection } from '@radix-ui/react-use-direction';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { clamp } from '@radix-ui/number';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useStateMachine } from './useStateMachine';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\ntype Direction = 'ltr' | 'rtl';\ntype Sizes = {\n  content: number;\n  viewport: number;\n  scrollbar: {\n    size: number;\n    paddingStart: number;\n    paddingEnd: number;\n  };\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollArea\n * -----------------------------------------------------------------------------------------------*/\n\nconst SCROLL_AREA_NAME = 'ScrollArea';\n\ntype ScopedProps<P> = P & { __scopeScrollArea?: Scope };\nconst [createScrollAreaContext, createScrollAreaScope] = createContextScope(SCROLL_AREA_NAME);\n\ntype ScrollAreaContextValue = {\n  type: 'auto' | 'always' | 'scroll' | 'hover';\n  dir: Direction;\n  scrollHideDelay: number;\n  scrollArea: ScrollAreaElement | null;\n  viewport: ScrollAreaViewportElement | null;\n  onViewportChange(viewport: ScrollAreaViewportElement | null): void;\n  content: HTMLDivElement | null;\n  onContentChange(content: HTMLDivElement): void;\n  scrollbarX: ScrollAreaScrollbarElement | null;\n  onScrollbarXChange(scrollbar: ScrollAreaScrollbarElement | null): void;\n  scrollbarXEnabled: boolean;\n  onScrollbarXEnabledChange(rendered: boolean): void;\n  scrollbarY: ScrollAreaScrollbarElement | null;\n  onScrollbarYChange(scrollbar: ScrollAreaScrollbarElement | null): void;\n  scrollbarYEnabled: boolean;\n  onScrollbarYEnabledChange(rendered: boolean): void;\n  onCornerWidthChange(width: number): void;\n  onCornerHeightChange(height: number): void;\n};\n\nconst [ScrollAreaProvider, useScrollAreaContext] =\n  createScrollAreaContext<ScrollAreaContextValue>(SCROLL_AREA_NAME);\n\ntype ScrollAreaElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface ScrollAreaProps extends PrimitiveDivProps {\n  type?: ScrollAreaContextValue['type'];\n  dir?: ScrollAreaContextValue['dir'];\n  scrollHideDelay?: number;\n}\n\nconst ScrollArea = React.forwardRef<ScrollAreaElement, ScrollAreaProps>(\n  (props: ScopedProps<ScrollAreaProps>, forwardedRef) => {\n    const { __scopeScrollArea, type = 'hover', scrollHideDelay = 600, ...scrollAreaProps } = props;\n    const [scrollArea, setScrollArea] = React.useState<ScrollAreaElement | null>(null);\n    const [viewport, setViewport] = React.useState<ScrollAreaViewportElement | null>(null);\n    const [content, setContent] = React.useState<HTMLDivElement | null>(null);\n    const [scrollbarX, setScrollbarX] = React.useState<ScrollAreaScrollbarElement | null>(null);\n    const [scrollbarY, setScrollbarY] = React.useState<ScrollAreaScrollbarElement | null>(null);\n    const [cornerWidth, setCornerWidth] = React.useState(0);\n    const [cornerHeight, setCornerHeight] = React.useState(0);\n    const [scrollbarXEnabled, setScrollbarXEnabled] = React.useState(false);\n    const [scrollbarYEnabled, setScrollbarYEnabled] = React.useState(false);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setScrollArea(node));\n    const computedDirection = useDirection(scrollArea, scrollAreaProps.dir);\n\n    return (\n      <ScrollAreaProvider\n        scope={__scopeScrollArea}\n        type={type}\n        dir={computedDirection}\n        scrollHideDelay={scrollHideDelay}\n        scrollArea={scrollArea}\n        viewport={viewport}\n        onViewportChange={setViewport}\n        content={content}\n        onContentChange={setContent}\n        scrollbarX={scrollbarX}\n        onScrollbarXChange={setScrollbarX}\n        scrollbarXEnabled={scrollbarXEnabled}\n        onScrollbarXEnabledChange={setScrollbarXEnabled}\n        scrollbarY={scrollbarY}\n        onScrollbarYChange={setScrollbarY}\n        scrollbarYEnabled={scrollbarYEnabled}\n        onScrollbarYEnabledChange={setScrollbarYEnabled}\n        onCornerWidthChange={setCornerWidth}\n        onCornerHeightChange={setCornerHeight}\n      >\n        <Primitive.div\n          {...scrollAreaProps}\n          ref={composedRefs}\n          style={{\n            position: 'relative',\n            // Pass corner sizes as CSS vars to reduce re-renders of context consumers\n            ['--radix-scroll-area-corner-width' as any]: cornerWidth + 'px',\n            ['--radix-scroll-area-corner-height' as any]: cornerHeight + 'px',\n            ...props.style,\n          }}\n        />\n      </ScrollAreaProvider>\n    );\n  }\n);\n\nScrollArea.displayName = SCROLL_AREA_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaViewport\n * -----------------------------------------------------------------------------------------------*/\n\nconst VIEWPORT_NAME = 'ScrollAreaViewport';\n\ntype ScrollAreaViewportElement = React.ElementRef<typeof Primitive.div>;\ninterface ScrollAreaViewportProps extends PrimitiveDivProps {}\n\nconst ScrollAreaViewport = React.forwardRef<ScrollAreaViewportElement, ScrollAreaViewportProps>(\n  (props: ScopedProps<ScrollAreaViewportProps>, forwardedRef) => {\n    const { __scopeScrollArea, children, ...viewportProps } = props;\n    const context = useScrollAreaContext(VIEWPORT_NAME, __scopeScrollArea);\n    const ref = React.useRef<ScrollAreaViewportElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref, context.onViewportChange);\n    return (\n      <>\n        {/* Hide scrollbars cross-browser and enable momentum scroll for touch devices */}\n        <style\n          dangerouslySetInnerHTML={{\n            __html: `[data-radix-scroll-area-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-scroll-area-viewport]::-webkit-scrollbar{display:none}`,\n          }}\n        />\n        <Primitive.div\n          data-radix-scroll-area-viewport=\"\"\n          {...viewportProps}\n          ref={composedRefs}\n          style={{\n            /**\n             * We don't support `visible` because the intention is to have at least one scrollbar\n             * if this component is used and `visible` will behave like `auto` in that case\n             * https://developer.mozilla.org/en-US/docs/Web/CSS/overflowed#description\n             *\n             * We don't handle `auto` because the intention is for the native implementation\n             * to be hidden if using this component. We just want to ensure the node is scrollable\n             * so could have used either `scroll` or `auto` here. We picked `scroll` to prevent\n             * the browser from having to work out whether to render native scrollbars or not,\n             * we tell it to with the intention of hiding them in CSS.\n             */\n            overflowX: context.scrollbarXEnabled ? 'scroll' : 'hidden',\n            overflowY: context.scrollbarYEnabled ? 'scroll' : 'hidden',\n            ...props.style,\n          }}\n        >\n          {/**\n           * `display: table` ensures our content div will match the size of its children in both\n           * horizontal and vertical axis so we can determine if scroll width/height changed and\n           * recalculate thumb sizes. This doesn't account for children with *percentage*\n           * widths that change. We'll wait to see what use-cases consumers come up with there\n           * before trying to resolve it.\n           */}\n          <div ref={context.onContentChange} style={{ minWidth: '100%', display: 'table' }}>\n            {children}\n          </div>\n        </Primitive.div>\n      </>\n    );\n  }\n);\n\nScrollAreaViewport.displayName = VIEWPORT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaScrollbar\n * -----------------------------------------------------------------------------------------------*/\n\nconst SCROLLBAR_NAME = 'ScrollAreaScrollbar';\n\ntype ScrollAreaScrollbarElement = ScrollAreaScrollbarVisibleElement;\ninterface ScrollAreaScrollbarProps extends ScrollAreaScrollbarVisibleProps {\n  forceMount?: true;\n}\n\nconst ScrollAreaScrollbar = React.forwardRef<ScrollAreaScrollbarElement, ScrollAreaScrollbarProps>(\n  (props: ScopedProps<ScrollAreaScrollbarProps>, forwardedRef) => {\n    const { forceMount, ...scrollbarProps } = props;\n    const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n    const { onScrollbarXEnabledChange, onScrollbarYEnabledChange } = context;\n    const isHorizontal = props.orientation === 'horizontal';\n\n    React.useEffect(() => {\n      isHorizontal ? onScrollbarXEnabledChange(true) : onScrollbarYEnabledChange(true);\n      return () => {\n        isHorizontal ? onScrollbarXEnabledChange(false) : onScrollbarYEnabledChange(false);\n      };\n    }, [isHorizontal, onScrollbarXEnabledChange, onScrollbarYEnabledChange]);\n\n    return context.type === 'hover' ? (\n      <ScrollAreaScrollbarHover {...scrollbarProps} ref={forwardedRef} forceMount={forceMount} />\n    ) : context.type === 'scroll' ? (\n      <ScrollAreaScrollbarScroll {...scrollbarProps} ref={forwardedRef} forceMount={forceMount} />\n    ) : context.type === 'auto' ? (\n      <ScrollAreaScrollbarAuto {...scrollbarProps} ref={forwardedRef} forceMount={forceMount} />\n    ) : context.type === 'always' ? (\n      <ScrollAreaScrollbarVisible {...scrollbarProps} ref={forwardedRef} />\n    ) : null;\n  }\n);\n\nScrollAreaScrollbar.displayName = SCROLLBAR_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollAreaScrollbarHoverElement = ScrollAreaScrollbarAutoElement;\ninterface ScrollAreaScrollbarHoverProps extends ScrollAreaScrollbarAutoProps {\n  forceMount?: true;\n}\n\nconst ScrollAreaScrollbarHover = React.forwardRef<\n  ScrollAreaScrollbarHoverElement,\n  ScrollAreaScrollbarHoverProps\n>((props: ScopedProps<ScrollAreaScrollbarHoverProps>, forwardedRef) => {\n  const { forceMount, ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [visible, setVisible] = React.useState(false);\n\n  React.useEffect(() => {\n    const scrollArea = context.scrollArea;\n    let hideTimer = 0;\n    if (scrollArea) {\n      const handlePointerEnter = () => {\n        window.clearTimeout(hideTimer);\n        setVisible(true);\n      };\n      const handlePointerLeave = () => {\n        hideTimer = window.setTimeout(() => setVisible(false), context.scrollHideDelay);\n      };\n      scrollArea.addEventListener('pointerenter', handlePointerEnter);\n      scrollArea.addEventListener('pointerleave', handlePointerLeave);\n      return () => {\n        scrollArea.removeEventListener('pointerenter', handlePointerEnter);\n        scrollArea.removeEventListener('pointerleave', handlePointerLeave);\n      };\n    }\n  }, [context.scrollArea, context.scrollHideDelay]);\n\n  return (\n    <Presence present={forceMount || visible}>\n      <ScrollAreaScrollbarAuto\n        data-state={visible ? 'visible' : 'hidden'}\n        {...scrollbarProps}\n        ref={forwardedRef}\n      />\n    </Presence>\n  );\n});\n\ntype ScrollAreaScrollbarScrollElement = ScrollAreaScrollbarVisibleElement;\ninterface ScrollAreaScrollbarScrollProps extends ScrollAreaScrollbarVisibleProps {\n  forceMount?: true;\n}\n\nconst ScrollAreaScrollbarScroll = React.forwardRef<\n  ScrollAreaScrollbarScrollElement,\n  ScrollAreaScrollbarScrollProps\n>((props: ScopedProps<ScrollAreaScrollbarScrollProps>, forwardedRef) => {\n  const { forceMount, ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const isHorizontal = props.orientation === 'horizontal';\n  const debounceScrollEnd = useDebounceCallback(() => send('SCROLL_END'), 100);\n  const [state, send] = useStateMachine('hidden', {\n    hidden: {\n      SCROLL: 'scrolling',\n    },\n    scrolling: {\n      SCROLL_END: 'idle',\n      POINTER_ENTER: 'interacting',\n    },\n    interacting: {\n      SCROLL: 'interacting',\n      POINTER_LEAVE: 'idle',\n    },\n    idle: {\n      HIDE: 'hidden',\n      SCROLL: 'scrolling',\n      POINTER_ENTER: 'interacting',\n    },\n  });\n\n  React.useEffect(() => {\n    if (state === 'idle') {\n      const hideTimer = window.setTimeout(() => send('HIDE'), context.scrollHideDelay);\n      return () => window.clearTimeout(hideTimer);\n    }\n  }, [state, context.scrollHideDelay, send]);\n\n  React.useEffect(() => {\n    const viewport = context.viewport;\n    const scrollDirection = isHorizontal ? 'scrollLeft' : 'scrollTop';\n\n    if (viewport) {\n      let prevScrollPos = viewport[scrollDirection];\n      const handleScroll = () => {\n        const scrollPos = viewport[scrollDirection];\n        const hasScrollInDirectionChanged = prevScrollPos !== scrollPos;\n        if (hasScrollInDirectionChanged) {\n          send('SCROLL');\n          debounceScrollEnd();\n        }\n        prevScrollPos = scrollPos;\n      };\n      viewport.addEventListener('scroll', handleScroll);\n      return () => viewport.removeEventListener('scroll', handleScroll);\n    }\n  }, [context.viewport, isHorizontal, send, debounceScrollEnd]);\n\n  return (\n    <Presence present={forceMount || state !== 'hidden'}>\n      <ScrollAreaScrollbarVisible\n        data-state={state === 'hidden' ? 'hidden' : 'visible'}\n        {...scrollbarProps}\n        ref={forwardedRef}\n        onPointerEnter={composeEventHandlers(props.onPointerEnter, () => send('POINTER_ENTER'))}\n        onPointerLeave={composeEventHandlers(props.onPointerLeave, () => send('POINTER_LEAVE'))}\n      />\n    </Presence>\n  );\n});\n\ntype ScrollAreaScrollbarAutoElement = ScrollAreaScrollbarVisibleElement;\ninterface ScrollAreaScrollbarAutoProps extends ScrollAreaScrollbarVisibleProps {\n  forceMount?: true;\n}\n\nconst ScrollAreaScrollbarAuto = React.forwardRef<\n  ScrollAreaScrollbarAutoElement,\n  ScrollAreaScrollbarAutoProps\n>((props: ScopedProps<ScrollAreaScrollbarAutoProps>, forwardedRef) => {\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const { forceMount, ...scrollbarProps } = props;\n  const [visible, setVisible] = React.useState(false);\n  const isHorizontal = props.orientation === 'horizontal';\n  const handleResize = useDebounceCallback(() => {\n    if (context.viewport) {\n      const isOverflowX = context.viewport.offsetWidth < context.viewport.scrollWidth;\n      const isOverflowY = context.viewport.offsetHeight < context.viewport.scrollHeight;\n      setVisible(isHorizontal ? isOverflowX : isOverflowY);\n    }\n  }, 10);\n\n  useResizeObserver(context.viewport, handleResize);\n  useResizeObserver(context.content, handleResize);\n\n  return (\n    <Presence present={forceMount || visible}>\n      <ScrollAreaScrollbarVisible\n        data-state={visible ? 'visible' : 'hidden'}\n        {...scrollbarProps}\n        ref={forwardedRef}\n      />\n    </Presence>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollAreaScrollbarVisibleElement = ScrollAreaScrollbarAxisElement;\ninterface ScrollAreaScrollbarVisibleProps\n  extends Omit<ScrollAreaScrollbarAxisProps, keyof ScrollAreaScrollbarAxisPrivateProps> {\n  orientation?: 'horizontal' | 'vertical';\n}\n\nconst ScrollAreaScrollbarVisible = React.forwardRef<\n  ScrollAreaScrollbarVisibleElement,\n  ScrollAreaScrollbarVisibleProps\n>((props: ScopedProps<ScrollAreaScrollbarVisibleProps>, forwardedRef) => {\n  const { orientation = 'vertical', ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const thumbRef = React.useRef<ScrollAreaThumbElement | null>(null);\n  const pointerOffsetRef = React.useRef(0);\n  const [sizes, setSizes] = React.useState<Sizes>({\n    content: 0,\n    viewport: 0,\n    scrollbar: { size: 0, paddingStart: 0, paddingEnd: 0 },\n  });\n  const thumbRatio = getThumbRatio(sizes.viewport, sizes.content);\n\n  type UncommonProps = 'onThumbPositionChange' | 'onDragScroll' | 'onWheelScroll';\n  const commonProps: Omit<ScrollAreaScrollbarAxisPrivateProps, UncommonProps> = {\n    ...scrollbarProps,\n    sizes,\n    onSizesChange: setSizes,\n    hasThumb: Boolean(thumbRatio > 0 && thumbRatio < 1),\n    onThumbChange: (thumb) => (thumbRef.current = thumb),\n    onThumbPointerUp: () => (pointerOffsetRef.current = 0),\n    onThumbPointerDown: (pointerPos) => (pointerOffsetRef.current = pointerPos),\n  };\n\n  function getScrollPosition(pointerPos: number, dir?: Direction) {\n    return getScrollPositionFromPointer(pointerPos, pointerOffsetRef.current, sizes, dir);\n  }\n\n  if (orientation === 'horizontal') {\n    return (\n      <ScrollAreaScrollbarX\n        {...commonProps}\n        ref={forwardedRef}\n        onThumbPositionChange={() => {\n          if (context.viewport && thumbRef.current) {\n            const scrollPos = context.viewport.scrollLeft;\n            const offset = getThumbOffsetFromScroll(scrollPos, sizes, context.dir);\n            thumbRef.current.style.transform = `translate3d(${offset}px, 0, 0)`;\n          }\n        }}\n        onWheelScroll={(scrollPos) => {\n          if (context.viewport) context.viewport.scrollLeft = scrollPos;\n        }}\n        onDragScroll={(pointerPos) => {\n          if (context.viewport) {\n            context.viewport.scrollLeft = getScrollPosition(pointerPos, context.dir);\n          }\n        }}\n      />\n    );\n  }\n\n  if (orientation === 'vertical') {\n    return (\n      <ScrollAreaScrollbarY\n        {...commonProps}\n        ref={forwardedRef}\n        onThumbPositionChange={() => {\n          if (context.viewport && thumbRef.current) {\n            const scrollPos = context.viewport.scrollTop;\n            const offset = getThumbOffsetFromScroll(scrollPos, sizes);\n            thumbRef.current.style.transform = `translate3d(0, ${offset}px, 0)`;\n          }\n        }}\n        onWheelScroll={(scrollPos) => {\n          if (context.viewport) context.viewport.scrollTop = scrollPos;\n        }}\n        onDragScroll={(pointerPos) => {\n          if (context.viewport) context.viewport.scrollTop = getScrollPosition(pointerPos);\n        }}\n      />\n    );\n  }\n\n  return null;\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollAreaScrollbarAxisPrivateProps = {\n  hasThumb: boolean;\n  sizes: Sizes;\n  onSizesChange(sizes: Sizes): void;\n  onThumbChange(thumb: ScrollAreaThumbElement | null): void;\n  onThumbPointerDown(pointerPos: number): void;\n  onThumbPointerUp(): void;\n  onThumbPositionChange(): void;\n  onWheelScroll(scrollPos: number): void;\n  onDragScroll(pointerPos: number): void;\n};\n\ntype ScrollAreaScrollbarAxisElement = ScrollAreaScrollbarImplElement;\ninterface ScrollAreaScrollbarAxisProps\n  extends Omit<ScrollAreaScrollbarImplProps, keyof ScrollAreaScrollbarImplPrivateProps>,\n    ScrollAreaScrollbarAxisPrivateProps {}\n\nconst ScrollAreaScrollbarX = React.forwardRef<\n  ScrollAreaScrollbarAxisElement,\n  ScrollAreaScrollbarAxisProps\n>((props: ScopedProps<ScrollAreaScrollbarAxisProps>, forwardedRef) => {\n  const { sizes, onSizesChange, ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [computedStyle, setComputedStyle] = React.useState<CSSStyleDeclaration>();\n  const ref = React.useRef<ScrollAreaScrollbarAxisElement>(null);\n  const composeRefs = useComposedRefs(forwardedRef, ref, context.onScrollbarXChange);\n\n  React.useEffect(() => {\n    if (ref.current) setComputedStyle(getComputedStyle(ref.current));\n  }, [ref]);\n\n  return (\n    <ScrollAreaScrollbarImpl\n      data-orientation=\"horizontal\"\n      {...scrollbarProps}\n      ref={composeRefs}\n      sizes={sizes}\n      style={{\n        bottom: 0,\n        left: context.dir === 'rtl' ? 'var(--radix-scroll-area-corner-width)' : 0,\n        right: context.dir === 'ltr' ? 'var(--radix-scroll-area-corner-width)' : 0,\n        ['--radix-scroll-area-thumb-width' as any]: getThumbSize(sizes) + 'px',\n        ...props.style,\n      }}\n      onThumbPointerDown={(pointerPos) => props.onThumbPointerDown(pointerPos.x)}\n      onDragScroll={(pointerPos) => props.onDragScroll(pointerPos.x)}\n      onWheelScroll={(event, maxScrollPos) => {\n        if (context.viewport) {\n          const scrollPos = context.viewport.scrollLeft + event.deltaX;\n          props.onWheelScroll(scrollPos);\n          // prevent window scroll when wheeling on scrollbar\n          if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {\n            event.preventDefault();\n          }\n        }\n      }}\n      onResize={() => {\n        if (ref.current && context.viewport && computedStyle) {\n          onSizesChange({\n            content: context.viewport.scrollWidth,\n            viewport: context.viewport.offsetWidth,\n            scrollbar: {\n              size: ref.current.clientWidth,\n              paddingStart: toInt(computedStyle.paddingLeft),\n              paddingEnd: toInt(computedStyle.paddingRight),\n            },\n          });\n        }\n      }}\n    />\n  );\n});\n\nconst ScrollAreaScrollbarY = React.forwardRef<\n  ScrollAreaScrollbarAxisElement,\n  ScrollAreaScrollbarAxisProps\n>((props: ScopedProps<ScrollAreaScrollbarAxisProps>, forwardedRef) => {\n  const { sizes, onSizesChange, ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [computedStyle, setComputedStyle] = React.useState<CSSStyleDeclaration>();\n  const ref = React.useRef<ScrollAreaScrollbarAxisElement>(null);\n  const composeRefs = useComposedRefs(forwardedRef, ref, context.onScrollbarYChange);\n\n  React.useEffect(() => {\n    if (ref.current) setComputedStyle(getComputedStyle(ref.current));\n  }, [ref]);\n\n  return (\n    <ScrollAreaScrollbarImpl\n      data-orientation=\"vertical\"\n      {...scrollbarProps}\n      ref={composeRefs}\n      sizes={sizes}\n      style={{\n        top: 0,\n        right: context.dir === 'ltr' ? 0 : undefined,\n        left: context.dir === 'rtl' ? 0 : undefined,\n        bottom: 'var(--radix-scroll-area-corner-height)',\n        ['--radix-scroll-area-thumb-height' as any]: getThumbSize(sizes) + 'px',\n        ...props.style,\n      }}\n      onThumbPointerDown={(pointerPos) => props.onThumbPointerDown(pointerPos.y)}\n      onDragScroll={(pointerPos) => props.onDragScroll(pointerPos.y)}\n      onWheelScroll={(event, maxScrollPos) => {\n        if (context.viewport) {\n          const scrollPos = context.viewport.scrollTop + event.deltaY;\n          props.onWheelScroll(scrollPos);\n          // prevent window scroll when wheeling on scrollbar\n          if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {\n            event.preventDefault();\n          }\n        }\n      }}\n      onResize={() => {\n        if (ref.current && context.viewport && computedStyle) {\n          onSizesChange({\n            content: context.viewport.scrollHeight,\n            viewport: context.viewport.offsetHeight,\n            scrollbar: {\n              size: ref.current.clientHeight,\n              paddingStart: toInt(computedStyle.paddingTop),\n              paddingEnd: toInt(computedStyle.paddingBottom),\n            },\n          });\n        }\n      }}\n    />\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollbarContext = {\n  hasThumb: boolean;\n  scrollbar: ScrollAreaScrollbarElement | null;\n  onThumbChange(thumb: ScrollAreaThumbElement | null): void;\n  onThumbPointerUp(): void;\n  onThumbPointerDown(pointerPos: { x: number; y: number }): void;\n  onThumbPositionChange(): void;\n};\n\nconst [ScrollbarProvider, useScrollbarContext] =\n  createScrollAreaContext<ScrollbarContext>(SCROLLBAR_NAME);\n\ntype ScrollAreaScrollbarImplElement = React.ElementRef<typeof Primitive.div>;\ntype ScrollAreaScrollbarImplPrivateProps = {\n  sizes: Sizes;\n  hasThumb: boolean;\n  onThumbChange: ScrollbarContext['onThumbChange'];\n  onThumbPointerUp: ScrollbarContext['onThumbPointerUp'];\n  onThumbPointerDown: ScrollbarContext['onThumbPointerDown'];\n  onThumbPositionChange: ScrollbarContext['onThumbPositionChange'];\n  onWheelScroll(event: WheelEvent, maxScrollPos: number): void;\n  onDragScroll(pointerPos: { x: number; y: number }): void;\n  onResize(): void;\n};\ninterface ScrollAreaScrollbarImplProps\n  extends PrimitiveDivProps,\n    ScrollAreaScrollbarImplPrivateProps {}\n\nconst ScrollAreaScrollbarImpl = React.forwardRef<\n  ScrollAreaScrollbarImplElement,\n  ScrollAreaScrollbarImplProps\n>((props: ScopedProps<ScrollAreaScrollbarImplProps>, forwardedRef) => {\n  const {\n    __scopeScrollArea,\n    sizes,\n    hasThumb,\n    onThumbChange,\n    onThumbPointerUp,\n    onThumbPointerDown,\n    onThumbPositionChange,\n    onDragScroll,\n    onWheelScroll,\n    onResize,\n    ...scrollbarProps\n  } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, __scopeScrollArea);\n  const [scrollbar, setScrollbar] = React.useState<ScrollAreaScrollbarElement | null>(null);\n  const composeRefs = useComposedRefs(forwardedRef, (node) => setScrollbar(node));\n  const rectRef = React.useRef<ClientRect | null>(null);\n  const prevWebkitUserSelectRef = React.useRef<string>('');\n  const viewport = context.viewport;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const handleWheelScroll = useCallbackRef(onWheelScroll);\n  const handleThumbPositionChange = useCallbackRef(onThumbPositionChange);\n  const handleResize = useDebounceCallback(onResize, 10);\n\n  function handleDragScroll(event: React.PointerEvent<HTMLElement>) {\n    if (rectRef.current) {\n      const x = event.clientX - rectRef.current.left;\n      const y = event.clientY - rectRef.current.top;\n      onDragScroll({ x, y });\n    }\n  }\n\n  /**\n   * We bind wheel event imperatively so we can switch off passive\n   * mode for document wheel event to allow it to be prevented\n   */\n  React.useEffect(() => {\n    const handleWheel = (event: WheelEvent) => {\n      const element = event.target as HTMLElement;\n      const isScrollbarWheel = scrollbar?.contains(element);\n      if (isScrollbarWheel) handleWheelScroll(event, maxScrollPos);\n    };\n    document.addEventListener('wheel', handleWheel, { passive: false });\n    return () => document.removeEventListener('wheel', handleWheel, { passive: false } as any);\n  }, [viewport, scrollbar, maxScrollPos, handleWheelScroll]);\n\n  /**\n   * Update thumb position on sizes change\n   */\n  React.useEffect(handleThumbPositionChange, [sizes, handleThumbPositionChange]);\n\n  useResizeObserver(scrollbar, handleResize);\n  useResizeObserver(context.content, handleResize);\n\n  return (\n    <ScrollbarProvider\n      scope={__scopeScrollArea}\n      scrollbar={scrollbar}\n      hasThumb={hasThumb}\n      onThumbChange={useCallbackRef(onThumbChange)}\n      onThumbPointerUp={useCallbackRef(onThumbPointerUp)}\n      onThumbPositionChange={handleThumbPositionChange}\n      onThumbPointerDown={useCallbackRef(onThumbPointerDown)}\n    >\n      <Primitive.div\n        {...scrollbarProps}\n        ref={composeRefs}\n        style={{ position: 'absolute', ...scrollbarProps.style }}\n        onPointerDown={composeEventHandlers(props.onPointerDown, (event) => {\n          const mainPointer = 0;\n          if (event.button === mainPointer) {\n            const element = event.target as HTMLElement;\n            element.setPointerCapture(event.pointerId);\n            rectRef.current = scrollbar!.getBoundingClientRect();\n            // pointer capture doesn't prevent text selection in Safari\n            // so we remove text selection manually when scrolling\n            prevWebkitUserSelectRef.current = document.body.style.webkitUserSelect;\n            document.body.style.webkitUserSelect = 'none';\n            handleDragScroll(event);\n          }\n        })}\n        onPointerMove={composeEventHandlers(props.onPointerMove, handleDragScroll)}\n        onPointerUp={composeEventHandlers(props.onPointerUp, (event) => {\n          const element = event.target as HTMLElement;\n          element.releasePointerCapture(event.pointerId);\n          document.body.style.webkitUserSelect = prevWebkitUserSelectRef.current;\n          rectRef.current = null;\n        })}\n      />\n    </ScrollbarProvider>\n  );\n});\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaThumb\n * -----------------------------------------------------------------------------------------------*/\n\nconst THUMB_NAME = 'ScrollbarThumb';\n\ntype ScrollAreaThumbElement = React.ElementRef<typeof Primitive.div>;\ninterface ScrollAreaThumbProps extends PrimitiveDivProps {}\n\nconst ScrollAreaThumb = React.forwardRef<ScrollAreaThumbElement, ScrollAreaThumbProps>(\n  (props: ScopedProps<ScrollAreaThumbProps>, forwardedRef) => {\n    const { __scopeScrollArea, style, ...thumbProps } = props;\n    const scrollAreaContext = useScrollAreaContext(THUMB_NAME, __scopeScrollArea);\n    const scrollbarContext = useScrollbarContext(THUMB_NAME, __scopeScrollArea);\n    const { onThumbPositionChange } = scrollbarContext;\n    const composedRef = useComposedRefs(forwardedRef, (node) =>\n      scrollbarContext.onThumbChange(node)\n    );\n    const removeUnlinkedScrollListenerRef = React.useRef<() => void>();\n    const debounceScrollEnd = useDebounceCallback(() => {\n      if (removeUnlinkedScrollListenerRef.current) {\n        removeUnlinkedScrollListenerRef.current();\n        removeUnlinkedScrollListenerRef.current = undefined;\n      }\n    }, 100);\n\n    React.useEffect(() => {\n      const viewport = scrollAreaContext.viewport;\n      if (viewport) {\n        /**\n         * We only bind to native scroll event so we know when scroll starts and ends.\n         * When scroll starts we start a requestAnimationFrame loop that checks for\n         * changes to scroll position. That rAF loop triggers our thumb position change\n         * when relevant to avoid scroll-linked effects. We cancel the loop when scroll ends.\n         * https://developer.mozilla.org/en-US/docs/Mozilla/Performance/Scroll-linked_effects\n         */\n        const handleScroll = () => {\n          debounceScrollEnd();\n          if (!removeUnlinkedScrollListenerRef.current) {\n            const listener = addUnlinkedScrollListener(viewport, onThumbPositionChange);\n            removeUnlinkedScrollListenerRef.current = listener;\n            onThumbPositionChange();\n          }\n        };\n        onThumbPositionChange();\n        viewport.addEventListener('scroll', handleScroll);\n        return () => viewport.removeEventListener('scroll', handleScroll);\n      }\n    }, [scrollAreaContext.viewport, debounceScrollEnd, onThumbPositionChange]);\n\n    return scrollbarContext.hasThumb ? (\n      <Primitive.div\n        {...thumbProps}\n        ref={composedRef}\n        style={{\n          width: 'var(--radix-scroll-area-thumb-width)',\n          height: 'var(--radix-scroll-area-thumb-height)',\n          ...style,\n        }}\n        onPointerDownCapture={composeEventHandlers(props.onPointerDownCapture, (event) => {\n          const thumb = event.target as HTMLElement;\n          const thumbRect = thumb.getBoundingClientRect();\n          const x = event.clientX - thumbRect.left;\n          const y = event.clientY - thumbRect.top;\n          scrollbarContext.onThumbPointerDown({ x, y });\n        })}\n        onPointerUp={composeEventHandlers(props.onPointerUp, scrollbarContext.onThumbPointerUp)}\n      />\n    ) : null;\n  }\n);\n\nScrollAreaThumb.displayName = THUMB_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaCorner\n * -----------------------------------------------------------------------------------------------*/\n\nconst CORNER_NAME = 'ScrollAreaCorner';\n\ntype ScrollAreaCornerElement = ScrollAreaCornerImplElement;\ninterface ScrollAreaCornerProps extends ScrollAreaCornerImplProps {}\n\nconst ScrollAreaCorner = React.forwardRef<ScrollAreaCornerElement, ScrollAreaCornerProps>(\n  (props: ScopedProps<ScrollAreaCornerProps>, forwardedRef) => {\n    const context = useScrollAreaContext(CORNER_NAME, props.__scopeScrollArea);\n    const hasBothScrollbarsVisible = Boolean(context.scrollbarX && context.scrollbarY);\n    const hasCorner = context.type !== 'scroll' && hasBothScrollbarsVisible;\n    return hasCorner ? <ScrollAreaCornerImpl {...props} ref={forwardedRef} /> : null;\n  }\n);\n\nScrollAreaCorner.displayName = CORNER_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollAreaCornerImplElement = React.ElementRef<typeof Primitive.div>;\ninterface ScrollAreaCornerImplProps extends PrimitiveDivProps {}\n\nconst ScrollAreaCornerImpl = React.forwardRef<\n  ScrollAreaCornerImplElement,\n  ScrollAreaCornerImplProps\n>((props: ScopedProps<ScrollAreaCornerImplProps>, forwardedRef) => {\n  const { __scopeScrollArea, ...cornerProps } = props;\n  const context = useScrollAreaContext(CORNER_NAME, __scopeScrollArea);\n  const [width, setWidth] = React.useState(0);\n  const [height, setHeight] = React.useState(0);\n  const hasSize = Boolean(width && height);\n\n  useResizeObserver(context.scrollbarX, () => {\n    const height = context.scrollbarX?.offsetHeight || 0;\n    context.onCornerHeightChange(height);\n    setHeight(height);\n  });\n\n  useResizeObserver(context.scrollbarY, () => {\n    const width = context.scrollbarY?.offsetWidth || 0;\n    context.onCornerWidthChange(width);\n    setWidth(width);\n  });\n\n  return hasSize ? (\n    <Primitive.div\n      {...cornerProps}\n      ref={forwardedRef}\n      style={{\n        width,\n        height,\n        position: 'absolute',\n        right: context.dir === 'ltr' ? 0 : undefined,\n        left: context.dir === 'rtl' ? 0 : undefined,\n        bottom: 0,\n        ...props.style,\n      }}\n    />\n  ) : null;\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction toInt(value?: string) {\n  return value ? parseInt(value, 10) : 0;\n}\n\nfunction getThumbRatio(viewportSize: number, contentSize: number) {\n  const ratio = viewportSize / contentSize;\n  return isNaN(ratio) ? 0 : ratio;\n}\n\nfunction getThumbSize(sizes: Sizes) {\n  const ratio = getThumbRatio(sizes.viewport, sizes.content);\n  const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;\n  const thumbSize = (sizes.scrollbar.size - scrollbarPadding) * ratio;\n  // minimum of 18 matches macOS minimum\n  return Math.max(thumbSize, 18);\n}\n\nfunction getScrollPositionFromPointer(\n  pointerPos: number,\n  pointerOffset: number,\n  sizes: Sizes,\n  dir: Direction = 'ltr'\n) {\n  const thumbSizePx = getThumbSize(sizes);\n  const thumbCenter = thumbSizePx / 2;\n  const offset = pointerOffset || thumbCenter;\n  const thumbOffsetFromEnd = thumbSizePx - offset;\n  const minPointerPos = sizes.scrollbar.paddingStart + offset;\n  const maxPointerPos = sizes.scrollbar.size - sizes.scrollbar.paddingEnd - thumbOffsetFromEnd;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const scrollRange = dir === 'ltr' ? [0, maxScrollPos] : [maxScrollPos * -1, 0];\n  const interpolate = linearScale([minPointerPos, maxPointerPos], scrollRange as [number, number]);\n  return interpolate(pointerPos);\n}\n\nfunction getThumbOffsetFromScroll(scrollPos: number, sizes: Sizes, dir: Direction = 'ltr') {\n  const thumbSizePx = getThumbSize(sizes);\n  const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;\n  const scrollbar = sizes.scrollbar.size - scrollbarPadding;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const maxThumbPos = scrollbar - thumbSizePx;\n  const scrollClampRange = dir === 'ltr' ? [0, maxScrollPos] : [maxScrollPos * -1, 0];\n  const scrollWithoutMomentum = clamp(scrollPos, scrollClampRange as [number, number]);\n  const interpolate = linearScale([0, maxScrollPos], [0, maxThumbPos]);\n  return interpolate(scrollWithoutMomentum);\n}\n\n// https://github.com/tmcw-up-for-adoption/simple-linear-scale/blob/master/index.js\nfunction linearScale(input: readonly [number, number], output: readonly [number, number]) {\n  return (value: number) => {\n    if (input[0] === input[1] || output[0] === output[1]) return output[0];\n    const ratio = (output[1] - output[0]) / (input[1] - input[0]);\n    return output[0] + ratio * (value - input[0]);\n  };\n}\n\nfunction isScrollingWithinScrollbarBounds(scrollPos: number, maxScrollPos: number) {\n  return scrollPos > 0 && scrollPos < maxScrollPos;\n}\n\n// Custom scroll handler to avoid scroll-linked effects\n// https://developer.mozilla.org/en-US/docs/Mozilla/Performance/Scroll-linked_effects\nconst addUnlinkedScrollListener = (node: HTMLElement, handler = () => {}) => {\n  let prevPosition = { left: node.scrollLeft, top: node.scrollTop };\n  let rAF = 0;\n  (function loop() {\n    const position = { left: node.scrollLeft, top: node.scrollTop };\n    const isHorizontalScroll = prevPosition.left !== position.left;\n    const isVerticalScroll = prevPosition.top !== position.top;\n    if (isHorizontalScroll || isVerticalScroll) handler();\n    prevPosition = position;\n    rAF = window.requestAnimationFrame(loop);\n  })();\n  return () => window.cancelAnimationFrame(rAF);\n};\n\nfunction useDebounceCallback(callback: () => void, delay: number) {\n  const handleCallback = useCallbackRef(callback);\n  const debounceTimerRef = React.useRef(0);\n  React.useEffect(() => () => window.clearTimeout(debounceTimerRef.current), []);\n  return React.useCallback(() => {\n    window.clearTimeout(debounceTimerRef.current);\n    debounceTimerRef.current = window.setTimeout(handleCallback, delay);\n  }, [handleCallback, delay]);\n}\n\nfunction useResizeObserver(element: HTMLElement | null, onResize: () => void) {\n  const handleResize = useCallbackRef(onResize);\n  useLayoutEffect(() => {\n    let rAF = 0;\n    if (element) {\n      /**\n       * Resize Observer will throw an often benign error that says `ResizeObserver loop\n       * completed with undelivered notifications`. This means that ResizeObserver was not\n       * able to deliver all observations within a single animation frame, so we use\n       * `requestAnimationFrame` to ensure we don't deliver unnecessary observations.\n       * Further reading: https://github.com/WICG/resize-observer/issues/38\n       */\n      const resizeObserver = new ResizeObserver(() => {\n        cancelAnimationFrame(rAF);\n        rAF = window.requestAnimationFrame(handleResize);\n      });\n      resizeObserver.observe(element);\n      return () => {\n        window.cancelAnimationFrame(rAF);\n        resizeObserver.unobserve(element);\n      };\n    }\n  }, [element, handleResize]);\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = ScrollArea;\nconst Viewport = ScrollAreaViewport;\nconst Scrollbar = ScrollAreaScrollbar;\nconst Thumb = ScrollAreaThumb;\nconst Corner = ScrollAreaCorner;\n\nexport {\n  createScrollAreaScope,\n  //\n  ScrollArea,\n  ScrollAreaViewport,\n  ScrollAreaScrollbar,\n  ScrollAreaThumb,\n  ScrollAreaCorner,\n  //\n  Root,\n  Viewport,\n  Scrollbar,\n  Thumb,\n  Corner,\n};\nexport type {\n  ScrollAreaProps,\n  ScrollAreaViewportProps,\n  ScrollAreaScrollbarProps,\n  ScrollAreaThumbProps,\n  ScrollAreaCornerProps,\n};\n","import * as React from 'react';\n\ntype Machine<S> = { [k: string]: { [k: string]: S } };\ntype MachineState<T> = keyof T;\ntype MachineEvent<T> = keyof UnionToIntersection<T[keyof T]>;\n\n// 🤯 https://fettblog.eu/typescript-union-to-intersection/\ntype UnionToIntersection<T> = (T extends any ? (x: T) => any : never) extends (x: infer R) => any\n  ? R\n  : never;\n\nexport function useStateMachine<M>(\n  initialState: MachineState<M>,\n  machine: M & Machine<MachineState<M>>\n) {\n  return React.useReducer((state: MachineState<M>, event: MachineEvent<M>): MachineState<M> => {\n    const nextState = (machine[state] as any)[event];\n    return nextState ?? state;\n  }, initialState);\n}\n"],"names":["createScrollAreaContext","createScrollAreaScope","createContextScope","ScrollAreaProvider","useScrollAreaContext","ScrollArea","React","forwardRef","props","forwardedRef","__scopeScrollArea","type","scrollHideDelay","scrollAreaProps","scrollArea","setScrollArea","useState","viewport","setViewport","content","setContent","scrollbarX","setScrollbarX","scrollbarY","setScrollbarY","cornerWidth","setCornerWidth","cornerHeight","setCornerHeight","scrollbarXEnabled","setScrollbarXEnabled","scrollbarYEnabled","setScrollbarYEnabled","composedRefs","useComposedRefs","node","computedDirection","useDirection","dir","_react","createElement","$a2081f330f7bcc1f106df26ddcac79$var$ScrollAreaProvider","scope","onViewportChange","onContentChange","onScrollbarXChange","onScrollbarXEnabledChange","onScrollbarYChange","onScrollbarYEnabledChange","onCornerWidthChange","onCornerHeightChange","Primitive","div","_babelRuntimeHelpersEsmExtends","ref","style","position","ScrollAreaViewport","children","viewportProps","context","useRef","Fragment","dangerouslySetInnerHTML","__html","overflowX","overflowY","minWidth","display","ScrollAreaScrollbar","forceMount","scrollbarProps","isHorizontal","orientation","useEffect","$a2081f330f7bcc1f106df26ddcac79$var$ScrollAreaScrollbarHover","$a2081f330f7bcc1f106df26ddcac79$var$ScrollAreaScrollbarScroll","$a2081f330f7bcc1f106df26ddcac79$var$ScrollAreaScrollbarAuto","$a2081f330f7bcc1f106df26ddcac79$var$ScrollAreaScrollbarVisible","ScrollAreaScrollbarHover","visible","setVisible","hideTimer","handlePointerEnter","window","clearTimeout","handlePointerLeave","setTimeout","addEventListener","removeEventListener","Presence","present","ScrollAreaScrollbarScroll","debounceScrollEnd","useDebounceCallback","send","state","initialState","machine","hidden","SCROLL","scrolling","SCROLL_END","POINTER_ENTER","interacting","POINTER_LEAVE","idle","HIDE","useReducer","event","nextState","scrollDirection","prevScrollPos","handleScroll","scrollPos","onPointerEnter","composeEventHandlers","onPointerLeave","ScrollAreaScrollbarAuto","handleResize","isOverflowX","offsetWidth","scrollWidth","isOverflowY","offsetHeight","scrollHeight","useResizeObserver","ScrollAreaScrollbarVisible","thumbRef","pointerOffsetRef","sizes","setSizes","scrollbar","size","paddingStart","paddingEnd","thumbRatio","getThumbRatio","commonProps","onSizesChange","hasThumb","Boolean","onThumbChange","thumb","current","onThumbPointerUp","onThumbPointerDown","pointerPos","getScrollPosition","pointerOffset","thumbSizePx","getThumbSize","thumbCenter","offset","thumbOffsetFromEnd","minPointerPos","maxPointerPos","maxScrollPos","linearScale","interpolate","getScrollPositionFromPointer","$a2081f330f7bcc1f106df26ddcac79$var$ScrollAreaScrollbarX","onThumbPositionChange","getThumbOffsetFromScroll","scrollLeft","transform","onWheelScroll","onDragScroll","$a2081f330f7bcc1f106df26ddcac79$var$ScrollAreaScrollbarY","scrollTop","ScrollAreaScrollbarX","computedStyle","setComputedStyle","composeRefs","getComputedStyle","$a2081f330f7bcc1f106df26ddcac79$var$ScrollAreaScrollbarImpl","bottom","left","right","x","deltaX","isScrollingWithinScrollbarBounds","preventDefault","onResize","clientWidth","toInt","paddingLeft","paddingRight","ScrollAreaScrollbarY","top","undefined","y","deltaY","clientHeight","paddingTop","paddingBottom","ScrollbarProvider","useScrollbarContext","ScrollAreaScrollbarImpl","setScrollbar","rectRef","prevWebkitUserSelectRef","handleWheelScroll","useCallbackRef","handleThumbPositionChange","handleDragScroll","clientX","clientY","handleWheel","element","target","contains","document","passive","$a2081f330f7bcc1f106df26ddcac79$var$ScrollbarProvider","onPointerDown","button","setPointerCapture","pointerId","getBoundingClientRect","body","webkitUserSelect","onPointerMove","onPointerUp","releasePointerCapture","ScrollAreaThumb","thumbProps","scrollAreaContext","scrollbarContext","composedRef","removeUnlinkedScrollListenerRef","listener","addUnlinkedScrollListener","width","height","onPointerDownCapture","thumbRect","ScrollAreaCorner","hasBothScrollbarsVisible","$a2081f330f7bcc1f106df26ddcac79$var$ScrollAreaCornerImpl","ScrollAreaCornerImpl","cornerProps","setWidth","setHeight","hasSize","_context$scrollbarX","_context$scrollbarY","value","parseInt","viewportSize","contentSize","ratio","isNaN","scrollbarPadding","thumbSize","Math","max","maxThumbPos","scrollWithoutMomentum","clamp","input","output","handler","prevPosition","rAF","loop","isHorizontalScroll","isVerticalScroll","requestAnimationFrame","cancelAnimationFrame","callback","delay","handleCallback","debounceTimerRef","useCallback","useLayoutEffect","resizeObserver","ResizeObserver","observe","unobserve","Root","Viewport","Scrollbar","Thumb","Corner"],"version":3,"file":"index.module.js.map"}